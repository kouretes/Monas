// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Kimage.proto

#ifndef PROTOBUF_Kimage_2eproto__INCLUDED
#define PROTOBUF_Kimage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Kimage_2eproto();
void protobuf_AssignDesc_Kimage_2eproto();
void protobuf_ShutdownFile_Kimage_2eproto();

class KImageLogger;
class KRawImage;
class KRawImageHeader;
class Polygon;
class BallCircle;
class point;

// ===================================================================

class KImageLogger : public ::google::protobuf::Message {
 public:
  KImageLogger();
  virtual ~KImageLogger();
  
  KImageLogger(const KImageLogger& from);
  
  inline KImageLogger& operator=(const KImageLogger& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KImageLogger& default_instance();
  
  void Swap(KImageLogger* other);
  
  // implements Message ----------------------------------------------
  
  KImageLogger* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KImageLogger& from);
  void MergeFrom(const KImageLogger& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .KRawImage img = 1;
  inline int img_size() const;
  inline void clear_img();
  static const int kImgFieldNumber = 1;
  inline const ::KRawImage& img(int index) const;
  inline ::KRawImage* mutable_img(int index);
  inline ::KRawImage* add_img();
  inline const ::google::protobuf::RepeatedPtrField< ::KRawImage >&
      img() const;
  inline ::google::protobuf::RepeatedPtrField< ::KRawImage >*
      mutable_img();
  
  // @@protoc_insertion_point(class_scope:KImageLogger)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KRawImage > img_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static KImageLogger* default_instance_;
};
// -------------------------------------------------------------------

class KRawImage : public ::google::protobuf::Message {
 public:
  KRawImage();
  virtual ~KRawImage();
  
  KRawImage(const KRawImage& from);
  
  inline KRawImage& operator=(const KRawImage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KRawImage& default_instance();
  
  void Swap(KRawImage* other);
  
  // implements Message ----------------------------------------------
  
  KRawImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KRawImage& from);
  void MergeFrom(const KRawImage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 bytes = 1 [default = -1];
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 1;
  inline ::google::protobuf::int32 bytes() const;
  inline void set_bytes(::google::protobuf::int32 value);
  
  // required int32 width = 2 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // required int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // required int32 type = 4 [default = 4];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required bytes ImageRawData = 5;
  inline bool has_imagerawdata() const;
  inline void clear_imagerawdata();
  static const int kImageRawDataFieldNumber = 5;
  inline const ::std::string& imagerawdata() const;
  inline void set_imagerawdata(const ::std::string& value);
  inline void set_imagerawdata(const char* value);
  inline void set_imagerawdata(const void* value, size_t size);
  inline ::std::string* mutable_imagerawdata();
  inline ::std::string* release_imagerawdata();
  
  // repeated .Polygon p = 6;
  inline int p_size() const;
  inline void clear_p();
  static const int kPFieldNumber = 6;
  inline const ::Polygon& p(int index) const;
  inline ::Polygon* mutable_p(int index);
  inline ::Polygon* add_p();
  inline const ::google::protobuf::RepeatedPtrField< ::Polygon >&
      p() const;
  inline ::google::protobuf::RepeatedPtrField< ::Polygon >*
      mutable_p();
  
  // repeated .BallCircle ball = 7;
  inline int ball_size() const;
  inline void clear_ball();
  static const int kBallFieldNumber = 7;
  inline const ::BallCircle& ball(int index) const;
  inline ::BallCircle* mutable_ball(int index);
  inline ::BallCircle* add_ball();
  inline const ::google::protobuf::RepeatedPtrField< ::BallCircle >&
      ball() const;
  inline ::google::protobuf::RepeatedPtrField< ::BallCircle >*
      mutable_ball();
  
  // @@protoc_insertion_point(class_scope:KRawImage)
 private:
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_imagerawdata();
  inline void clear_has_imagerawdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bytes_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 type_;
  ::std::string* imagerawdata_;
  ::google::protobuf::RepeatedPtrField< ::Polygon > p_;
  ::google::protobuf::RepeatedPtrField< ::BallCircle > ball_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static KRawImage* default_instance_;
};
// -------------------------------------------------------------------

class KRawImageHeader : public ::google::protobuf::Message {
 public:
  KRawImageHeader();
  virtual ~KRawImageHeader();
  
  KRawImageHeader(const KRawImageHeader& from);
  
  inline KRawImageHeader& operator=(const KRawImageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KRawImageHeader& default_instance();
  
  void Swap(KRawImageHeader* other);
  
  // implements Message ----------------------------------------------
  
  KRawImageHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KRawImageHeader& from);
  void MergeFrom(const KRawImageHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 bytes = 1 [default = -1];
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 1;
  inline ::google::protobuf::int32 bytes() const;
  inline void set_bytes(::google::protobuf::int32 value);
  
  // required int32 width = 2 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // required int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // required int32 type = 4 [default = 4];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:KRawImageHeader)
 private:
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bytes_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static KRawImageHeader* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();
  
  Polygon(const Polygon& from);
  
  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();
  
  void Swap(Polygon* other);
  
  // implements Message ----------------------------------------------
  
  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .point points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::point& points(int index) const;
  inline ::point* mutable_points(int index);
  inline ::point* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::point >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::point >*
      mutable_points();
  
  // required int32 color = 2 [default = -1];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // required float confidence = 3 [default = -1];
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  inline float confidence() const;
  inline void set_confidence(float value);
  
  // @@protoc_insertion_point(class_scope:Polygon)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::point > points_;
  ::google::protobuf::int32 color_;
  float confidence_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class BallCircle : public ::google::protobuf::Message {
 public:
  BallCircle();
  virtual ~BallCircle();
  
  BallCircle(const BallCircle& from);
  
  inline BallCircle& operator=(const BallCircle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallCircle& default_instance();
  
  void Swap(BallCircle* other);
  
  // implements Message ----------------------------------------------
  
  BallCircle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BallCircle& from);
  void MergeFrom(const BallCircle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .point center = 1;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 1;
  inline const ::point& center() const;
  inline ::point* mutable_center();
  inline ::point* release_center();
  
  // required int32 radius = 2 [default = -1];
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline ::google::protobuf::int32 radius() const;
  inline void set_radius(::google::protobuf::int32 value);
  
  // required int32 confidence = 3 [default = -1];
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  inline ::google::protobuf::int32 confidence() const;
  inline void set_confidence(::google::protobuf::int32 value);
  
  // required bool valid = 4 [default = false];
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 4;
  inline bool valid() const;
  inline void set_valid(bool value);
  
  // optional int32 color = 5 [default = -1];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 5;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:BallCircle)
 private:
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_color();
  inline void clear_has_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::point* center_;
  ::google::protobuf::int32 radius_;
  ::google::protobuf::int32 confidence_;
  bool valid_;
  ::google::protobuf::int32 color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static BallCircle* default_instance_;
};
// -------------------------------------------------------------------

class point : public ::google::protobuf::Message {
 public:
  point();
  virtual ~point();
  
  point(const point& from);
  
  inline point& operator=(const point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const point& default_instance();
  
  void Swap(point* other);
  
  // implements Message ----------------------------------------------
  
  point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const point& from);
  void MergeFrom(const point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1 [default = -1];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2 [default = -1];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Kimage_2eproto();
  friend void protobuf_AssignDesc_Kimage_2eproto();
  friend void protobuf_ShutdownFile_Kimage_2eproto();
  
  void InitAsDefaultInstance();
  static point* default_instance_;
};
// ===================================================================


// ===================================================================

// KImageLogger

// repeated .KRawImage img = 1;
inline int KImageLogger::img_size() const {
  return img_.size();
}
inline void KImageLogger::clear_img() {
  img_.Clear();
}
inline const ::KRawImage& KImageLogger::img(int index) const {
  return img_.Get(index);
}
inline ::KRawImage* KImageLogger::mutable_img(int index) {
  return img_.Mutable(index);
}
inline ::KRawImage* KImageLogger::add_img() {
  return img_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KRawImage >&
KImageLogger::img() const {
  return img_;
}
inline ::google::protobuf::RepeatedPtrField< ::KRawImage >*
KImageLogger::mutable_img() {
  return &img_;
}

// -------------------------------------------------------------------

// KRawImage

// required int32 bytes = 1 [default = -1];
inline bool KRawImage::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KRawImage::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KRawImage::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KRawImage::clear_bytes() {
  bytes_ = -1;
  clear_has_bytes();
}
inline ::google::protobuf::int32 KRawImage::bytes() const {
  return bytes_;
}
inline void KRawImage::set_bytes(::google::protobuf::int32 value) {
  set_has_bytes();
  bytes_ = value;
}

// required int32 width = 2 [default = 0];
inline bool KRawImage::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KRawImage::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KRawImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KRawImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 KRawImage::width() const {
  return width_;
}
inline void KRawImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 3 [default = 0];
inline bool KRawImage::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KRawImage::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KRawImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KRawImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 KRawImage::height() const {
  return height_;
}
inline void KRawImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required int32 type = 4 [default = 4];
inline bool KRawImage::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KRawImage::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KRawImage::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KRawImage::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::google::protobuf::int32 KRawImage::type() const {
  return type_;
}
inline void KRawImage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bytes ImageRawData = 5;
inline bool KRawImage::has_imagerawdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KRawImage::set_has_imagerawdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KRawImage::clear_has_imagerawdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KRawImage::clear_imagerawdata() {
  if (imagerawdata_ != &::google::protobuf::internal::kEmptyString) {
    imagerawdata_->clear();
  }
  clear_has_imagerawdata();
}
inline const ::std::string& KRawImage::imagerawdata() const {
  return *imagerawdata_;
}
inline void KRawImage::set_imagerawdata(const ::std::string& value) {
  set_has_imagerawdata();
  if (imagerawdata_ == &::google::protobuf::internal::kEmptyString) {
    imagerawdata_ = new ::std::string;
  }
  imagerawdata_->assign(value);
}
inline void KRawImage::set_imagerawdata(const char* value) {
  set_has_imagerawdata();
  if (imagerawdata_ == &::google::protobuf::internal::kEmptyString) {
    imagerawdata_ = new ::std::string;
  }
  imagerawdata_->assign(value);
}
inline void KRawImage::set_imagerawdata(const void* value, size_t size) {
  set_has_imagerawdata();
  if (imagerawdata_ == &::google::protobuf::internal::kEmptyString) {
    imagerawdata_ = new ::std::string;
  }
  imagerawdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KRawImage::mutable_imagerawdata() {
  set_has_imagerawdata();
  if (imagerawdata_ == &::google::protobuf::internal::kEmptyString) {
    imagerawdata_ = new ::std::string;
  }
  return imagerawdata_;
}
inline ::std::string* KRawImage::release_imagerawdata() {
  clear_has_imagerawdata();
  if (imagerawdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagerawdata_;
    imagerawdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Polygon p = 6;
inline int KRawImage::p_size() const {
  return p_.size();
}
inline void KRawImage::clear_p() {
  p_.Clear();
}
inline const ::Polygon& KRawImage::p(int index) const {
  return p_.Get(index);
}
inline ::Polygon* KRawImage::mutable_p(int index) {
  return p_.Mutable(index);
}
inline ::Polygon* KRawImage::add_p() {
  return p_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Polygon >&
KRawImage::p() const {
  return p_;
}
inline ::google::protobuf::RepeatedPtrField< ::Polygon >*
KRawImage::mutable_p() {
  return &p_;
}

// repeated .BallCircle ball = 7;
inline int KRawImage::ball_size() const {
  return ball_.size();
}
inline void KRawImage::clear_ball() {
  ball_.Clear();
}
inline const ::BallCircle& KRawImage::ball(int index) const {
  return ball_.Get(index);
}
inline ::BallCircle* KRawImage::mutable_ball(int index) {
  return ball_.Mutable(index);
}
inline ::BallCircle* KRawImage::add_ball() {
  return ball_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BallCircle >&
KRawImage::ball() const {
  return ball_;
}
inline ::google::protobuf::RepeatedPtrField< ::BallCircle >*
KRawImage::mutable_ball() {
  return &ball_;
}

// -------------------------------------------------------------------

// KRawImageHeader

// required int32 bytes = 1 [default = -1];
inline bool KRawImageHeader::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KRawImageHeader::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KRawImageHeader::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KRawImageHeader::clear_bytes() {
  bytes_ = -1;
  clear_has_bytes();
}
inline ::google::protobuf::int32 KRawImageHeader::bytes() const {
  return bytes_;
}
inline void KRawImageHeader::set_bytes(::google::protobuf::int32 value) {
  set_has_bytes();
  bytes_ = value;
}

// required int32 width = 2 [default = 0];
inline bool KRawImageHeader::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KRawImageHeader::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KRawImageHeader::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KRawImageHeader::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 KRawImageHeader::width() const {
  return width_;
}
inline void KRawImageHeader::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 3 [default = 0];
inline bool KRawImageHeader::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KRawImageHeader::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KRawImageHeader::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KRawImageHeader::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 KRawImageHeader::height() const {
  return height_;
}
inline void KRawImageHeader::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required int32 type = 4 [default = 4];
inline bool KRawImageHeader::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KRawImageHeader::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KRawImageHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KRawImageHeader::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::google::protobuf::int32 KRawImageHeader::type() const {
  return type_;
}
inline void KRawImageHeader::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Polygon

// repeated .point points = 1;
inline int Polygon::points_size() const {
  return points_.size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline const ::point& Polygon::points(int index) const {
  return points_.Get(index);
}
inline ::point* Polygon::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::point* Polygon::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::point >&
Polygon::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::point >*
Polygon::mutable_points() {
  return &points_;
}

// required int32 color = 2 [default = -1];
inline bool Polygon::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Polygon::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Polygon::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Polygon::clear_color() {
  color_ = -1;
  clear_has_color();
}
inline ::google::protobuf::int32 Polygon::color() const {
  return color_;
}
inline void Polygon::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// required float confidence = 3 [default = -1];
inline bool Polygon::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Polygon::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Polygon::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Polygon::clear_confidence() {
  confidence_ = -1;
  clear_has_confidence();
}
inline float Polygon::confidence() const {
  return confidence_;
}
inline void Polygon::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
}

// -------------------------------------------------------------------

// BallCircle

// required .point center = 1;
inline bool BallCircle::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallCircle::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallCircle::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallCircle::clear_center() {
  if (center_ != NULL) center_->::point::Clear();
  clear_has_center();
}
inline const ::point& BallCircle::center() const {
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::point* BallCircle::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::point;
  return center_;
}
inline ::point* BallCircle::release_center() {
  clear_has_center();
  ::point* temp = center_;
  center_ = NULL;
  return temp;
}

// required int32 radius = 2 [default = -1];
inline bool BallCircle::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallCircle::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallCircle::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallCircle::clear_radius() {
  radius_ = -1;
  clear_has_radius();
}
inline ::google::protobuf::int32 BallCircle::radius() const {
  return radius_;
}
inline void BallCircle::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
}

// required int32 confidence = 3 [default = -1];
inline bool BallCircle::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallCircle::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallCircle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallCircle::clear_confidence() {
  confidence_ = -1;
  clear_has_confidence();
}
inline ::google::protobuf::int32 BallCircle::confidence() const {
  return confidence_;
}
inline void BallCircle::set_confidence(::google::protobuf::int32 value) {
  set_has_confidence();
  confidence_ = value;
}

// required bool valid = 4 [default = false];
inline bool BallCircle::has_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BallCircle::set_has_valid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BallCircle::clear_has_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BallCircle::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool BallCircle::valid() const {
  return valid_;
}
inline void BallCircle::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
}

// optional int32 color = 5 [default = -1];
inline bool BallCircle::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BallCircle::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BallCircle::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BallCircle::clear_color() {
  color_ = -1;
  clear_has_color();
}
inline ::google::protobuf::int32 BallCircle::color() const {
  return color_;
}
inline void BallCircle::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// point

// required int32 x = 1 [default = -1];
inline bool point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void point::clear_x() {
  x_ = -1;
  clear_has_x();
}
inline ::google::protobuf::int32 point::x() const {
  return x_;
}
inline void point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2 [default = -1];
inline bool point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void point::clear_y() {
  y_ = -1;
  clear_has_y();
}
inline ::google::protobuf::int32 point::y() const {
  return y_;
}
inline void point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Kimage_2eproto__INCLUDED
