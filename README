If you are reading these lines, it means that you have successfully created 
a clone of the Kouretes 2013 code from the Monas repository. 

REQUIRED PACKAGES:

libtinyxml-dev (only for BUILD)
OpenCV+QT4 (only for TOOLS) [See https://help.ubuntu.com/community/OpenCV]


BUILD (for local execution):

- Create a folder named local under Monas/make

- Enter folder local

- Execute: cmake ../..

- Execute: ccmake .

- Change TargetPlatform to linux

- Change TargetRobot to host

- Press c to configure

- Press c to configure again.

- Execute: cmake ../..

- Execute: make -jk install, where k is the number of cores in your system. 

- Enter binaries/linux

- Execute: export LD_LIBRARY_PATH=./lib 

- Execute: ./bin/Monas to start Monas

--- Be carefull, remove from the agent.xml all the activities that don't compile when the target is linux (e.g. Vision, MotionController, etc)

CROSSBUILD (for on-board execution):

- Create a folder named crossbuild under Monas/make

- Enter folder crossbuild

- Execute: cmake -D CMAKE_TOOLCHAIN_FILE=<path-to-naoqi-ctc>/toolchain-geode.cmake ../..

- Execute: ccmake .

- Change TargetPlatform to linux

- Change TargetRobot to nao

- Press c to configure

- Check the values of NaoQiVersion, RobotPlatform 

  NaoQiVersion must be the latest NaoQi version, currently 1.12.5 
  RobotPlatform must be nao
  TargetPlatform must be linux

- Real-time execution for the nao requires the code to be compiled as a shared object at the moment.

- Press c to configure again, then g to generate and exit. 

- Execute: make -jk install, where k is the number of cores in your system. 

- Get another coffee and be even more patient ... 


COMPILE PROTO MESSAGE:

- Configure /external/protobuf (./configure)
- make
- /src/messages (./../../external/protobuf/src/protoc --cpp_out=. proto_name.proto)


Use the python scripts in the script directory to upload the code to a robot.
To do so, you need a valid config directory in /home/nao/naoqi/ (on the robot)
and a valid autoload.ini in /home/nao/naoqi/preferences/autoload.ini (again, on the robot)
to start the krobot module.

FLASH DISK FORMAT:

- open flasher (sudo)

- select image geode

- check factory reset settings

- connect to nao locally (username: nao pass: nao) via browser

- change name, volume and check deactivation

- restart robot

- use initializeScript.py from script folder path

- create directory crossbuild on make file

- use cmake-gui to make the project

- use upload.py located on the script folder, from the crossbuild folder to upload code

- check ssh connect

