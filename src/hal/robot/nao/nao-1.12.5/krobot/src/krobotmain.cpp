/**
 * \mainpage
 * \section Author
 * @author Cbm
 *
 * \section Copyright
 * Version : $Id$
 *
 * \section Description
 *
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#include <signal.h>
#include <boost/shared_ptr.hpp>
#include <alcommon/albroker.h>
#include <alcommon/almodule.h>
#include <alcommon/albrokermanager.h>
#include <alcommon/altoolsmain.h>

#include "mainmodule.h"



#ifndef KROBOT_IS_REMOTE

#ifdef _WIN32
#define ALCALL __declspec(dllexport)
#else
#define ALCALL
#endif
#else
#  define ALCALL
#endif

#ifdef __cplusplus
extern "C"
{
#endif


	ALCALL int _createModule( boost::shared_ptr<AL::ALBroker> pBroker )
	{
		// init broker with the main broker inctance
		// from the parent executable
		AL::ALBrokerManager::setInstance(pBroker->fBrokerManager.lock());
		AL::ALBrokerManager::getInstance()->addBroker(pBroker);
		AL::ALModule::createModule<mainModule>( pBroker, "mainModule" );
		return 0;
	}

	ALCALL int _closeModule(  )
	{
		return 0;
	}

# ifdef __cplusplus
}
# endif

#ifdef KROBOT_IS_REMOTE

int main( int argc, char *argv[] )
{
	// pointer to createModule
	TMainType sig;
	sig = &_createModule;
	// call main
	ALTools::mainFunction("Krobot", argc, argv, sig);
}
#endif

