// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Kimage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KRawImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KRawImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KRawImageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KRawImageHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Kimage_2eproto() {
  protobuf_AddDesc_Kimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Kimage.proto");
  GOOGLE_CHECK(file != NULL);
  KRawImage_descriptor_ = file->message_type(0);
  static const int KRawImage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, imagerawdata_),
  };
  KRawImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KRawImage_descriptor_,
      KRawImage::default_instance_,
      KRawImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KRawImage));
  KRawImageHeader_descriptor_ = file->message_type(1);
  static const int KRawImageHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, type_),
  };
  KRawImageHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KRawImageHeader_descriptor_,
      KRawImageHeader::default_instance_,
      KRawImageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KRawImageHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Kimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KRawImage_descriptor_, &KRawImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KRawImageHeader_descriptor_, &KRawImageHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Kimage_2eproto() {
  delete KRawImage::default_instance_;
  delete KRawImage_reflection_;
  delete KRawImageHeader::default_instance_;
  delete KRawImageHeader_reflection_;
}

void protobuf_AddDesc_Kimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Kimage.proto\"j\n\tKRawImage\022\021\n\005bytes\030\001 \002"
    "(\005:\002-1\022\020\n\005width\030\002 \002(\005:\0010\022\021\n\006height\030\003 \002(\005"
    ":\0010\022\017\n\004type\030\004 \002(\005:\0014\022\024\n\014ImageRawData\030\005 \002"
    "(\014\"Z\n\017KRawImageHeader\022\021\n\005bytes\030\001 \002(\005:\002-1"
    "\022\020\n\005width\030\002 \002(\005:\0010\022\021\n\006height\030\003 \002(\005:\0010\022\017\n"
    "\004type\030\004 \002(\005:\0014", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Kimage.proto", &protobuf_RegisterTypes);
  KRawImage::default_instance_ = new KRawImage();
  KRawImageHeader::default_instance_ = new KRawImageHeader();
  KRawImage::default_instance_->InitAsDefaultInstance();
  KRawImageHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Kimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Kimage_2eproto {
  StaticDescriptorInitializer_Kimage_2eproto() {
    protobuf_AddDesc_Kimage_2eproto();
  }
} static_descriptor_initializer_Kimage_2eproto_;


// ===================================================================

const ::std::string KRawImage::_default_imagerawdata_;
#ifndef _MSC_VER
const int KRawImage::kBytesFieldNumber;
const int KRawImage::kWidthFieldNumber;
const int KRawImage::kHeightFieldNumber;
const int KRawImage::kTypeFieldNumber;
const int KRawImage::kImageRawDataFieldNumber;
#endif  // !_MSC_VER

KRawImage::KRawImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KRawImage::InitAsDefaultInstance() {
}

KRawImage::KRawImage(const KRawImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KRawImage::SharedCtor() {
  _cached_size_ = 0;
  bytes_ = -1;
  width_ = 0;
  height_ = 0;
  type_ = 4;
  imagerawdata_ = const_cast< ::std::string*>(&_default_imagerawdata_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KRawImage::~KRawImage() {
  SharedDtor();
}

void KRawImage::SharedDtor() {
  if (imagerawdata_ != &_default_imagerawdata_) {
    delete imagerawdata_;
  }
  if (this != default_instance_) {
  }
}

void KRawImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KRawImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KRawImage_descriptor_;
}

const KRawImage& KRawImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

KRawImage* KRawImage::default_instance_ = NULL;

KRawImage* KRawImage::New() const {
  return new KRawImage;
}

void KRawImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytes_ = -1;
    width_ = 0;
    height_ = 0;
    type_ = 4;
    if (_has_bit(4)) {
      if (imagerawdata_ != &_default_imagerawdata_) {
        imagerawdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KRawImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bytes = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required int32 width = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required int32 type = 4 [default = 4];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ImageRawData;
        break;
      }
      
      // required bytes ImageRawData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ImageRawData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagerawdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KRawImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bytes = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytes(), output);
  }
  
  // required int32 width = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // required int32 height = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // required int32 type = 4 [default = 4];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  // required bytes ImageRawData = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->imagerawdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KRawImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bytes = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bytes(), target);
  }
  
  // required int32 width = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // required int32 height = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // required int32 type = 4 [default = 4];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  // required bytes ImageRawData = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->imagerawdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KRawImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bytes = 1 [default = -1];
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes());
    }
    
    // required int32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required int32 type = 4 [default = 4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required bytes ImageRawData = 5;
    if (has_imagerawdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagerawdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KRawImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KRawImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KRawImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KRawImage::MergeFrom(const KRawImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bytes(from.bytes());
    }
    if (from._has_bit(1)) {
      set_width(from.width());
    }
    if (from._has_bit(2)) {
      set_height(from.height());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_imagerawdata(from.imagerawdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KRawImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KRawImage::CopyFrom(const KRawImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KRawImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void KRawImage::Swap(KRawImage* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    std::swap(imagerawdata_, other->imagerawdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KRawImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KRawImage_descriptor_;
  metadata.reflection = KRawImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KRawImageHeader::kBytesFieldNumber;
const int KRawImageHeader::kWidthFieldNumber;
const int KRawImageHeader::kHeightFieldNumber;
const int KRawImageHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

KRawImageHeader::KRawImageHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KRawImageHeader::InitAsDefaultInstance() {
}

KRawImageHeader::KRawImageHeader(const KRawImageHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KRawImageHeader::SharedCtor() {
  _cached_size_ = 0;
  bytes_ = -1;
  width_ = 0;
  height_ = 0;
  type_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KRawImageHeader::~KRawImageHeader() {
  SharedDtor();
}

void KRawImageHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KRawImageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KRawImageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KRawImageHeader_descriptor_;
}

const KRawImageHeader& KRawImageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

KRawImageHeader* KRawImageHeader::default_instance_ = NULL;

KRawImageHeader* KRawImageHeader::New() const {
  return new KRawImageHeader;
}

void KRawImageHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytes_ = -1;
    width_ = 0;
    height_ = 0;
    type_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KRawImageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bytes = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required int32 width = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required int32 type = 4 [default = 4];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KRawImageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bytes = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytes(), output);
  }
  
  // required int32 width = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // required int32 height = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // required int32 type = 4 [default = 4];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KRawImageHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bytes = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bytes(), target);
  }
  
  // required int32 width = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // required int32 height = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // required int32 type = 4 [default = 4];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KRawImageHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bytes = 1 [default = -1];
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes());
    }
    
    // required int32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required int32 type = 4 [default = 4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KRawImageHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KRawImageHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KRawImageHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KRawImageHeader::MergeFrom(const KRawImageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bytes(from.bytes());
    }
    if (from._has_bit(1)) {
      set_width(from.width());
    }
    if (from._has_bit(2)) {
      set_height(from.height());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KRawImageHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KRawImageHeader::CopyFrom(const KRawImageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KRawImageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void KRawImageHeader::Swap(KRawImageHeader* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KRawImageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KRawImageHeader_descriptor_;
  metadata.reflection = KRawImageHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
