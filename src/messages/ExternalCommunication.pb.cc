// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExternalCommunication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ConfigUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandShake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandShake_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalCommand_SIMPLE_ACTIONS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalCommand_GAMECONTROLLER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalCommand_LOCALIZATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalCommand_MOTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalCommand_HEAD_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraCalibration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraCalibration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExternalCommunication_2eproto() {
  protobuf_AddDesc_ExternalCommunication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExternalCommunication.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigUpdate_descriptor_ = file->message_type(0);
  static const int ConfigUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdate, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdate, value_),
  };
  ConfigUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigUpdate_descriptor_,
      ConfigUpdate::default_instance_,
      ConfigUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigUpdate));
  HandShake_descriptor_ = file->message_type(1);
  static const int HandShake_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, checksum_),
  };
  HandShake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandShake_descriptor_,
      HandShake::default_instance_,
      HandShake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandShake));
  FileTransfer_descriptor_ = file->message_type(2);
  static const int FileTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, filepath_),
  };
  FileTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileTransfer_descriptor_,
      FileTransfer::default_instance_,
      FileTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileTransfer));
  ExternalConfig_descriptor_ = file->message_type(3);
  static const int ExternalConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, targethost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, updateconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, resetactivities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, handoffrequest_),
  };
  ExternalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalConfig_descriptor_,
      ExternalConfig::default_instance_,
      ExternalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalConfig));
  ExternalCommand_descriptor_ = file->message_type(4);
  static const int ExternalCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, targethost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, commandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, floatvars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, stringvars_),
  };
  ExternalCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalCommand_descriptor_,
      ExternalCommand::default_instance_,
      ExternalCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalCommand));
  ExternalCommand_SIMPLE_ACTIONS_descriptor_ = ExternalCommand_descriptor_->enum_type(0);
  ExternalCommand_GAMECONTROLLER_descriptor_ = ExternalCommand_descriptor_->enum_type(1);
  ExternalCommand_LOCALIZATION_descriptor_ = ExternalCommand_descriptor_->enum_type(2);
  ExternalCommand_MOTION_descriptor_ = ExternalCommand_descriptor_->enum_type(3);
  ExternalCommand_HEAD_descriptor_ = ExternalCommand_descriptor_->enum_type(4);
  CameraCalibration_descriptor_ = file->message_type(5);
  static const int CameraCalibration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, targethost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, redbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, bluebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, greengain_),
  };
  CameraCalibration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraCalibration_descriptor_,
      CameraCalibration::default_instance_,
      CameraCalibration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraCalibration));
  GenericACK_descriptor_ = file->message_type(6);
  static const int GenericACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, hostid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, handshaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, ownlock_),
  };
  GenericACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericACK_descriptor_,
      GenericACK::default_instance_,
      GenericACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExternalCommunication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigUpdate_descriptor_, &ConfigUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandShake_descriptor_, &HandShake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileTransfer_descriptor_, &FileTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalConfig_descriptor_, &ExternalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalCommand_descriptor_, &ExternalCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraCalibration_descriptor_, &CameraCalibration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericACK_descriptor_, &GenericACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExternalCommunication_2eproto() {
  delete ConfigUpdate::default_instance_;
  delete ConfigUpdate_reflection_;
  delete HandShake::default_instance_;
  delete HandShake_reflection_;
  delete FileTransfer::default_instance_;
  delete FileTransfer_reflection_;
  delete ExternalConfig::default_instance_;
  delete ExternalConfig_reflection_;
  delete ExternalCommand::default_instance_;
  delete ExternalCommand_reflection_;
  delete CameraCalibration::default_instance_;
  delete CameraCalibration_reflection_;
  delete GenericACK::default_instance_;
  delete GenericACK_reflection_;
}

void protobuf_AddDesc_ExternalCommunication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ExternalCommunication.proto\".\n\014ConfigU"
    "pdate\022\017\n\007keyword\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"=\n"
    "\tHandShake\022\016\n\006headId\030\001 \002(\t\022\016\n\006bodyId\030\002 \002"
    "(\t\022\020\n\010checksum\030\003 \002(\r\".\n\014FileTransfer\022\014\n\004"
    "file\030\001 \002(\014\022\020\n\010filepath\030\002 \002(\t\"\252\001\n\016Externa"
    "lConfig\022\021\n\tmessageid\030\001 \002(\t\022\022\n\ntargethost"
    "\030\002 \002(\r\022#\n\014updateConfig\030\003 \003(\0132\r.ConfigUpd"
    "ate\022\027\n\017resetActivities\030\004 \003(\t\022\033\n\004file\030\005 \001"
    "(\0132\r.FileTransfer\022\026\n\016handOffRequest\030\006 \002("
    "\010\"\312\004\n\017ExternalCommand\022\021\n\tmessageid\030\001 \002(\t"
    "\022\022\n\ntargethost\030\002 \002(\r\022\021\n\tcommandID\030\003 \002(\r\022"
    "\021\n\tfloatvars\030\004 \003(\002\022\022\n\nstringvars\030\005 \001(\t\"c"
    "\n\016SIMPLE_ACTIONS\022\014\n\010SHUTDOWN\020\000\022\021\n\rSTIFFN"
    "ESS_OFF\020\001\022\016\n\nSTOP_ROBOT\020\002\022\007\n\003SIT\020\003\022\027\n\023SI"
    "MPLE_ACTIONS_SIZE\020\004\"}\n\016GAMECONTROLLER\022\013\n"
    "\007INITIAL\020\000\022\t\n\005READY\020\001\022\007\n\003SET\020\002\022\010\n\004PLAY\020\003"
    "\022\r\n\tPENALISED\020\004\022\n\n\006FINISH\020\005\022\014\n\010OVERRIDE\020"
    "\006\022\027\n\023GAMECONTROLLER_SIZE\020\007\"9\n\014LOCALIZATI"
    "ON\022\022\n\016INIT_PARTICLES\020\000\022\025\n\021LOCALIZATION_S"
    "IZE\020\001\"@\n\006MOTION\022\022\n\016EXECUTE_ACTION\020\000\022\021\n\rS"
    "ET_STIFFNESS\020\001\022\017\n\013MOTION_SIZE\020\002\"u\n\004HEAD\022"
    "\013\n\007NOTHING\020\000\022\r\n\tLOOK_DOWN\020\001\022\022\n\016SCAN_AND_"
    "TRACK\020\002\022\014\n\010LOCALIZE\020\003\022\020\n\014LOCALIZE_FAR\020\004\022"
    "\016\n\nSMART_SCAN\020\005\022\r\n\tHEAD_SIZE\020\006\"\226\001\n\021Camer"
    "aCalibration\022\021\n\tmessageid\030\001 \002(\t\022\022\n\ntarge"
    "thost\030\002 \002(\r\022\014\n\004gain\030\003 \002(\r\022\020\n\010contrast\030\004 "
    "\002(\r\022\022\n\nredbalance\030\005 \002(\r\022\023\n\013bluebalance\030\006"
    " \002(\r\022\021\n\tgreengain\030\007 \002(\r\"a\n\nGenericACK\022\016\n"
    "\006hostid\030\001 \002(\r\022\021\n\tmessageid\030\002 \002(\t\022\037\n\013hand"
    "shaking\030\003 \001(\0132\n.HandShake\022\017\n\007ownlock\030\004 \002"
    "(\010", 1202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExternalCommunication.proto", &protobuf_RegisterTypes);
  ConfigUpdate::default_instance_ = new ConfigUpdate();
  HandShake::default_instance_ = new HandShake();
  FileTransfer::default_instance_ = new FileTransfer();
  ExternalConfig::default_instance_ = new ExternalConfig();
  ExternalCommand::default_instance_ = new ExternalCommand();
  CameraCalibration::default_instance_ = new CameraCalibration();
  GenericACK::default_instance_ = new GenericACK();
  ConfigUpdate::default_instance_->InitAsDefaultInstance();
  HandShake::default_instance_->InitAsDefaultInstance();
  FileTransfer::default_instance_->InitAsDefaultInstance();
  ExternalConfig::default_instance_->InitAsDefaultInstance();
  ExternalCommand::default_instance_->InitAsDefaultInstance();
  CameraCalibration::default_instance_->InitAsDefaultInstance();
  GenericACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExternalCommunication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExternalCommunication_2eproto {
  StaticDescriptorInitializer_ExternalCommunication_2eproto() {
    protobuf_AddDesc_ExternalCommunication_2eproto();
  }
} static_descriptor_initializer_ExternalCommunication_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ConfigUpdate::kKeywordFieldNumber;
const int ConfigUpdate::kValueFieldNumber;
#endif  // !_MSC_VER

ConfigUpdate::ConfigUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigUpdate::InitAsDefaultInstance() {
}

ConfigUpdate::ConfigUpdate(const ConfigUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigUpdate::SharedCtor() {
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigUpdate::~ConfigUpdate() {
  SharedDtor();
}

void ConfigUpdate::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ConfigUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigUpdate_descriptor_;
}

const ConfigUpdate& ConfigUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

ConfigUpdate* ConfigUpdate::default_instance_ = NULL;

ConfigUpdate* ConfigUpdate::New() const {
  return new ConfigUpdate;
}

void ConfigUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keyword(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigUpdate::MergeFrom(const ConfigUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigUpdate::CopyFrom(const ConfigUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConfigUpdate::Swap(ConfigUpdate* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigUpdate_descriptor_;
  metadata.reflection = ConfigUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandShake::kHeadIdFieldNumber;
const int HandShake::kBodyIdFieldNumber;
const int HandShake::kChecksumFieldNumber;
#endif  // !_MSC_VER

HandShake::HandShake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandShake::InitAsDefaultInstance() {
}

HandShake::HandShake(const HandShake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandShake::SharedCtor() {
  _cached_size_ = 0;
  headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bodyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandShake::~HandShake() {
  SharedDtor();
}

void HandShake::SharedDtor() {
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    delete headid_;
  }
  if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodyid_;
  }
  if (this != default_instance_) {
  }
}

void HandShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandShake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandShake_descriptor_;
}

const HandShake& HandShake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

HandShake* HandShake::default_instance_ = NULL;

HandShake* HandShake::New() const {
  return new HandShake;
}

void HandShake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_headid()) {
      if (headid_ != &::google::protobuf::internal::kEmptyString) {
        headid_->clear();
      }
    }
    if (has_bodyid()) {
      if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
        bodyid_->clear();
      }
    }
    checksum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string headId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headid().data(), this->headid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bodyId;
        break;
      }
      
      // required string bodyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bodyid().data(), this->bodyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checksum;
        break;
      }
      
      // required uint32 checksum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string headId = 1;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->headid(), output);
  }
  
  // required string bodyId = 2;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bodyid(), output);
  }
  
  // required uint32 checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checksum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandShake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string headId = 1;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headid(), target);
  }
  
  // required string bodyId = 2;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bodyid(), target);
  }
  
  // required uint32 checksum = 3;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checksum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandShake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string headId = 1;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headid());
    }
    
    // required string bodyId = 2;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyid());
    }
    
    // required uint32 checksum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandShake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandShake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandShake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandShake::MergeFrom(const HandShake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandShake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandShake::CopyFrom(const HandShake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void HandShake::Swap(HandShake* other) {
  if (other != this) {
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandShake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandShake_descriptor_;
  metadata.reflection = HandShake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTransfer::kFileFieldNumber;
const int FileTransfer::kFilepathFieldNumber;
#endif  // !_MSC_VER

FileTransfer::FileTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileTransfer::InitAsDefaultInstance() {
}

FileTransfer::FileTransfer(const FileTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileTransfer::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileTransfer::~FileTransfer() {
  SharedDtor();
}

void FileTransfer::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void FileTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTransfer_descriptor_;
}

const FileTransfer& FileTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

FileTransfer* FileTransfer::default_instance_ = NULL;

FileTransfer* FileTransfer::New() const {
  return new FileTransfer;
}

void FileTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }
      
      // required string filepath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->file(), output);
  }
  
  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filepath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes file = 1;
  if (has_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }
  
  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file());
    }
    
    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTransfer::MergeFrom(const FileTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransfer::CopyFrom(const FileTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FileTransfer::Swap(FileTransfer* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTransfer_descriptor_;
  metadata.reflection = FileTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExternalConfig::kMessageidFieldNumber;
const int ExternalConfig::kTargethostFieldNumber;
const int ExternalConfig::kUpdateConfigFieldNumber;
const int ExternalConfig::kResetActivitiesFieldNumber;
const int ExternalConfig::kFileFieldNumber;
const int ExternalConfig::kHandOffRequestFieldNumber;
#endif  // !_MSC_VER

ExternalConfig::ExternalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalConfig::InitAsDefaultInstance() {
  file_ = const_cast< ::FileTransfer*>(&::FileTransfer::default_instance());
}

ExternalConfig::ExternalConfig(const ExternalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalConfig::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targethost_ = 0u;
  file_ = NULL;
  handoffrequest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalConfig::~ExternalConfig() {
  SharedDtor();
}

void ExternalConfig::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete file_;
  }
}

void ExternalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalConfig_descriptor_;
}

const ExternalConfig& ExternalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

ExternalConfig* ExternalConfig::default_instance_ = NULL;

ExternalConfig* ExternalConfig::New() const {
  return new ExternalConfig;
}

void ExternalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    targethost_ = 0u;
    if (has_file()) {
      if (file_ != NULL) file_->::FileTransfer::Clear();
    }
    handoffrequest_ = false;
  }
  updateconfig_.Clear();
  resetactivities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targethost;
        break;
      }
      
      // required uint32 targethost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targethost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targethost_)));
          set_has_targethost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updateConfig;
        break;
      }
      
      // repeated .ConfigUpdate updateConfig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updateConfig;
        if (input->ExpectTag(34)) goto parse_resetActivities;
        break;
      }
      
      // repeated string resetActivities = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resetActivities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resetactivities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resetactivities(0).data(), this->resetactivities(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resetActivities;
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }
      
      // optional .FileTransfer file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handOffRequest;
        break;
      }
      
      // required bool handOffRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handOffRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handoffrequest_)));
          set_has_handoffrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messageid(), output);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targethost(), output);
  }
  
  // repeated .ConfigUpdate updateConfig = 3;
  for (int i = 0; i < this->updateconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updateconfig(i), output);
  }
  
  // repeated string resetActivities = 4;
  for (int i = 0; i < this->resetactivities_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->resetactivities(i).data(), this->resetactivities(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resetactivities(i), output);
  }
  
  // optional .FileTransfer file = 5;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file(), output);
  }
  
  // required bool handOffRequest = 6;
  if (has_handoffrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->handoffrequest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targethost(), target);
  }
  
  // repeated .ConfigUpdate updateConfig = 3;
  for (int i = 0; i < this->updateconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updateconfig(i), target);
  }
  
  // repeated string resetActivities = 4;
  for (int i = 0; i < this->resetactivities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resetactivities(i).data(), this->resetactivities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->resetactivities(i), target);
  }
  
  // optional .FileTransfer file = 5;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file(), target);
  }
  
  // required bool handOffRequest = 6;
  if (has_handoffrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->handoffrequest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string messageid = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required uint32 targethost = 2;
    if (has_targethost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targethost());
    }
    
    // optional .FileTransfer file = 5;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // required bool handOffRequest = 6;
    if (has_handoffrequest()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ConfigUpdate updateConfig = 3;
  total_size += 1 * this->updateconfig_size();
  for (int i = 0; i < this->updateconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateconfig(i));
  }
  
  // repeated string resetActivities = 4;
  total_size += 1 * this->resetactivities_size();
  for (int i = 0; i < this->resetactivities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resetactivities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalConfig::MergeFrom(const ExternalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  updateconfig_.MergeFrom(from.updateconfig_);
  resetactivities_.MergeFrom(from.resetactivities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_targethost()) {
      set_targethost(from.targethost());
    }
    if (from.has_file()) {
      mutable_file()->::FileTransfer::MergeFrom(from.file());
    }
    if (from.has_handoffrequest()) {
      set_handoffrequest(from.handoffrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalConfig::CopyFrom(const ExternalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  for (int i = 0; i < updateconfig_size(); i++) {
    if (!this->updateconfig(i).IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void ExternalConfig::Swap(ExternalConfig* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(targethost_, other->targethost_);
    updateconfig_.Swap(&other->updateconfig_);
    resetactivities_.Swap(&other->resetactivities_);
    std::swap(file_, other->file_);
    std::swap(handoffrequest_, other->handoffrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalConfig_descriptor_;
  metadata.reflection = ExternalConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExternalCommand_SIMPLE_ACTIONS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_SIMPLE_ACTIONS_descriptor_;
}
bool ExternalCommand_SIMPLE_ACTIONS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::SHUTDOWN;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::STIFFNESS_OFF;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::STOP_ROBOT;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::SIT;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::SIMPLE_ACTIONS_SIZE;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::SIMPLE_ACTIONS_MIN;
const ExternalCommand_SIMPLE_ACTIONS ExternalCommand::SIMPLE_ACTIONS_MAX;
const int ExternalCommand::SIMPLE_ACTIONS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExternalCommand_GAMECONTROLLER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_GAMECONTROLLER_descriptor_;
}
bool ExternalCommand_GAMECONTROLLER_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalCommand_GAMECONTROLLER ExternalCommand::INITIAL;
const ExternalCommand_GAMECONTROLLER ExternalCommand::READY;
const ExternalCommand_GAMECONTROLLER ExternalCommand::SET;
const ExternalCommand_GAMECONTROLLER ExternalCommand::PLAY;
const ExternalCommand_GAMECONTROLLER ExternalCommand::PENALISED;
const ExternalCommand_GAMECONTROLLER ExternalCommand::FINISH;
const ExternalCommand_GAMECONTROLLER ExternalCommand::OVERRIDE;
const ExternalCommand_GAMECONTROLLER ExternalCommand::GAMECONTROLLER_SIZE;
const ExternalCommand_GAMECONTROLLER ExternalCommand::GAMECONTROLLER_MIN;
const ExternalCommand_GAMECONTROLLER ExternalCommand::GAMECONTROLLER_MAX;
const int ExternalCommand::GAMECONTROLLER_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExternalCommand_LOCALIZATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_LOCALIZATION_descriptor_;
}
bool ExternalCommand_LOCALIZATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalCommand_LOCALIZATION ExternalCommand::INIT_PARTICLES;
const ExternalCommand_LOCALIZATION ExternalCommand::LOCALIZATION_SIZE;
const ExternalCommand_LOCALIZATION ExternalCommand::LOCALIZATION_MIN;
const ExternalCommand_LOCALIZATION ExternalCommand::LOCALIZATION_MAX;
const int ExternalCommand::LOCALIZATION_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExternalCommand_MOTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_MOTION_descriptor_;
}
bool ExternalCommand_MOTION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalCommand_MOTION ExternalCommand::EXECUTE_ACTION;
const ExternalCommand_MOTION ExternalCommand::SET_STIFFNESS;
const ExternalCommand_MOTION ExternalCommand::MOTION_SIZE;
const ExternalCommand_MOTION ExternalCommand::MOTION_MIN;
const ExternalCommand_MOTION ExternalCommand::MOTION_MAX;
const int ExternalCommand::MOTION_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExternalCommand_HEAD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_HEAD_descriptor_;
}
bool ExternalCommand_HEAD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalCommand_HEAD ExternalCommand::NOTHING;
const ExternalCommand_HEAD ExternalCommand::LOOK_DOWN;
const ExternalCommand_HEAD ExternalCommand::SCAN_AND_TRACK;
const ExternalCommand_HEAD ExternalCommand::LOCALIZE;
const ExternalCommand_HEAD ExternalCommand::LOCALIZE_FAR;
const ExternalCommand_HEAD ExternalCommand::SMART_SCAN;
const ExternalCommand_HEAD ExternalCommand::HEAD_SIZE;
const ExternalCommand_HEAD ExternalCommand::HEAD_MIN;
const ExternalCommand_HEAD ExternalCommand::HEAD_MAX;
const int ExternalCommand::HEAD_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExternalCommand::kMessageidFieldNumber;
const int ExternalCommand::kTargethostFieldNumber;
const int ExternalCommand::kCommandIDFieldNumber;
const int ExternalCommand::kFloatvarsFieldNumber;
const int ExternalCommand::kStringvarsFieldNumber;
#endif  // !_MSC_VER

ExternalCommand::ExternalCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalCommand::InitAsDefaultInstance() {
}

ExternalCommand::ExternalCommand(const ExternalCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalCommand::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targethost_ = 0u;
  commandid_ = 0u;
  stringvars_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalCommand::~ExternalCommand() {
  SharedDtor();
}

void ExternalCommand::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (stringvars_ != &::google::protobuf::internal::kEmptyString) {
    delete stringvars_;
  }
  if (this != default_instance_) {
  }
}

void ExternalCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalCommand_descriptor_;
}

const ExternalCommand& ExternalCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

ExternalCommand* ExternalCommand::default_instance_ = NULL;

ExternalCommand* ExternalCommand::New() const {
  return new ExternalCommand;
}

void ExternalCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    targethost_ = 0u;
    commandid_ = 0u;
    if (has_stringvars()) {
      if (stringvars_ != &::google::protobuf::internal::kEmptyString) {
        stringvars_->clear();
      }
    }
  }
  floatvars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targethost;
        break;
      }
      
      // required uint32 targethost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targethost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targethost_)));
          set_has_targethost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandID;
        break;
      }
      
      // required uint32 commandID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandid_)));
          set_has_commandid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_floatvars;
        break;
      }
      
      // repeated float floatvars = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floatvars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_floatvars())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floatvars())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_floatvars;
        if (input->ExpectTag(42)) goto parse_stringvars;
        break;
      }
      
      // optional string stringvars = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringvars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvars()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringvars().data(), this->stringvars().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messageid(), output);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targethost(), output);
  }
  
  // required uint32 commandID = 3;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commandid(), output);
  }
  
  // repeated float floatvars = 4;
  for (int i = 0; i < this->floatvars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->floatvars(i), output);
  }
  
  // optional string stringvars = 5;
  if (has_stringvars()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvars().data(), this->stringvars().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stringvars(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targethost(), target);
  }
  
  // required uint32 commandID = 3;
  if (has_commandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commandid(), target);
  }
  
  // repeated float floatvars = 4;
  for (int i = 0; i < this->floatvars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->floatvars(i), target);
  }
  
  // optional string stringvars = 5;
  if (has_stringvars()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvars().data(), this->stringvars().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stringvars(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string messageid = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required uint32 targethost = 2;
    if (has_targethost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targethost());
    }
    
    // required uint32 commandID = 3;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commandid());
    }
    
    // optional string stringvars = 5;
    if (has_stringvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvars());
    }
    
  }
  // repeated float floatvars = 4;
  {
    int data_size = 0;
    data_size = 4 * this->floatvars_size();
    total_size += 1 * this->floatvars_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalCommand::MergeFrom(const ExternalCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  floatvars_.MergeFrom(from.floatvars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_targethost()) {
      set_targethost(from.targethost());
    }
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
    if (from.has_stringvars()) {
      set_stringvars(from.stringvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalCommand::CopyFrom(const ExternalCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ExternalCommand::Swap(ExternalCommand* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(targethost_, other->targethost_);
    std::swap(commandid_, other->commandid_);
    floatvars_.Swap(&other->floatvars_);
    std::swap(stringvars_, other->stringvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalCommand_descriptor_;
  metadata.reflection = ExternalCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraCalibration::kMessageidFieldNumber;
const int CameraCalibration::kTargethostFieldNumber;
const int CameraCalibration::kGainFieldNumber;
const int CameraCalibration::kContrastFieldNumber;
const int CameraCalibration::kRedbalanceFieldNumber;
const int CameraCalibration::kBluebalanceFieldNumber;
const int CameraCalibration::kGreengainFieldNumber;
#endif  // !_MSC_VER

CameraCalibration::CameraCalibration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraCalibration::InitAsDefaultInstance() {
}

CameraCalibration::CameraCalibration(const CameraCalibration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targethost_ = 0u;
  gain_ = 0u;
  contrast_ = 0u;
  redbalance_ = 0u;
  bluebalance_ = 0u;
  greengain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraCalibration::~CameraCalibration() {
  SharedDtor();
}

void CameraCalibration::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
  }
}

void CameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraCalibration_descriptor_;
}

const CameraCalibration& CameraCalibration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

CameraCalibration* CameraCalibration::default_instance_ = NULL;

CameraCalibration* CameraCalibration::New() const {
  return new CameraCalibration;
}

void CameraCalibration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    targethost_ = 0u;
    gain_ = 0u;
    contrast_ = 0u;
    redbalance_ = 0u;
    bluebalance_ = 0u;
    greengain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targethost;
        break;
      }
      
      // required uint32 targethost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targethost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targethost_)));
          set_has_targethost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gain;
        break;
      }
      
      // required uint32 gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contrast;
        break;
      }
      
      // required uint32 contrast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_redbalance;
        break;
      }
      
      // required uint32 redbalance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redbalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redbalance_)));
          set_has_redbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bluebalance;
        break;
      }
      
      // required uint32 bluebalance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bluebalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bluebalance_)));
          set_has_bluebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_greengain;
        break;
      }
      
      // required uint32 greengain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_greengain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &greengain_)));
          set_has_greengain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messageid(), output);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targethost(), output);
  }
  
  // required uint32 gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gain(), output);
  }
  
  // required uint32 contrast = 4;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contrast(), output);
  }
  
  // required uint32 redbalance = 5;
  if (has_redbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redbalance(), output);
  }
  
  // required uint32 bluebalance = 6;
  if (has_bluebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bluebalance(), output);
  }
  
  // required uint32 greengain = 7;
  if (has_greengain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->greengain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraCalibration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targethost(), target);
  }
  
  // required uint32 gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gain(), target);
  }
  
  // required uint32 contrast = 4;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contrast(), target);
  }
  
  // required uint32 redbalance = 5;
  if (has_redbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redbalance(), target);
  }
  
  // required uint32 bluebalance = 6;
  if (has_bluebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bluebalance(), target);
  }
  
  // required uint32 greengain = 7;
  if (has_greengain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->greengain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraCalibration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string messageid = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required uint32 targethost = 2;
    if (has_targethost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targethost());
    }
    
    // required uint32 gain = 3;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain());
    }
    
    // required uint32 contrast = 4;
    if (has_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrast());
    }
    
    // required uint32 redbalance = 5;
    if (has_redbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redbalance());
    }
    
    // required uint32 bluebalance = 6;
    if (has_bluebalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluebalance());
    }
    
    // required uint32 greengain = 7;
    if (has_greengain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->greengain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraCalibration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraCalibration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraCalibration::MergeFrom(const CameraCalibration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_targethost()) {
      set_targethost(from.targethost());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_redbalance()) {
      set_redbalance(from.redbalance());
    }
    if (from.has_bluebalance()) {
      set_bluebalance(from.bluebalance());
    }
    if (from.has_greengain()) {
      set_greengain(from.greengain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void CameraCalibration::Swap(CameraCalibration* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(targethost_, other->targethost_);
    std::swap(gain_, other->gain_);
    std::swap(contrast_, other->contrast_);
    std::swap(redbalance_, other->redbalance_);
    std::swap(bluebalance_, other->bluebalance_);
    std::swap(greengain_, other->greengain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraCalibration_descriptor_;
  metadata.reflection = CameraCalibration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericACK::kHostidFieldNumber;
const int GenericACK::kMessageidFieldNumber;
const int GenericACK::kHandshakingFieldNumber;
const int GenericACK::kOwnlockFieldNumber;
#endif  // !_MSC_VER

GenericACK::GenericACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericACK::InitAsDefaultInstance() {
  handshaking_ = const_cast< ::HandShake*>(&::HandShake::default_instance());
}

GenericACK::GenericACK(const GenericACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericACK::SharedCtor() {
  _cached_size_ = 0;
  hostid_ = 0u;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handshaking_ = NULL;
  ownlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericACK::~GenericACK() {
  SharedDtor();
}

void GenericACK::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete handshaking_;
  }
}

void GenericACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericACK_descriptor_;
}

const GenericACK& GenericACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternalCommunication_2eproto();  return *default_instance_;
}

GenericACK* GenericACK::default_instance_ = NULL;

GenericACK* GenericACK::New() const {
  return new GenericACK;
}

void GenericACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hostid_ = 0u;
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    if (has_handshaking()) {
      if (handshaking_ != NULL) handshaking_->::HandShake::Clear();
    }
    ownlock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hostid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostid_)));
          set_has_hostid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageid;
        break;
      }
      
      // required string messageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_handshaking;
        break;
      }
      
      // optional .HandShake handshaking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshaking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshaking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ownlock;
        break;
      }
      
      // required bool ownlock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ownlock_)));
          set_has_ownlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hostid = 1;
  if (has_hostid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hostid(), output);
  }
  
  // required string messageid = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }
  
  // optional .HandShake handshaking = 3;
  if (has_handshaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->handshaking(), output);
  }
  
  // required bool ownlock = 4;
  if (has_ownlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ownlock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hostid = 1;
  if (has_hostid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hostid(), target);
  }
  
  // required string messageid = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }
  
  // optional .HandShake handshaking = 3;
  if (has_handshaking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->handshaking(), target);
  }
  
  // required bool ownlock = 4;
  if (has_ownlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ownlock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hostid = 1;
    if (has_hostid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hostid());
    }
    
    // required string messageid = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // optional .HandShake handshaking = 3;
    if (has_handshaking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshaking());
    }
    
    // required bool ownlock = 4;
    if (has_ownlock()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericACK::MergeFrom(const GenericACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostid()) {
      set_hostid(from.hostid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_handshaking()) {
      mutable_handshaking()->::HandShake::MergeFrom(from.handshaking());
    }
    if (from.has_ownlock()) {
      set_ownlock(from.ownlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericACK::CopyFrom(const GenericACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_handshaking()) {
    if (!this->handshaking().IsInitialized()) return false;
  }
  return true;
}

void GenericACK::Swap(GenericACK* other) {
  if (other != this) {
    std::swap(hostid_, other->hostid_);
    std::swap(messageid_, other->messageid_);
    std::swap(handshaking_, other->handshaking_);
    std::swap(ownlock_, other->ownlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericACK_descriptor_;
  metadata.reflection = GenericACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
