// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motion.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MotionWalkMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionWalkMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionHeadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionHeadMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionActionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionActionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_motion_2eproto() {
  protobuf_AddDesc_motion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motion.proto");
  GOOGLE_CHECK(file != NULL);
  MotionWalkMessage_descriptor_ = file->message_type(0);
  static const int MotionWalkMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWalkMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWalkMessage, parameter_),
  };
  MotionWalkMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionWalkMessage_descriptor_,
      MotionWalkMessage::default_instance_,
      MotionWalkMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWalkMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWalkMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionWalkMessage));
  MotionHeadMessage_descriptor_ = file->message_type(1);
  static const int MotionHeadMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionHeadMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionHeadMessage, parameter_),
  };
  MotionHeadMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionHeadMessage_descriptor_,
      MotionHeadMessage::default_instance_,
      MotionHeadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionHeadMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionHeadMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionHeadMessage));
  MotionActionMessage_descriptor_ = file->message_type(2);
  static const int MotionActionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionMessage, parameter_),
  };
  MotionActionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionActionMessage_descriptor_,
      MotionActionMessage::default_instance_,
      MotionActionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionActionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionWalkMessage_descriptor_, &MotionWalkMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionHeadMessage_descriptor_, &MotionHeadMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionActionMessage_descriptor_, &MotionActionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motion_2eproto() {
  delete MotionWalkMessage::default_instance_;
  delete MotionWalkMessage_reflection_;
  delete MotionHeadMessage::default_instance_;
  delete MotionHeadMessage_reflection_;
  delete MotionActionMessage::default_instance_;
  delete MotionActionMessage_reflection_;
}

void protobuf_AddDesc_motion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014motion.proto\"9\n\021MotionWalkMessage\022\021\n\007c"
    "ommand\030\006 \002(\t:\000\022\021\n\tparameter\030\007 \003(\002\"9\n\021Mot"
    "ionHeadMessage\022\021\n\007command\030\006 \002(\t:\000\022\021\n\tpar"
    "ameter\030\007 \003(\002\";\n\023MotionActionMessage\022\021\n\007c"
    "ommand\030\006 \002(\t:\000\022\021\n\tparameter\030\007 \003(\002", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motion.proto", &protobuf_RegisterTypes);
  MotionWalkMessage::default_instance_ = new MotionWalkMessage();
  MotionHeadMessage::default_instance_ = new MotionHeadMessage();
  MotionActionMessage::default_instance_ = new MotionActionMessage();
  MotionWalkMessage::default_instance_->InitAsDefaultInstance();
  MotionHeadMessage::default_instance_->InitAsDefaultInstance();
  MotionActionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motion_2eproto {
  StaticDescriptorInitializer_motion_2eproto() {
    protobuf_AddDesc_motion_2eproto();
  }
} static_descriptor_initializer_motion_2eproto_;


// ===================================================================

const ::std::string MotionWalkMessage::_default_command_;
#ifndef _MSC_VER
const int MotionWalkMessage::kCommandFieldNumber;
const int MotionWalkMessage::kParameterFieldNumber;
#endif  // !_MSC_VER

MotionWalkMessage::MotionWalkMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionWalkMessage::InitAsDefaultInstance() {
}

MotionWalkMessage::MotionWalkMessage(const MotionWalkMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionWalkMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionWalkMessage::~MotionWalkMessage() {
  SharedDtor();
}

void MotionWalkMessage::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MotionWalkMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionWalkMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionWalkMessage_descriptor_;
}

const MotionWalkMessage& MotionWalkMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();  return *default_instance_;
}

MotionWalkMessage* MotionWalkMessage::default_instance_ = NULL;

MotionWalkMessage* MotionWalkMessage::New() const {
  return new MotionWalkMessage;
}

void MotionWalkMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionWalkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        break;
      }
      
      // repeated float parameter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_parameter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_parameter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionWalkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->command(), output);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionWalkMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->command(), target);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionWalkMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 6 [default = ""];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
  }
  // repeated float parameter = 7;
  {
    int data_size = 0;
    data_size = 4 * this->parameter_size();
    total_size += 1 * this->parameter_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionWalkMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionWalkMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionWalkMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionWalkMessage::MergeFrom(const MotionWalkMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionWalkMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionWalkMessage::CopyFrom(const MotionWalkMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionWalkMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MotionWalkMessage::Swap(MotionWalkMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionWalkMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionWalkMessage_descriptor_;
  metadata.reflection = MotionWalkMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MotionHeadMessage::_default_command_;
#ifndef _MSC_VER
const int MotionHeadMessage::kCommandFieldNumber;
const int MotionHeadMessage::kParameterFieldNumber;
#endif  // !_MSC_VER

MotionHeadMessage::MotionHeadMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionHeadMessage::InitAsDefaultInstance() {
}

MotionHeadMessage::MotionHeadMessage(const MotionHeadMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionHeadMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionHeadMessage::~MotionHeadMessage() {
  SharedDtor();
}

void MotionHeadMessage::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MotionHeadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionHeadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionHeadMessage_descriptor_;
}

const MotionHeadMessage& MotionHeadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();  return *default_instance_;
}

MotionHeadMessage* MotionHeadMessage::default_instance_ = NULL;

MotionHeadMessage* MotionHeadMessage::New() const {
  return new MotionHeadMessage;
}

void MotionHeadMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionHeadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        break;
      }
      
      // repeated float parameter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_parameter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_parameter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionHeadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->command(), output);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionHeadMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->command(), target);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionHeadMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 6 [default = ""];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
  }
  // repeated float parameter = 7;
  {
    int data_size = 0;
    data_size = 4 * this->parameter_size();
    total_size += 1 * this->parameter_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionHeadMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionHeadMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionHeadMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionHeadMessage::MergeFrom(const MotionHeadMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionHeadMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionHeadMessage::CopyFrom(const MotionHeadMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionHeadMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MotionHeadMessage::Swap(MotionHeadMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionHeadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionHeadMessage_descriptor_;
  metadata.reflection = MotionHeadMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MotionActionMessage::_default_command_;
#ifndef _MSC_VER
const int MotionActionMessage::kCommandFieldNumber;
const int MotionActionMessage::kParameterFieldNumber;
#endif  // !_MSC_VER

MotionActionMessage::MotionActionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionActionMessage::InitAsDefaultInstance() {
}

MotionActionMessage::MotionActionMessage(const MotionActionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionActionMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&_default_command_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionActionMessage::~MotionActionMessage() {
  SharedDtor();
}

void MotionActionMessage::SharedDtor() {
  if (command_ != &_default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MotionActionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionActionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionActionMessage_descriptor_;
}

const MotionActionMessage& MotionActionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();  return *default_instance_;
}

MotionActionMessage* MotionActionMessage::default_instance_ = NULL;

MotionActionMessage* MotionActionMessage::New() const {
  return new MotionActionMessage;
}

void MotionActionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_ != &_default_command_) {
        command_->clear();
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionActionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        break;
      }
      
      // repeated float parameter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_parameter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_parameter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionActionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->command(), output);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionActionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 6 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->command(), target);
  }
  
  // repeated float parameter = 7;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionActionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 6 [default = ""];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
  }
  // repeated float parameter = 7;
  {
    int data_size = 0;
    data_size = 4 * this->parameter_size();
    total_size += 1 * this->parameter_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionActionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionActionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionActionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionActionMessage::MergeFrom(const MotionActionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionActionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionActionMessage::CopyFrom(const MotionActionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionActionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MotionActionMessage::Swap(MotionActionMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionActionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionActionMessage_descriptor_;
  metadata.reflection = MotionActionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
