// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedWorldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedWorldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeammatePose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeammatePose_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationResetMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationResetMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalizationResetMessage_RESET_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LocalizationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldInfo_2eproto() {
  protobuf_AddDesc_WorldInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldInfo.proto");
  GOOGLE_CHECK(file != NULL);
  WorldInfo_descriptor_ = file->message_type(0);
  static const int WorldInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, myposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, balls_),
  };
  WorldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldInfo_descriptor_,
      WorldInfo::default_instance_,
      WorldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldInfo));
  SharedWorldInfo_descriptor_ = file->message_type(1);
  static const int SharedWorldInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedWorldInfo, playerclosesttoball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedWorldInfo, teammateposition_),
  };
  SharedWorldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedWorldInfo_descriptor_,
      SharedWorldInfo::default_instance_,
      SharedWorldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedWorldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedWorldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedWorldInfo));
  TeammatePose_descriptor_ = file->message_type(2);
  static const int TeammatePose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammatePose, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammatePose, robotid_),
  };
  TeammatePose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeammatePose_descriptor_,
      TeammatePose::default_instance_,
      TeammatePose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammatePose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammatePose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeammatePose));
  RobotPose_descriptor_ = file->message_type(3);
  static const int RobotPose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, var_),
  };
  RobotPose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPose_descriptor_,
      RobotPose::default_instance_,
      RobotPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPose));
  Ball_descriptor_ = file->message_type(4);
  static const int Ball_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativexspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativeyspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, absolutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, absolutey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, absolutexspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, absoluteyspeed_),
  };
  Ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_descriptor_,
      Ball::default_instance_,
      Ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball));
  LocalizationResetMessage_descriptor_ = file->message_type(5);
  static const int LocalizationResetMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, kickoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, phipos_),
  };
  LocalizationResetMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationResetMessage_descriptor_,
      LocalizationResetMessage::default_instance_,
      LocalizationResetMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationResetMessage));
  LocalizationResetMessage_RESET_descriptor_ = LocalizationResetMessage_descriptor_->enum_type(0);
  LocalizationData_descriptor_ = file->message_type(6);
  static const int LocalizationData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, robotposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, observations_),
  };
  LocalizationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationData_descriptor_,
      LocalizationData::default_instance_,
      LocalizationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationData));
  header_descriptor_ = file->message_type(7);
  static const int header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, nextmsgbytesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, nextmsgname_),
  };
  header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      header_descriptor_,
      header::default_instance_,
      header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(header));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldInfo_descriptor_, &WorldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedWorldInfo_descriptor_, &SharedWorldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeammatePose_descriptor_, &TeammatePose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPose_descriptor_, &RobotPose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_descriptor_, &Ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationResetMessage_descriptor_, &LocalizationResetMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationData_descriptor_, &LocalizationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    header_descriptor_, &header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldInfo_2eproto() {
  delete WorldInfo::default_instance_;
  delete WorldInfo_reflection_;
  delete SharedWorldInfo::default_instance_;
  delete SharedWorldInfo_reflection_;
  delete TeammatePose::default_instance_;
  delete TeammatePose_reflection_;
  delete RobotPose::default_instance_;
  delete RobotPose_reflection_;
  delete Ball::default_instance_;
  delete Ball_reflection_;
  delete LocalizationResetMessage::default_instance_;
  delete LocalizationResetMessage_reflection_;
  delete LocalizationData::default_instance_;
  delete LocalizationData_reflection_;
  delete header::default_instance_;
  delete header_reflection_;
}

void protobuf_AddDesc_WorldInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VisionObservations_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017WorldInfo.proto\032\030VisionObservations.pr"
    "oto\"A\n\tWorldInfo\022\036\n\nmyPosition\030\001 \002(\0132\n.R"
    "obotPose\022\024\n\005Balls\030\002 \003(\0132\005.Ball\"c\n\017Shared"
    "WorldInfo\022\'\n\023playerClosestToBall\030\001 \002(\0132\n"
    ".RobotPose\022\'\n\020teammatePosition\030\002 \003(\0132\r.T"
    "eammatePose\"9\n\014TeammatePose\022\030\n\004pose\030\001 \002("
    "\0132\n.RobotPose\022\017\n\007robotId\030\002 \002(\r\"V\n\tRobotP"
    "ose\022\022\n\001X\030\001 \002(\002:\007-100000\022\022\n\001Y\030\002 \002(\002:\007-100"
    "000\022\024\n\003phi\030\003 \002(\002:\007-100000\022\013\n\003var\030\004 \003(\002\"\372"
    "\001\n\004Ball\022\032\n\trelativeX\030\001 \002(\002:\007-100000\022\032\n\tr"
    "elativeY\030\002 \002(\002:\007-100000\022\037\n\016relativeXspee"
    "d\030\003 \002(\002:\007-100000\022\037\n\016relativeYspeed\030\004 \002(\002"
    ":\007-100000\022\032\n\tabsoluteX\030\005 \002(\002:\007-100000\022\032\n"
    "\tabsoluteY\030\006 \002(\002:\007-100000\022\037\n\016absoluteXsp"
    "eed\030\007 \002(\002:\007-100000\022\037\n\016absoluteYspeed\030\010 \002"
    "(\002:\007-100000\"\263\001\n\030LocalizationResetMessage"
    "\022\014\n\004type\030\001 \002(\005\022\017\n\007kickOff\030\002 \002(\010\022\017\n\004xPos\030"
    "\003 \002(\002:\0010\022\017\n\004yPos\030\004 \002(\002:\0010\022\021\n\006phiPos\030\005 \002("
    "\002:\0010\"C\n\005RESET\022\013\n\007UNIFORM\020\000\022\t\n\005READY\020\001\022\007\n"
    "\003SET\020\002\022\r\n\tPENALISED\020\003\022\n\n\006MANUAL\020\004\"\232\001\n\020Lo"
    "calizationData\022\031\n\005World\030\001 \002(\0132\n.WorldInf"
    "o\022\035\n\tParticles\030\002 \003(\0132\n.RobotPose\022!\n\rRobo"
    "tPosition\030\003 \002(\0132\n.RobotPose\022)\n\014Observati"
    "ons\030\004 \002(\0132\023.ObservationMessage\"A\n\006header"
    "\022\033\n\017NextMsgByteSize\030\001 \002(\021:\002-1\022\032\n\013NextMsg"
    "Name\030\003 \002(\014:\005Undef", 1017);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldInfo.proto", &protobuf_RegisterTypes);
  WorldInfo::default_instance_ = new WorldInfo();
  SharedWorldInfo::default_instance_ = new SharedWorldInfo();
  TeammatePose::default_instance_ = new TeammatePose();
  RobotPose::default_instance_ = new RobotPose();
  Ball::default_instance_ = new Ball();
  LocalizationResetMessage::default_instance_ = new LocalizationResetMessage();
  LocalizationData::default_instance_ = new LocalizationData();
  header::default_instance_ = new header();
  WorldInfo::default_instance_->InitAsDefaultInstance();
  SharedWorldInfo::default_instance_->InitAsDefaultInstance();
  TeammatePose::default_instance_->InitAsDefaultInstance();
  RobotPose::default_instance_->InitAsDefaultInstance();
  Ball::default_instance_->InitAsDefaultInstance();
  LocalizationResetMessage::default_instance_->InitAsDefaultInstance();
  LocalizationData::default_instance_->InitAsDefaultInstance();
  header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldInfo_2eproto {
  StaticDescriptorInitializer_WorldInfo_2eproto() {
    protobuf_AddDesc_WorldInfo_2eproto();
  }
} static_descriptor_initializer_WorldInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WorldInfo::kMyPositionFieldNumber;
const int WorldInfo::kBallsFieldNumber;
#endif  // !_MSC_VER

WorldInfo::WorldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldInfo::InitAsDefaultInstance() {
  myposition_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
}

WorldInfo::WorldInfo(const WorldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldInfo::SharedCtor() {
  _cached_size_ = 0;
  myposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldInfo::~WorldInfo() {
  SharedDtor();
}

void WorldInfo::SharedDtor() {
  if (this != default_instance_) {
    delete myposition_;
  }
}

void WorldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldInfo_descriptor_;
}

const WorldInfo& WorldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

WorldInfo* WorldInfo::default_instance_ = NULL;

WorldInfo* WorldInfo::New() const {
  return new WorldInfo;
}

void WorldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_myposition()) {
      if (myposition_ != NULL) myposition_->::RobotPose::Clear();
    }
  }
  balls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotPose myPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Balls;
        break;
      }
      
      // repeated .Ball Balls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Balls;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RobotPose myPosition = 1;
  if (has_myposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myposition(), output);
  }
  
  // repeated .Ball Balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->balls(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RobotPose myPosition = 1;
  if (has_myposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myposition(), target);
  }
  
  // repeated .Ball Balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->balls(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RobotPose myPosition = 1;
    if (has_myposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myposition());
    }
    
  }
  // repeated .Ball Balls = 2;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldInfo::MergeFrom(const WorldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myposition()) {
      mutable_myposition()->::RobotPose::MergeFrom(from.myposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldInfo::CopyFrom(const WorldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_myposition()) {
    if (!this->myposition().IsInitialized()) return false;
  }
  for (int i = 0; i < balls_size(); i++) {
    if (!this->balls(i).IsInitialized()) return false;
  }
  return true;
}

void WorldInfo::Swap(WorldInfo* other) {
  if (other != this) {
    std::swap(myposition_, other->myposition_);
    balls_.Swap(&other->balls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldInfo_descriptor_;
  metadata.reflection = WorldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedWorldInfo::kPlayerClosestToBallFieldNumber;
const int SharedWorldInfo::kTeammatePositionFieldNumber;
#endif  // !_MSC_VER

SharedWorldInfo::SharedWorldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedWorldInfo::InitAsDefaultInstance() {
  playerclosesttoball_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
}

SharedWorldInfo::SharedWorldInfo(const SharedWorldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedWorldInfo::SharedCtor() {
  _cached_size_ = 0;
  playerclosesttoball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedWorldInfo::~SharedWorldInfo() {
  SharedDtor();
}

void SharedWorldInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerclosesttoball_;
  }
}

void SharedWorldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedWorldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedWorldInfo_descriptor_;
}

const SharedWorldInfo& SharedWorldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

SharedWorldInfo* SharedWorldInfo::default_instance_ = NULL;

SharedWorldInfo* SharedWorldInfo::New() const {
  return new SharedWorldInfo;
}

void SharedWorldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerclosesttoball()) {
      if (playerclosesttoball_ != NULL) playerclosesttoball_->::RobotPose::Clear();
    }
  }
  teammateposition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedWorldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotPose playerClosestToBall = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerclosesttoball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teammatePosition;
        break;
      }
      
      // repeated .TeammatePose teammatePosition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teammatePosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammateposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teammatePosition;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedWorldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RobotPose playerClosestToBall = 1;
  if (has_playerclosesttoball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerclosesttoball(), output);
  }
  
  // repeated .TeammatePose teammatePosition = 2;
  for (int i = 0; i < this->teammateposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teammateposition(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedWorldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RobotPose playerClosestToBall = 1;
  if (has_playerclosesttoball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerclosesttoball(), target);
  }
  
  // repeated .TeammatePose teammatePosition = 2;
  for (int i = 0; i < this->teammateposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teammateposition(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedWorldInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RobotPose playerClosestToBall = 1;
    if (has_playerclosesttoball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerclosesttoball());
    }
    
  }
  // repeated .TeammatePose teammatePosition = 2;
  total_size += 1 * this->teammateposition_size();
  for (int i = 0; i < this->teammateposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammateposition(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedWorldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedWorldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedWorldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedWorldInfo::MergeFrom(const SharedWorldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammateposition_.MergeFrom(from.teammateposition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerclosesttoball()) {
      mutable_playerclosesttoball()->::RobotPose::MergeFrom(from.playerclosesttoball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedWorldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedWorldInfo::CopyFrom(const SharedWorldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedWorldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_playerclosesttoball()) {
    if (!this->playerclosesttoball().IsInitialized()) return false;
  }
  for (int i = 0; i < teammateposition_size(); i++) {
    if (!this->teammateposition(i).IsInitialized()) return false;
  }
  return true;
}

void SharedWorldInfo::Swap(SharedWorldInfo* other) {
  if (other != this) {
    std::swap(playerclosesttoball_, other->playerclosesttoball_);
    teammateposition_.Swap(&other->teammateposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedWorldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedWorldInfo_descriptor_;
  metadata.reflection = SharedWorldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeammatePose::kPoseFieldNumber;
const int TeammatePose::kRobotIdFieldNumber;
#endif  // !_MSC_VER

TeammatePose::TeammatePose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeammatePose::InitAsDefaultInstance() {
  pose_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
}

TeammatePose::TeammatePose(const TeammatePose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeammatePose::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  robotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeammatePose::~TeammatePose() {
  SharedDtor();
}

void TeammatePose::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void TeammatePose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammatePose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeammatePose_descriptor_;
}

const TeammatePose& TeammatePose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

TeammatePose* TeammatePose::default_instance_ = NULL;

TeammatePose* TeammatePose::New() const {
  return new TeammatePose;
}

void TeammatePose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::RobotPose::Clear();
    }
    robotid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeammatePose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotPose pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robotId;
        break;
      }
      
      // required uint32 robotId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotid_)));
          set_has_robotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeammatePose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RobotPose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }
  
  // required uint32 robotId = 2;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robotid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeammatePose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RobotPose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }
  
  // required uint32 robotId = 2;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robotid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeammatePose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RobotPose pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // required uint32 robotId = 2;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robotid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammatePose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeammatePose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeammatePose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeammatePose::MergeFrom(const TeammatePose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::RobotPose::MergeFrom(from.pose());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeammatePose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammatePose::CopyFrom(const TeammatePose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammatePose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void TeammatePose::Swap(TeammatePose* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(robotid_, other->robotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeammatePose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeammatePose_descriptor_;
  metadata.reflection = TeammatePose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotPose::kXFieldNumber;
const int RobotPose::kYFieldNumber;
const int RobotPose::kPhiFieldNumber;
const int RobotPose::kVarFieldNumber;
#endif  // !_MSC_VER

RobotPose::RobotPose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPose::InitAsDefaultInstance() {
}

RobotPose::RobotPose(const RobotPose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPose::SharedCtor() {
  _cached_size_ = 0;
  x_ = -100000;
  y_ = -100000;
  phi_ = -100000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPose::~RobotPose() {
  SharedDtor();
}

void RobotPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPose_descriptor_;
}

const RobotPose& RobotPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

RobotPose* RobotPose::default_instance_ = NULL;

RobotPose* RobotPose::New() const {
  return new RobotPose;
}

void RobotPose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -100000;
    y_ = -100000;
    phi_ = -100000;
  }
  var_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1 [default = -100000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }
      
      // required float Y = 2 [default = -100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_phi;
        break;
      }
      
      // required float phi = 3 [default = -100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_var;
        break;
      }
      
      // repeated float var = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_var())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_var())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_var;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float X = 1 [default = -100000];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float Y = 2 [default = -100000];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float phi = 3 [default = -100000];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->phi(), output);
  }
  
  // repeated float var = 4;
  for (int i = 0; i < this->var_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->var(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1 [default = -100000];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float Y = 2 [default = -100000];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float phi = 3 [default = -100000];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->phi(), target);
  }
  
  // repeated float var = 4;
  for (int i = 0; i < this->var_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->var(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1 [default = -100000];
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float Y = 2 [default = -100000];
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float phi = 3 [default = -100000];
    if (has_phi()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float var = 4;
  {
    int data_size = 0;
    data_size = 4 * this->var_size();
    total_size += 1 * this->var_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPose::MergeFrom(const RobotPose& from) {
  GOOGLE_CHECK_NE(&from, this);
  var_.MergeFrom(from.var_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPose::CopyFrom(const RobotPose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RobotPose::Swap(RobotPose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(phi_, other->phi_);
    var_.Swap(&other->var_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPose_descriptor_;
  metadata.reflection = RobotPose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ball::kRelativeXFieldNumber;
const int Ball::kRelativeYFieldNumber;
const int Ball::kRelativeXspeedFieldNumber;
const int Ball::kRelativeYspeedFieldNumber;
const int Ball::kAbsoluteXFieldNumber;
const int Ball::kAbsoluteYFieldNumber;
const int Ball::kAbsoluteXspeedFieldNumber;
const int Ball::kAbsoluteYspeedFieldNumber;
#endif  // !_MSC_VER

Ball::Ball()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ball::InitAsDefaultInstance() {
}

Ball::Ball(const Ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ball::SharedCtor() {
  _cached_size_ = 0;
  relativex_ = -100000;
  relativey_ = -100000;
  relativexspeed_ = -100000;
  relativeyspeed_ = -100000;
  absolutex_ = -100000;
  absolutey_ = -100000;
  absolutexspeed_ = -100000;
  absoluteyspeed_ = -100000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball::~Ball() {
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_descriptor_;
}

const Ball& Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

Ball* Ball::default_instance_ = NULL;

Ball* Ball::New() const {
  return new Ball;
}

void Ball::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relativex_ = -100000;
    relativey_ = -100000;
    relativexspeed_ = -100000;
    relativeyspeed_ = -100000;
    absolutex_ = -100000;
    absolutey_ = -100000;
    absolutexspeed_ = -100000;
    absoluteyspeed_ = -100000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float relativeX = 1 [default = -100000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativex_)));
          set_has_relativex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_relativeY;
        break;
      }
      
      // required float relativeY = 2 [default = -100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativey_)));
          set_has_relativey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_relativeXspeed;
        break;
      }
      
      // required float relativeXspeed = 3 [default = -100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeXspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativexspeed_)));
          set_has_relativexspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeYspeed;
        break;
      }
      
      // required float relativeYspeed = 4 [default = -100000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeYspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativeyspeed_)));
          set_has_relativeyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_absoluteX;
        break;
      }
      
      // required float absoluteX = 5 [default = -100000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_absoluteX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolutex_)));
          set_has_absolutex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_absoluteY;
        break;
      }
      
      // required float absoluteY = 6 [default = -100000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_absoluteY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolutey_)));
          set_has_absolutey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_absoluteXspeed;
        break;
      }
      
      // required float absoluteXspeed = 7 [default = -100000];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_absoluteXspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolutexspeed_)));
          set_has_absolutexspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_absoluteYspeed;
        break;
      }
      
      // required float absoluteYspeed = 8 [default = -100000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_absoluteYspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absoluteyspeed_)));
          set_has_absoluteyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->relativex(), output);
  }
  
  // required float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relativey(), output);
  }
  
  // required float relativeXspeed = 3 [default = -100000];
  if (has_relativexspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->relativexspeed(), output);
  }
  
  // required float relativeYspeed = 4 [default = -100000];
  if (has_relativeyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativeyspeed(), output);
  }
  
  // required float absoluteX = 5 [default = -100000];
  if (has_absolutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->absolutex(), output);
  }
  
  // required float absoluteY = 6 [default = -100000];
  if (has_absolutey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->absolutey(), output);
  }
  
  // required float absoluteXspeed = 7 [default = -100000];
  if (has_absolutexspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->absolutexspeed(), output);
  }
  
  // required float absoluteYspeed = 8 [default = -100000];
  if (has_absoluteyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->absoluteyspeed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->relativex(), target);
  }
  
  // required float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relativey(), target);
  }
  
  // required float relativeXspeed = 3 [default = -100000];
  if (has_relativexspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->relativexspeed(), target);
  }
  
  // required float relativeYspeed = 4 [default = -100000];
  if (has_relativeyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativeyspeed(), target);
  }
  
  // required float absoluteX = 5 [default = -100000];
  if (has_absolutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->absolutex(), target);
  }
  
  // required float absoluteY = 6 [default = -100000];
  if (has_absolutey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->absolutey(), target);
  }
  
  // required float absoluteXspeed = 7 [default = -100000];
  if (has_absolutexspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->absolutexspeed(), target);
  }
  
  // required float absoluteYspeed = 8 [default = -100000];
  if (has_absoluteyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->absoluteyspeed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ball::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float relativeX = 1 [default = -100000];
    if (has_relativex()) {
      total_size += 1 + 4;
    }
    
    // required float relativeY = 2 [default = -100000];
    if (has_relativey()) {
      total_size += 1 + 4;
    }
    
    // required float relativeXspeed = 3 [default = -100000];
    if (has_relativexspeed()) {
      total_size += 1 + 4;
    }
    
    // required float relativeYspeed = 4 [default = -100000];
    if (has_relativeyspeed()) {
      total_size += 1 + 4;
    }
    
    // required float absoluteX = 5 [default = -100000];
    if (has_absolutex()) {
      total_size += 1 + 4;
    }
    
    // required float absoluteY = 6 [default = -100000];
    if (has_absolutey()) {
      total_size += 1 + 4;
    }
    
    // required float absoluteXspeed = 7 [default = -100000];
    if (has_absolutexspeed()) {
      total_size += 1 + 4;
    }
    
    // required float absoluteYspeed = 8 [default = -100000];
    if (has_absoluteyspeed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relativex()) {
      set_relativex(from.relativex());
    }
    if (from.has_relativey()) {
      set_relativey(from.relativey());
    }
    if (from.has_relativexspeed()) {
      set_relativexspeed(from.relativexspeed());
    }
    if (from.has_relativeyspeed()) {
      set_relativeyspeed(from.relativeyspeed());
    }
    if (from.has_absolutex()) {
      set_absolutex(from.absolutex());
    }
    if (from.has_absolutey()) {
      set_absolutey(from.absolutey());
    }
    if (from.has_absolutexspeed()) {
      set_absolutexspeed(from.absolutexspeed());
    }
    if (from.has_absoluteyspeed()) {
      set_absoluteyspeed(from.absoluteyspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void Ball::Swap(Ball* other) {
  if (other != this) {
    std::swap(relativex_, other->relativex_);
    std::swap(relativey_, other->relativey_);
    std::swap(relativexspeed_, other->relativexspeed_);
    std::swap(relativeyspeed_, other->relativeyspeed_);
    std::swap(absolutex_, other->absolutex_);
    std::swap(absolutey_, other->absolutey_);
    std::swap(absolutexspeed_, other->absolutexspeed_);
    std::swap(absoluteyspeed_, other->absoluteyspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_descriptor_;
  metadata.reflection = Ball_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LocalizationResetMessage_RESET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationResetMessage_RESET_descriptor_;
}
bool LocalizationResetMessage_RESET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocalizationResetMessage_RESET LocalizationResetMessage::UNIFORM;
const LocalizationResetMessage_RESET LocalizationResetMessage::READY;
const LocalizationResetMessage_RESET LocalizationResetMessage::SET;
const LocalizationResetMessage_RESET LocalizationResetMessage::PENALISED;
const LocalizationResetMessage_RESET LocalizationResetMessage::MANUAL;
const LocalizationResetMessage_RESET LocalizationResetMessage::RESET_MIN;
const LocalizationResetMessage_RESET LocalizationResetMessage::RESET_MAX;
const int LocalizationResetMessage::RESET_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocalizationResetMessage::kTypeFieldNumber;
const int LocalizationResetMessage::kKickOffFieldNumber;
const int LocalizationResetMessage::kXPosFieldNumber;
const int LocalizationResetMessage::kYPosFieldNumber;
const int LocalizationResetMessage::kPhiPosFieldNumber;
#endif  // !_MSC_VER

LocalizationResetMessage::LocalizationResetMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationResetMessage::InitAsDefaultInstance() {
}

LocalizationResetMessage::LocalizationResetMessage(const LocalizationResetMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationResetMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  kickoff_ = false;
  xpos_ = 0;
  ypos_ = 0;
  phipos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationResetMessage::~LocalizationResetMessage() {
  SharedDtor();
}

void LocalizationResetMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalizationResetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationResetMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationResetMessage_descriptor_;
}

const LocalizationResetMessage& LocalizationResetMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

LocalizationResetMessage* LocalizationResetMessage::default_instance_ = NULL;

LocalizationResetMessage* LocalizationResetMessage::New() const {
  return new LocalizationResetMessage;
}

void LocalizationResetMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    kickoff_ = false;
    xpos_ = 0;
    ypos_ = 0;
    phipos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationResetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kickOff;
        break;
      }
      
      // required bool kickOff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kickoff_)));
          set_has_kickoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_xPos;
        break;
      }
      
      // required float xPos = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yPos;
        break;
      }
      
      // required float yPos = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_phiPos;
        break;
      }
      
      // required float phiPos = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phiPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phipos_)));
          set_has_phipos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationResetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required bool kickOff = 2;
  if (has_kickoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->kickoff(), output);
  }
  
  // required float xPos = 3 [default = 0];
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xpos(), output);
  }
  
  // required float yPos = 4 [default = 0];
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ypos(), output);
  }
  
  // required float phiPos = 5 [default = 0];
  if (has_phipos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->phipos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationResetMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required bool kickOff = 2;
  if (has_kickoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->kickoff(), target);
  }
  
  // required float xPos = 3 [default = 0];
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xpos(), target);
  }
  
  // required float yPos = 4 [default = 0];
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ypos(), target);
  }
  
  // required float phiPos = 5 [default = 0];
  if (has_phipos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->phipos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationResetMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required bool kickOff = 2;
    if (has_kickoff()) {
      total_size += 1 + 1;
    }
    
    // required float xPos = 3 [default = 0];
    if (has_xpos()) {
      total_size += 1 + 4;
    }
    
    // required float yPos = 4 [default = 0];
    if (has_ypos()) {
      total_size += 1 + 4;
    }
    
    // required float phiPos = 5 [default = 0];
    if (has_phipos()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationResetMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationResetMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationResetMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationResetMessage::MergeFrom(const LocalizationResetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kickoff()) {
      set_kickoff(from.kickoff());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_phipos()) {
      set_phipos(from.phipos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationResetMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationResetMessage::CopyFrom(const LocalizationResetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationResetMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void LocalizationResetMessage::Swap(LocalizationResetMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(kickoff_, other->kickoff_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(phipos_, other->phipos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationResetMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationResetMessage_descriptor_;
  metadata.reflection = LocalizationResetMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationData::kWorldFieldNumber;
const int LocalizationData::kParticlesFieldNumber;
const int LocalizationData::kRobotPositionFieldNumber;
const int LocalizationData::kObservationsFieldNumber;
#endif  // !_MSC_VER

LocalizationData::LocalizationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationData::InitAsDefaultInstance() {
  world_ = const_cast< ::WorldInfo*>(&::WorldInfo::default_instance());
  robotposition_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
  observations_ = const_cast< ::ObservationMessage*>(&::ObservationMessage::default_instance());
}

LocalizationData::LocalizationData(const LocalizationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationData::SharedCtor() {
  _cached_size_ = 0;
  world_ = NULL;
  robotposition_ = NULL;
  observations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationData::~LocalizationData() {
  SharedDtor();
}

void LocalizationData::SharedDtor() {
  if (this != default_instance_) {
    delete world_;
    delete robotposition_;
    delete observations_;
  }
}

void LocalizationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationData_descriptor_;
}

const LocalizationData& LocalizationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

LocalizationData* LocalizationData::default_instance_ = NULL;

LocalizationData* LocalizationData::New() const {
  return new LocalizationData;
}

void LocalizationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_world()) {
      if (world_ != NULL) world_->::WorldInfo::Clear();
    }
    if (has_robotposition()) {
      if (robotposition_ != NULL) robotposition_->::RobotPose::Clear();
    }
    if (has_observations()) {
      if (observations_ != NULL) observations_->::ObservationMessage::Clear();
    }
  }
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WorldInfo World = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Particles;
        break;
      }
      
      // repeated .RobotPose Particles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Particles;
        if (input->ExpectTag(26)) goto parse_RobotPosition;
        break;
      }
      
      // required .RobotPose RobotPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RobotPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Observations;
        break;
      }
      
      // required .ObservationMessage Observations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Observations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_observations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .WorldInfo World = 1;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->world(), output);
  }
  
  // repeated .RobotPose Particles = 2;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->particles(i), output);
  }
  
  // required .RobotPose RobotPosition = 3;
  if (has_robotposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robotposition(), output);
  }
  
  // required .ObservationMessage Observations = 4;
  if (has_observations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->observations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .WorldInfo World = 1;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->world(), target);
  }
  
  // repeated .RobotPose Particles = 2;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->particles(i), target);
  }
  
  // required .RobotPose RobotPosition = 3;
  if (has_robotposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->robotposition(), target);
  }
  
  // required .ObservationMessage Observations = 4;
  if (has_observations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->observations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .WorldInfo World = 1;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world());
    }
    
    // required .RobotPose RobotPosition = 3;
    if (has_robotposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotposition());
    }
    
    // required .ObservationMessage Observations = 4;
    if (has_observations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->observations());
    }
    
  }
  // repeated .RobotPose Particles = 2;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationData::MergeFrom(const LocalizationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world()) {
      mutable_world()->::WorldInfo::MergeFrom(from.world());
    }
    if (from.has_robotposition()) {
      mutable_robotposition()->::RobotPose::MergeFrom(from.robotposition());
    }
    if (from.has_observations()) {
      mutable_observations()->::ObservationMessage::MergeFrom(from.observations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationData::CopyFrom(const LocalizationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_world()) {
    if (!this->world().IsInitialized()) return false;
  }
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  if (has_robotposition()) {
    if (!this->robotposition().IsInitialized()) return false;
  }
  if (has_observations()) {
    if (!this->observations().IsInitialized()) return false;
  }
  return true;
}

void LocalizationData::Swap(LocalizationData* other) {
  if (other != this) {
    std::swap(world_, other->world_);
    particles_.Swap(&other->particles_);
    std::swap(robotposition_, other->robotposition_);
    std::swap(observations_, other->observations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationData_descriptor_;
  metadata.reflection = LocalizationData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string header::_default_nextmsgname_("Undef");
#ifndef _MSC_VER
const int header::kNextMsgByteSizeFieldNumber;
const int header::kNextMsgNameFieldNumber;
#endif  // !_MSC_VER

header::header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void header::InitAsDefaultInstance() {
}

header::header(const header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void header::SharedCtor() {
  _cached_size_ = 0;
  nextmsgbytesize_ = -1;
  nextmsgname_ = const_cast< ::std::string*>(&_default_nextmsgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header::~header() {
  SharedDtor();
}

void header::SharedDtor() {
  if (nextmsgname_ != &_default_nextmsgname_) {
    delete nextmsgname_;
  }
  if (this != default_instance_) {
  }
}

void header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_descriptor_;
}

const header& header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

header* header::default_instance_ = NULL;

header* header::New() const {
  return new header;
}

void header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nextmsgbytesize_ = -1;
    if (has_nextmsgname()) {
      if (nextmsgname_ != &_default_nextmsgname_) {
        nextmsgname_->assign(_default_nextmsgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 NextMsgByteSize = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nextmsgbytesize_)));
          set_has_nextmsgbytesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NextMsgName;
        break;
      }
      
      // required bytes NextMsgName = 3 [default = "Undef"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextMsgName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nextmsgname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 NextMsgByteSize = 1 [default = -1];
  if (has_nextmsgbytesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nextmsgbytesize(), output);
  }
  
  // required bytes NextMsgName = 3 [default = "Undef"];
  if (has_nextmsgname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->nextmsgname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 NextMsgByteSize = 1 [default = -1];
  if (has_nextmsgbytesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nextmsgbytesize(), target);
  }
  
  // required bytes NextMsgName = 3 [default = "Undef"];
  if (has_nextmsgname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nextmsgname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 NextMsgByteSize = 1 [default = -1];
    if (has_nextmsgbytesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nextmsgbytesize());
    }
    
    // required bytes NextMsgName = 3 [default = "Undef"];
    if (has_nextmsgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nextmsgname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header::MergeFrom(const header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextmsgbytesize()) {
      set_nextmsgbytesize(from.nextmsgbytesize());
    }
    if (from.has_nextmsgname()) {
      set_nextmsgname(from.nextmsgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header::CopyFrom(const header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void header::Swap(header* other) {
  if (other != this) {
    std::swap(nextmsgbytesize_, other->nextmsgbytesize_);
    std::swap(nextmsgname_, other->nextmsgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_descriptor_;
  metadata.reflection = header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
