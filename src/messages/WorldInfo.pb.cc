// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnknownObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnknownObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationResetMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationResetMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalizationResetMessage_ResetPhase_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LocalizationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationDataForGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationDataForGUI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldInfo_2eproto() {
  protobuf_AddDesc_WorldInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldInfo.proto");
  GOOGLE_CHECK(file != NULL);
  WorldInfo_descriptor_ = file->message_type(0);
  static const int WorldInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, myposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, otherrobots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, ufos_),
  };
  WorldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldInfo_descriptor_,
      WorldInfo::default_instance_,
      WorldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldInfo));
  RobotPose_descriptor_ = file->message_type(1);
  static const int RobotPose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, confidence_),
  };
  RobotPose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPose_descriptor_,
      RobotPose::default_instance_,
      RobotPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPose));
  Ball_descriptor_ = file->message_type(2);
  static const int Ball_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativexspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, relativeyspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, variancex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, variancey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, variancexspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, varianceyspeed_),
  };
  Ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_descriptor_,
      Ball::default_instance_,
      Ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball));
  UnknownObjects_descriptor_ = file->message_type(3);
  static const int UnknownObjects_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, relativex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, relativey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, relativexspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, relativeyspeed_),
  };
  UnknownObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnknownObjects_descriptor_,
      UnknownObjects::default_instance_,
      UnknownObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnknownObjects));
  LocalizationResetMessage_descriptor_ = file->message_type(4);
  static const int LocalizationResetMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, kickoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, playreadyplay_),
  };
  LocalizationResetMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationResetMessage_descriptor_,
      LocalizationResetMessage::default_instance_,
      LocalizationResetMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationResetMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationResetMessage));
  LocalizationResetMessage_ResetPhase_descriptor_ = LocalizationResetMessage_descriptor_->enum_type(0);
  LocalizationData_descriptor_ = file->message_type(5);
  static const int LocalizationData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, robotposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, observations_),
  };
  LocalizationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationData_descriptor_,
      LocalizationData::default_instance_,
      LocalizationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationData));
  header_descriptor_ = file->message_type(6);
  static const int header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, nextmsgbytesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, nextmsgname_),
  };
  header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      header_descriptor_,
      header::default_instance_,
      header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(header));
  LocalizationDataForGUI_descriptor_ = file->message_type(7);
  static const int LocalizationDataForGUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, particles_),
  };
  LocalizationDataForGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationDataForGUI_descriptor_,
      LocalizationDataForGUI::default_instance_,
      LocalizationDataForGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationDataForGUI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldInfo_descriptor_, &WorldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPose_descriptor_, &RobotPose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_descriptor_, &Ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnknownObjects_descriptor_, &UnknownObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationResetMessage_descriptor_, &LocalizationResetMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationData_descriptor_, &LocalizationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    header_descriptor_, &header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationDataForGUI_descriptor_, &LocalizationDataForGUI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldInfo_2eproto() {
  delete WorldInfo::default_instance_;
  delete WorldInfo_reflection_;
  delete RobotPose::default_instance_;
  delete RobotPose_reflection_;
  delete Ball::default_instance_;
  delete Ball_reflection_;
  delete UnknownObjects::default_instance_;
  delete UnknownObjects_reflection_;
  delete LocalizationResetMessage::default_instance_;
  delete LocalizationResetMessage_reflection_;
  delete LocalizationData::default_instance_;
  delete LocalizationData_reflection_;
  delete header::default_instance_;
  delete header_reflection_;
  delete LocalizationDataForGUI::default_instance_;
  delete LocalizationDataForGUI_reflection_;
}

void protobuf_AddDesc_WorldInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VisionObservations_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017WorldInfo.proto\032\030VisionObservations.pr"
    "oto\"\201\001\n\tWorldInfo\022\036\n\nmyPosition\030\001 \002(\0132\n."
    "RobotPose\022\024\n\005Balls\030\002 \003(\0132\005.Ball\022\037\n\013Other"
    "Robots\030\003 \003(\0132\n.RobotPose\022\035\n\004UFOs\030\004 \003(\0132\017"
    ".UnknownObjects\"f\n\tRobotPose\022\022\n\001X\030\001 \002(\002:"
    "\007-100000\022\022\n\001Y\030\002 \002(\002:\007-100000\022\024\n\003phi\030\003 \002("
    "\002:\007-100000\022\033\n\nconfidence\030\004 \002(\002:\007-100000\""
    "\372\001\n\004Ball\022\032\n\trelativeX\030\001 \002(\002:\007-100000\022\032\n\t"
    "relativeY\030\002 \002(\002:\007-100000\022\037\n\016relativeXspe"
    "ed\030\003 \002(\002:\007-100000\022\037\n\016relativeYspeed\030\004 \002("
    "\002:\007-100000\022\032\n\tvarianceX\030\005 \002(\002:\007-100000\022\032"
    "\n\tvarianceY\030\006 \002(\002:\007-100000\022\037\n\016varianceXs"
    "peed\030\007 \002(\002:\007-100000\022\037\n\016varianceYspeed\030\010 "
    "\002(\002:\007-100000\"\243\001\n\016UnknownObjects\022\032\n\trelat"
    "iveX\030\001 \001(\002:\007-100000\022\032\n\trelativeY\030\002 \001(\002:\007"
    "-100000\022\027\n\006height\030\003 \001(\002:\007-100000\022\037\n\016rela"
    "tiveXspeed\030\004 \001(\002:\007-100000\022\037\n\016relativeYsp"
    "eed\030\005 \001(\002:\007-100000\"\263\001\n\030LocalizationReset"
    "Message\0222\n\004type\030\001 \002(\0162$.LocalizationRese"
    "tMessage.ResetPhase\022\017\n\007kickOff\030\002 \002(\010\022\025\n\r"
    "playReadyPlay\030\003 \002(\010\";\n\nResetPhase\022\r\n\tPEN"
    "ALIZED\020\000\022\006\n\002P1\020\001\022\006\n\002P2\020\002\022\006\n\002P3\020\003\022\006\n\002P4\020\004"
    "\"\232\001\n\020LocalizationData\022\031\n\005World\030\001 \002(\0132\n.W"
    "orldInfo\022\035\n\tParticles\030\002 \003(\0132\n.RobotPose\022"
    "!\n\rRobotPosition\030\003 \002(\0132\n.RobotPose\022)\n\014Ob"
    "servations\030\004 \002(\0132\023.ObservationMessage\"A\n"
    "\006header\022\033\n\017NextMsgByteSize\030\001 \002(\021:\002-1\022\032\n\013"
    "NextMsgName\030\003 \002(\014:\005Undef\"7\n\026Localization"
    "DataForGUI\022\035\n\tParticles\030\001 \003(\0132\n.RobotPos"
    "e", 1161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldInfo.proto", &protobuf_RegisterTypes);
  WorldInfo::default_instance_ = new WorldInfo();
  RobotPose::default_instance_ = new RobotPose();
  Ball::default_instance_ = new Ball();
  UnknownObjects::default_instance_ = new UnknownObjects();
  LocalizationResetMessage::default_instance_ = new LocalizationResetMessage();
  LocalizationData::default_instance_ = new LocalizationData();
  header::default_instance_ = new header();
  LocalizationDataForGUI::default_instance_ = new LocalizationDataForGUI();
  WorldInfo::default_instance_->InitAsDefaultInstance();
  RobotPose::default_instance_->InitAsDefaultInstance();
  Ball::default_instance_->InitAsDefaultInstance();
  UnknownObjects::default_instance_->InitAsDefaultInstance();
  LocalizationResetMessage::default_instance_->InitAsDefaultInstance();
  LocalizationData::default_instance_->InitAsDefaultInstance();
  header::default_instance_->InitAsDefaultInstance();
  LocalizationDataForGUI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldInfo_2eproto {
  StaticDescriptorInitializer_WorldInfo_2eproto() {
    protobuf_AddDesc_WorldInfo_2eproto();
  }
} static_descriptor_initializer_WorldInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WorldInfo::kMyPositionFieldNumber;
const int WorldInfo::kBallsFieldNumber;
const int WorldInfo::kOtherRobotsFieldNumber;
const int WorldInfo::kUFOsFieldNumber;
#endif  // !_MSC_VER

WorldInfo::WorldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldInfo::InitAsDefaultInstance() {
  myposition_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
}

WorldInfo::WorldInfo(const WorldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldInfo::SharedCtor() {
  _cached_size_ = 0;
  myposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldInfo::~WorldInfo() {
  SharedDtor();
}

void WorldInfo::SharedDtor() {
  if (this != default_instance_) {
    delete myposition_;
  }
}

void WorldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldInfo_descriptor_;
}

const WorldInfo& WorldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

WorldInfo* WorldInfo::default_instance_ = NULL;

WorldInfo* WorldInfo::New() const {
  return new WorldInfo;
}

void WorldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_myposition()) {
      if (myposition_ != NULL) myposition_->::RobotPose::Clear();
    }
  }
  balls_.Clear();
  otherrobots_.Clear();
  ufos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotPose myPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Balls;
        break;
      }
      
      // repeated .Ball Balls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Balls;
        if (input->ExpectTag(26)) goto parse_OtherRobots;
        break;
      }
      
      // repeated .RobotPose OtherRobots = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OtherRobots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherrobots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OtherRobots;
        if (input->ExpectTag(34)) goto parse_UFOs;
        break;
      }
      
      // repeated .UnknownObjects UFOs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UFOs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ufos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_UFOs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RobotPose myPosition = 1;
  if (has_myposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myposition(), output);
  }
  
  // repeated .Ball Balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->balls(i), output);
  }
  
  // repeated .RobotPose OtherRobots = 3;
  for (int i = 0; i < this->otherrobots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->otherrobots(i), output);
  }
  
  // repeated .UnknownObjects UFOs = 4;
  for (int i = 0; i < this->ufos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ufos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RobotPose myPosition = 1;
  if (has_myposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myposition(), target);
  }
  
  // repeated .Ball Balls = 2;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->balls(i), target);
  }
  
  // repeated .RobotPose OtherRobots = 3;
  for (int i = 0; i < this->otherrobots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->otherrobots(i), target);
  }
  
  // repeated .UnknownObjects UFOs = 4;
  for (int i = 0; i < this->ufos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ufos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RobotPose myPosition = 1;
    if (has_myposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myposition());
    }
    
  }
  // repeated .Ball Balls = 2;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }
  
  // repeated .RobotPose OtherRobots = 3;
  total_size += 1 * this->otherrobots_size();
  for (int i = 0; i < this->otherrobots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherrobots(i));
  }
  
  // repeated .UnknownObjects UFOs = 4;
  total_size += 1 * this->ufos_size();
  for (int i = 0; i < this->ufos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ufos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldInfo::MergeFrom(const WorldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  otherrobots_.MergeFrom(from.otherrobots_);
  ufos_.MergeFrom(from.ufos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myposition()) {
      mutable_myposition()->::RobotPose::MergeFrom(from.myposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldInfo::CopyFrom(const WorldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_myposition()) {
    if (!this->myposition().IsInitialized()) return false;
  }
  for (int i = 0; i < balls_size(); i++) {
    if (!this->balls(i).IsInitialized()) return false;
  }
  for (int i = 0; i < otherrobots_size(); i++) {
    if (!this->otherrobots(i).IsInitialized()) return false;
  }
  return true;
}

void WorldInfo::Swap(WorldInfo* other) {
  if (other != this) {
    std::swap(myposition_, other->myposition_);
    balls_.Swap(&other->balls_);
    otherrobots_.Swap(&other->otherrobots_);
    ufos_.Swap(&other->ufos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldInfo_descriptor_;
  metadata.reflection = WorldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotPose::kXFieldNumber;
const int RobotPose::kYFieldNumber;
const int RobotPose::kPhiFieldNumber;
const int RobotPose::kConfidenceFieldNumber;
#endif  // !_MSC_VER

RobotPose::RobotPose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPose::InitAsDefaultInstance() {
}

RobotPose::RobotPose(const RobotPose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPose::SharedCtor() {
  _cached_size_ = 0;
  x_ = -100000;
  y_ = -100000;
  phi_ = -100000;
  confidence_ = -100000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPose::~RobotPose() {
  SharedDtor();
}

void RobotPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPose_descriptor_;
}

const RobotPose& RobotPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

RobotPose* RobotPose::default_instance_ = NULL;

RobotPose* RobotPose::New() const {
  return new RobotPose;
}

void RobotPose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -100000;
    y_ = -100000;
    phi_ = -100000;
    confidence_ = -100000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1 [default = -100000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }
      
      // required float Y = 2 [default = -100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_phi;
        break;
      }
      
      // required float phi = 3 [default = -100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_confidence;
        break;
      }
      
      // required float confidence = 4 [default = -100000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float X = 1 [default = -100000];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float Y = 2 [default = -100000];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float phi = 3 [default = -100000];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->phi(), output);
  }
  
  // required float confidence = 4 [default = -100000];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1 [default = -100000];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float Y = 2 [default = -100000];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float phi = 3 [default = -100000];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->phi(), target);
  }
  
  // required float confidence = 4 [default = -100000];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1 [default = -100000];
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float Y = 2 [default = -100000];
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float phi = 3 [default = -100000];
    if (has_phi()) {
      total_size += 1 + 4;
    }
    
    // required float confidence = 4 [default = -100000];
    if (has_confidence()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPose::MergeFrom(const RobotPose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPose::CopyFrom(const RobotPose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RobotPose::Swap(RobotPose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(phi_, other->phi_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPose_descriptor_;
  metadata.reflection = RobotPose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ball::kRelativeXFieldNumber;
const int Ball::kRelativeYFieldNumber;
const int Ball::kRelativeXspeedFieldNumber;
const int Ball::kRelativeYspeedFieldNumber;
const int Ball::kVarianceXFieldNumber;
const int Ball::kVarianceYFieldNumber;
const int Ball::kVarianceXspeedFieldNumber;
const int Ball::kVarianceYspeedFieldNumber;
#endif  // !_MSC_VER

Ball::Ball()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ball::InitAsDefaultInstance() {
}

Ball::Ball(const Ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ball::SharedCtor() {
  _cached_size_ = 0;
  relativex_ = -100000;
  relativey_ = -100000;
  relativexspeed_ = -100000;
  relativeyspeed_ = -100000;
  variancex_ = -100000;
  variancey_ = -100000;
  variancexspeed_ = -100000;
  varianceyspeed_ = -100000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball::~Ball() {
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_descriptor_;
}

const Ball& Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

Ball* Ball::default_instance_ = NULL;

Ball* Ball::New() const {
  return new Ball;
}

void Ball::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relativex_ = -100000;
    relativey_ = -100000;
    relativexspeed_ = -100000;
    relativeyspeed_ = -100000;
    variancex_ = -100000;
    variancey_ = -100000;
    variancexspeed_ = -100000;
    varianceyspeed_ = -100000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float relativeX = 1 [default = -100000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativex_)));
          set_has_relativex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_relativeY;
        break;
      }
      
      // required float relativeY = 2 [default = -100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativey_)));
          set_has_relativey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_relativeXspeed;
        break;
      }
      
      // required float relativeXspeed = 3 [default = -100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeXspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativexspeed_)));
          set_has_relativexspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeYspeed;
        break;
      }
      
      // required float relativeYspeed = 4 [default = -100000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeYspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativeyspeed_)));
          set_has_relativeyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_varianceX;
        break;
      }
      
      // required float varianceX = 5 [default = -100000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_varianceX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &variancex_)));
          set_has_variancex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_varianceY;
        break;
      }
      
      // required float varianceY = 6 [default = -100000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_varianceY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &variancey_)));
          set_has_variancey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_varianceXspeed;
        break;
      }
      
      // required float varianceXspeed = 7 [default = -100000];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_varianceXspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &variancexspeed_)));
          set_has_variancexspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_varianceYspeed;
        break;
      }
      
      // required float varianceYspeed = 8 [default = -100000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_varianceYspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varianceyspeed_)));
          set_has_varianceyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->relativex(), output);
  }
  
  // required float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relativey(), output);
  }
  
  // required float relativeXspeed = 3 [default = -100000];
  if (has_relativexspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->relativexspeed(), output);
  }
  
  // required float relativeYspeed = 4 [default = -100000];
  if (has_relativeyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativeyspeed(), output);
  }
  
  // required float varianceX = 5 [default = -100000];
  if (has_variancex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->variancex(), output);
  }
  
  // required float varianceY = 6 [default = -100000];
  if (has_variancey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->variancey(), output);
  }
  
  // required float varianceXspeed = 7 [default = -100000];
  if (has_variancexspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->variancexspeed(), output);
  }
  
  // required float varianceYspeed = 8 [default = -100000];
  if (has_varianceyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->varianceyspeed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->relativex(), target);
  }
  
  // required float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relativey(), target);
  }
  
  // required float relativeXspeed = 3 [default = -100000];
  if (has_relativexspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->relativexspeed(), target);
  }
  
  // required float relativeYspeed = 4 [default = -100000];
  if (has_relativeyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativeyspeed(), target);
  }
  
  // required float varianceX = 5 [default = -100000];
  if (has_variancex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->variancex(), target);
  }
  
  // required float varianceY = 6 [default = -100000];
  if (has_variancey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->variancey(), target);
  }
  
  // required float varianceXspeed = 7 [default = -100000];
  if (has_variancexspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->variancexspeed(), target);
  }
  
  // required float varianceYspeed = 8 [default = -100000];
  if (has_varianceyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->varianceyspeed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ball::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float relativeX = 1 [default = -100000];
    if (has_relativex()) {
      total_size += 1 + 4;
    }
    
    // required float relativeY = 2 [default = -100000];
    if (has_relativey()) {
      total_size += 1 + 4;
    }
    
    // required float relativeXspeed = 3 [default = -100000];
    if (has_relativexspeed()) {
      total_size += 1 + 4;
    }
    
    // required float relativeYspeed = 4 [default = -100000];
    if (has_relativeyspeed()) {
      total_size += 1 + 4;
    }
    
    // required float varianceX = 5 [default = -100000];
    if (has_variancex()) {
      total_size += 1 + 4;
    }
    
    // required float varianceY = 6 [default = -100000];
    if (has_variancey()) {
      total_size += 1 + 4;
    }
    
    // required float varianceXspeed = 7 [default = -100000];
    if (has_variancexspeed()) {
      total_size += 1 + 4;
    }
    
    // required float varianceYspeed = 8 [default = -100000];
    if (has_varianceyspeed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relativex()) {
      set_relativex(from.relativex());
    }
    if (from.has_relativey()) {
      set_relativey(from.relativey());
    }
    if (from.has_relativexspeed()) {
      set_relativexspeed(from.relativexspeed());
    }
    if (from.has_relativeyspeed()) {
      set_relativeyspeed(from.relativeyspeed());
    }
    if (from.has_variancex()) {
      set_variancex(from.variancex());
    }
    if (from.has_variancey()) {
      set_variancey(from.variancey());
    }
    if (from.has_variancexspeed()) {
      set_variancexspeed(from.variancexspeed());
    }
    if (from.has_varianceyspeed()) {
      set_varianceyspeed(from.varianceyspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void Ball::Swap(Ball* other) {
  if (other != this) {
    std::swap(relativex_, other->relativex_);
    std::swap(relativey_, other->relativey_);
    std::swap(relativexspeed_, other->relativexspeed_);
    std::swap(relativeyspeed_, other->relativeyspeed_);
    std::swap(variancex_, other->variancex_);
    std::swap(variancey_, other->variancey_);
    std::swap(variancexspeed_, other->variancexspeed_);
    std::swap(varianceyspeed_, other->varianceyspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_descriptor_;
  metadata.reflection = Ball_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnknownObjects::kRelativeXFieldNumber;
const int UnknownObjects::kRelativeYFieldNumber;
const int UnknownObjects::kHeightFieldNumber;
const int UnknownObjects::kRelativeXspeedFieldNumber;
const int UnknownObjects::kRelativeYspeedFieldNumber;
#endif  // !_MSC_VER

UnknownObjects::UnknownObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnknownObjects::InitAsDefaultInstance() {
}

UnknownObjects::UnknownObjects(const UnknownObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownObjects::SharedCtor() {
  _cached_size_ = 0;
  relativex_ = -100000;
  relativey_ = -100000;
  height_ = -100000;
  relativexspeed_ = -100000;
  relativeyspeed_ = -100000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownObjects::~UnknownObjects() {
  SharedDtor();
}

void UnknownObjects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnknownObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnknownObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnknownObjects_descriptor_;
}

const UnknownObjects& UnknownObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

UnknownObjects* UnknownObjects::default_instance_ = NULL;

UnknownObjects* UnknownObjects::New() const {
  return new UnknownObjects;
}

void UnknownObjects::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relativex_ = -100000;
    relativey_ = -100000;
    height_ = -100000;
    relativexspeed_ = -100000;
    relativeyspeed_ = -100000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float relativeX = 1 [default = -100000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativex_)));
          set_has_relativex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_relativeY;
        break;
      }
      
      // optional float relativeY = 2 [default = -100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativey_)));
          set_has_relativey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_height;
        break;
      }
      
      // optional float height = 3 [default = -100000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeXspeed;
        break;
      }
      
      // optional float relativeXspeed = 4 [default = -100000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeXspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativexspeed_)));
          set_has_relativexspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_relativeYspeed;
        break;
      }
      
      // optional float relativeYspeed = 5 [default = -100000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeYspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativeyspeed_)));
          set_has_relativeyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->relativex(), output);
  }
  
  // optional float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relativey(), output);
  }
  
  // optional float height = 3 [default = -100000];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }
  
  // optional float relativeXspeed = 4 [default = -100000];
  if (has_relativexspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativexspeed(), output);
  }
  
  // optional float relativeYspeed = 5 [default = -100000];
  if (has_relativeyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->relativeyspeed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnknownObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float relativeX = 1 [default = -100000];
  if (has_relativex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->relativex(), target);
  }
  
  // optional float relativeY = 2 [default = -100000];
  if (has_relativey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relativey(), target);
  }
  
  // optional float height = 3 [default = -100000];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }
  
  // optional float relativeXspeed = 4 [default = -100000];
  if (has_relativexspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativexspeed(), target);
  }
  
  // optional float relativeYspeed = 5 [default = -100000];
  if (has_relativeyspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->relativeyspeed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnknownObjects::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float relativeX = 1 [default = -100000];
    if (has_relativex()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeY = 2 [default = -100000];
    if (has_relativey()) {
      total_size += 1 + 4;
    }
    
    // optional float height = 3 [default = -100000];
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeXspeed = 4 [default = -100000];
    if (has_relativexspeed()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeYspeed = 5 [default = -100000];
    if (has_relativeyspeed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnknownObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnknownObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnknownObjects::MergeFrom(const UnknownObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relativex()) {
      set_relativex(from.relativex());
    }
    if (from.has_relativey()) {
      set_relativey(from.relativey());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_relativexspeed()) {
      set_relativexspeed(from.relativexspeed());
    }
    if (from.has_relativeyspeed()) {
      set_relativeyspeed(from.relativeyspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownObjects::CopyFrom(const UnknownObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownObjects::IsInitialized() const {
  
  return true;
}

void UnknownObjects::Swap(UnknownObjects* other) {
  if (other != this) {
    std::swap(relativex_, other->relativex_);
    std::swap(relativey_, other->relativey_);
    std::swap(height_, other->height_);
    std::swap(relativexspeed_, other->relativexspeed_);
    std::swap(relativeyspeed_, other->relativeyspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnknownObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnknownObjects_descriptor_;
  metadata.reflection = UnknownObjects_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LocalizationResetMessage_ResetPhase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationResetMessage_ResetPhase_descriptor_;
}
bool LocalizationResetMessage_ResetPhase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::PENALIZED;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::P1;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::P2;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::P3;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::P4;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::ResetPhase_MIN;
const LocalizationResetMessage_ResetPhase LocalizationResetMessage::ResetPhase_MAX;
const int LocalizationResetMessage::ResetPhase_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocalizationResetMessage::kTypeFieldNumber;
const int LocalizationResetMessage::kKickOffFieldNumber;
const int LocalizationResetMessage::kPlayReadyPlayFieldNumber;
#endif  // !_MSC_VER

LocalizationResetMessage::LocalizationResetMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationResetMessage::InitAsDefaultInstance() {
}

LocalizationResetMessage::LocalizationResetMessage(const LocalizationResetMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationResetMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  kickoff_ = false;
  playreadyplay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationResetMessage::~LocalizationResetMessage() {
  SharedDtor();
}

void LocalizationResetMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalizationResetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationResetMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationResetMessage_descriptor_;
}

const LocalizationResetMessage& LocalizationResetMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

LocalizationResetMessage* LocalizationResetMessage::default_instance_ = NULL;

LocalizationResetMessage* LocalizationResetMessage::New() const {
  return new LocalizationResetMessage;
}

void LocalizationResetMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    kickoff_ = false;
    playreadyplay_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationResetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LocalizationResetMessage.ResetPhase type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LocalizationResetMessage_ResetPhase_IsValid(value)) {
            set_type(static_cast< ::LocalizationResetMessage_ResetPhase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kickOff;
        break;
      }
      
      // required bool kickOff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kickoff_)));
          set_has_kickoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playReadyPlay;
        break;
      }
      
      // required bool playReadyPlay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playReadyPlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playreadyplay_)));
          set_has_playreadyplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationResetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LocalizationResetMessage.ResetPhase type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required bool kickOff = 2;
  if (has_kickoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->kickoff(), output);
  }
  
  // required bool playReadyPlay = 3;
  if (has_playreadyplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->playreadyplay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationResetMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LocalizationResetMessage.ResetPhase type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required bool kickOff = 2;
  if (has_kickoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->kickoff(), target);
  }
  
  // required bool playReadyPlay = 3;
  if (has_playreadyplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->playreadyplay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationResetMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LocalizationResetMessage.ResetPhase type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required bool kickOff = 2;
    if (has_kickoff()) {
      total_size += 1 + 1;
    }
    
    // required bool playReadyPlay = 3;
    if (has_playreadyplay()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationResetMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationResetMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationResetMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationResetMessage::MergeFrom(const LocalizationResetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kickoff()) {
      set_kickoff(from.kickoff());
    }
    if (from.has_playreadyplay()) {
      set_playreadyplay(from.playreadyplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationResetMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationResetMessage::CopyFrom(const LocalizationResetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationResetMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LocalizationResetMessage::Swap(LocalizationResetMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(kickoff_, other->kickoff_);
    std::swap(playreadyplay_, other->playreadyplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationResetMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationResetMessage_descriptor_;
  metadata.reflection = LocalizationResetMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationData::kWorldFieldNumber;
const int LocalizationData::kParticlesFieldNumber;
const int LocalizationData::kRobotPositionFieldNumber;
const int LocalizationData::kObservationsFieldNumber;
#endif  // !_MSC_VER

LocalizationData::LocalizationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationData::InitAsDefaultInstance() {
  world_ = const_cast< ::WorldInfo*>(&::WorldInfo::default_instance());
  robotposition_ = const_cast< ::RobotPose*>(&::RobotPose::default_instance());
  observations_ = const_cast< ::ObservationMessage*>(&::ObservationMessage::default_instance());
}

LocalizationData::LocalizationData(const LocalizationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationData::SharedCtor() {
  _cached_size_ = 0;
  world_ = NULL;
  robotposition_ = NULL;
  observations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationData::~LocalizationData() {
  SharedDtor();
}

void LocalizationData::SharedDtor() {
  if (this != default_instance_) {
    delete world_;
    delete robotposition_;
    delete observations_;
  }
}

void LocalizationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationData_descriptor_;
}

const LocalizationData& LocalizationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

LocalizationData* LocalizationData::default_instance_ = NULL;

LocalizationData* LocalizationData::New() const {
  return new LocalizationData;
}

void LocalizationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_world()) {
      if (world_ != NULL) world_->::WorldInfo::Clear();
    }
    if (has_robotposition()) {
      if (robotposition_ != NULL) robotposition_->::RobotPose::Clear();
    }
    if (has_observations()) {
      if (observations_ != NULL) observations_->::ObservationMessage::Clear();
    }
  }
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WorldInfo World = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Particles;
        break;
      }
      
      // repeated .RobotPose Particles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Particles;
        if (input->ExpectTag(26)) goto parse_RobotPosition;
        break;
      }
      
      // required .RobotPose RobotPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RobotPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Observations;
        break;
      }
      
      // required .ObservationMessage Observations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Observations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_observations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .WorldInfo World = 1;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->world(), output);
  }
  
  // repeated .RobotPose Particles = 2;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->particles(i), output);
  }
  
  // required .RobotPose RobotPosition = 3;
  if (has_robotposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robotposition(), output);
  }
  
  // required .ObservationMessage Observations = 4;
  if (has_observations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->observations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .WorldInfo World = 1;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->world(), target);
  }
  
  // repeated .RobotPose Particles = 2;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->particles(i), target);
  }
  
  // required .RobotPose RobotPosition = 3;
  if (has_robotposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->robotposition(), target);
  }
  
  // required .ObservationMessage Observations = 4;
  if (has_observations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->observations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .WorldInfo World = 1;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world());
    }
    
    // required .RobotPose RobotPosition = 3;
    if (has_robotposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotposition());
    }
    
    // required .ObservationMessage Observations = 4;
    if (has_observations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->observations());
    }
    
  }
  // repeated .RobotPose Particles = 2;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationData::MergeFrom(const LocalizationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world()) {
      mutable_world()->::WorldInfo::MergeFrom(from.world());
    }
    if (from.has_robotposition()) {
      mutable_robotposition()->::RobotPose::MergeFrom(from.robotposition());
    }
    if (from.has_observations()) {
      mutable_observations()->::ObservationMessage::MergeFrom(from.observations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationData::CopyFrom(const LocalizationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_world()) {
    if (!this->world().IsInitialized()) return false;
  }
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  if (has_robotposition()) {
    if (!this->robotposition().IsInitialized()) return false;
  }
  if (has_observations()) {
    if (!this->observations().IsInitialized()) return false;
  }
  return true;
}

void LocalizationData::Swap(LocalizationData* other) {
  if (other != this) {
    std::swap(world_, other->world_);
    particles_.Swap(&other->particles_);
    std::swap(robotposition_, other->robotposition_);
    std::swap(observations_, other->observations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationData_descriptor_;
  metadata.reflection = LocalizationData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string header::_default_nextmsgname_("Undef");
#ifndef _MSC_VER
const int header::kNextMsgByteSizeFieldNumber;
const int header::kNextMsgNameFieldNumber;
#endif  // !_MSC_VER

header::header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void header::InitAsDefaultInstance() {
}

header::header(const header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void header::SharedCtor() {
  _cached_size_ = 0;
  nextmsgbytesize_ = -1;
  nextmsgname_ = const_cast< ::std::string*>(&_default_nextmsgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header::~header() {
  SharedDtor();
}

void header::SharedDtor() {
  if (nextmsgname_ != &_default_nextmsgname_) {
    delete nextmsgname_;
  }
  if (this != default_instance_) {
  }
}

void header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_descriptor_;
}

const header& header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

header* header::default_instance_ = NULL;

header* header::New() const {
  return new header;
}

void header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nextmsgbytesize_ = -1;
    if (has_nextmsgname()) {
      if (nextmsgname_ != &_default_nextmsgname_) {
        nextmsgname_->assign(_default_nextmsgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 NextMsgByteSize = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nextmsgbytesize_)));
          set_has_nextmsgbytesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NextMsgName;
        break;
      }
      
      // required bytes NextMsgName = 3 [default = "Undef"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextMsgName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nextmsgname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 NextMsgByteSize = 1 [default = -1];
  if (has_nextmsgbytesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nextmsgbytesize(), output);
  }
  
  // required bytes NextMsgName = 3 [default = "Undef"];
  if (has_nextmsgname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->nextmsgname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 NextMsgByteSize = 1 [default = -1];
  if (has_nextmsgbytesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nextmsgbytesize(), target);
  }
  
  // required bytes NextMsgName = 3 [default = "Undef"];
  if (has_nextmsgname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nextmsgname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 NextMsgByteSize = 1 [default = -1];
    if (has_nextmsgbytesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nextmsgbytesize());
    }
    
    // required bytes NextMsgName = 3 [default = "Undef"];
    if (has_nextmsgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nextmsgname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header::MergeFrom(const header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextmsgbytesize()) {
      set_nextmsgbytesize(from.nextmsgbytesize());
    }
    if (from.has_nextmsgname()) {
      set_nextmsgname(from.nextmsgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header::CopyFrom(const header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void header::Swap(header* other) {
  if (other != this) {
    std::swap(nextmsgbytesize_, other->nextmsgbytesize_);
    std::swap(nextmsgname_, other->nextmsgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_descriptor_;
  metadata.reflection = header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationDataForGUI::kParticlesFieldNumber;
#endif  // !_MSC_VER

LocalizationDataForGUI::LocalizationDataForGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationDataForGUI::InitAsDefaultInstance() {
}

LocalizationDataForGUI::LocalizationDataForGUI(const LocalizationDataForGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationDataForGUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationDataForGUI::~LocalizationDataForGUI() {
  SharedDtor();
}

void LocalizationDataForGUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalizationDataForGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationDataForGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationDataForGUI_descriptor_;
}

const LocalizationDataForGUI& LocalizationDataForGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldInfo_2eproto();  return *default_instance_;
}

LocalizationDataForGUI* LocalizationDataForGUI::default_instance_ = NULL;

LocalizationDataForGUI* LocalizationDataForGUI::New() const {
  return new LocalizationDataForGUI;
}

void LocalizationDataForGUI::Clear() {
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationDataForGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotPose Particles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Particles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationDataForGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RobotPose Particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationDataForGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RobotPose Particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->particles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationDataForGUI::ByteSize() const {
  int total_size = 0;
  
  // repeated .RobotPose Particles = 1;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationDataForGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationDataForGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationDataForGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationDataForGUI::MergeFrom(const LocalizationDataForGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationDataForGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationDataForGUI::CopyFrom(const LocalizationDataForGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationDataForGUI::IsInitialized() const {
  
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void LocalizationDataForGUI::Swap(LocalizationDataForGUI* other) {
  if (other != this) {
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationDataForGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationDataForGUI_descriptor_;
  metadata.reflection = LocalizationDataForGUI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
