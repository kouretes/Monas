// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BehaviorMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActionDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionDescription_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionDescription_URGENCY_LEVELS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BodyControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyControlMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BodyControlMessage_BODYACTIONS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HeadControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadControlMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HeadControlMessage_HEADACTIONS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BehaviorMessages_2eproto() {
  protobuf_AddDesc_BehaviorMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BehaviorMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ActionDescription_descriptor_ = file->message_type(0);
  static const int ActionDescription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, urgency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, phi_),
  };
  ActionDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionDescription_descriptor_,
      ActionDescription::default_instance_,
      ActionDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionDescription));
  ActionDescription_URGENCY_LEVELS_descriptor_ = ActionDescription_descriptor_->enum_type(0);
  BodyControlMessage_descriptor_ = file->message_type(1);
  static const int BodyControlMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyControlMessage, task_),
  };
  BodyControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyControlMessage_descriptor_,
      BodyControlMessage::default_instance_,
      BodyControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyControlMessage));
  BodyControlMessage_BODYACTIONS_descriptor_ = BodyControlMessage_descriptor_->enum_type(0);
  HeadControlMessage_descriptor_ = file->message_type(2);
  static const int HeadControlMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadControlMessage, task_),
  };
  HeadControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadControlMessage_descriptor_,
      HeadControlMessage::default_instance_,
      HeadControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadControlMessage));
  HeadControlMessage_HEADACTIONS_descriptor_ = HeadControlMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BehaviorMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionDescription_descriptor_, &ActionDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyControlMessage_descriptor_, &BodyControlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadControlMessage_descriptor_, &HeadControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BehaviorMessages_2eproto() {
  delete ActionDescription::default_instance_;
  delete ActionDescription_reflection_;
  delete BodyControlMessage::default_instance_;
  delete BodyControlMessage_reflection_;
  delete HeadControlMessage::default_instance_;
  delete HeadControlMessage_reflection_;
}

void protobuf_AddDesc_BehaviorMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_VisionObservations_2eproto();
  ::protobuf_AddDesc_WorldInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BehaviorMessages.proto\032\030VisionObservat"
    "ions.proto\032\017WorldInfo.proto\"\245\001\n\021ActionDe"
    "scription\022\016\n\006action\030\001 \002(\r\022\017\n\007urgency\030\002 \002"
    "(\r\022\023\n\013description\030\003 \002(\t\022\t\n\001x\030\004 \002(\002\022\t\n\001y\030"
    "\005 \002(\002\022\013\n\003phi\030\006 \002(\002\"7\n\016URGENCY_LEVELS\022\013\n\007"
    "SOMEDAY\020\000\022\010\n\004SLOW\020\001\022\016\n\nBEAM_ME_UP\020\002\"\253\001\n\022"
    "BodyControlMessage\022 \n\004task\030\001 \002(\0132\022.Actio"
    "nDescription\"s\n\013BODYACTIONS\022\013\n\007NOTHING\020\000"
    "\022\t\n\005STAND\020\001\022\014\n\010DOACTION\020\002\022\020\n\014BALLAPPROAC"
    "H\020\003\022\030\n\024BALLAPPROACH_SUPPORT\020\004\022\010\n\004GOTO\020\005\022"
    "\010\n\004DEMO\020\006\"\254\001\n\022HeadControlMessage\022 \n\004task"
    "\030\001 \002(\0132\022.ActionDescription\"t\n\013HEADACTION"
    "S\022\013\n\007NOTHING\020\000\022\t\n\005FROWN\020\001\022\033\n\027SCAN_AND_TR"
    "ACK_FOR_BALL\020\002\022\014\n\010LOCALIZE\020\003\022\020\n\014LOCALIZE"
    "_FAR\020\004\022\020\n\014SMART_SELECT\020\005", 584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BehaviorMessages.proto", &protobuf_RegisterTypes);
  ActionDescription::default_instance_ = new ActionDescription();
  BodyControlMessage::default_instance_ = new BodyControlMessage();
  HeadControlMessage::default_instance_ = new HeadControlMessage();
  ActionDescription::default_instance_->InitAsDefaultInstance();
  BodyControlMessage::default_instance_->InitAsDefaultInstance();
  HeadControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BehaviorMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BehaviorMessages_2eproto {
  StaticDescriptorInitializer_BehaviorMessages_2eproto() {
    protobuf_AddDesc_BehaviorMessages_2eproto();
  }
} static_descriptor_initializer_BehaviorMessages_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionDescription_URGENCY_LEVELS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionDescription_URGENCY_LEVELS_descriptor_;
}
bool ActionDescription_URGENCY_LEVELS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActionDescription_URGENCY_LEVELS ActionDescription::SOMEDAY;
const ActionDescription_URGENCY_LEVELS ActionDescription::SLOW;
const ActionDescription_URGENCY_LEVELS ActionDescription::BEAM_ME_UP;
const ActionDescription_URGENCY_LEVELS ActionDescription::URGENCY_LEVELS_MIN;
const ActionDescription_URGENCY_LEVELS ActionDescription::URGENCY_LEVELS_MAX;
const int ActionDescription::URGENCY_LEVELS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ActionDescription::kActionFieldNumber;
const int ActionDescription::kUrgencyFieldNumber;
const int ActionDescription::kDescriptionFieldNumber;
const int ActionDescription::kXFieldNumber;
const int ActionDescription::kYFieldNumber;
const int ActionDescription::kPhiFieldNumber;
#endif  // !_MSC_VER

ActionDescription::ActionDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionDescription::InitAsDefaultInstance() {
}

ActionDescription::ActionDescription(const ActionDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionDescription::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  urgency_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionDescription::~ActionDescription() {
  SharedDtor();
}

void ActionDescription::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ActionDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionDescription_descriptor_;
}

const ActionDescription& ActionDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

ActionDescription* ActionDescription::default_instance_ = NULL;

ActionDescription* ActionDescription::New() const {
  return new ActionDescription;
}

void ActionDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0u;
    urgency_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    phi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_urgency;
        break;
      }
      
      // required uint32 urgency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_urgency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urgency_)));
          set_has_urgency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // required string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }
      
      // required float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }
      
      // required float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_phi;
        break;
      }
      
      // required float phi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }
  
  // required uint32 urgency = 2;
  if (has_urgency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->urgency(), output);
  }
  
  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }
  
  // required float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }
  
  // required float phi = 6;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->phi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action(), target);
  }
  
  // required uint32 urgency = 2;
  if (has_urgency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->urgency(), target);
  }
  
  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }
  
  // required float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }
  
  // required float phi = 6;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->phi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }
    
    // required uint32 urgency = 2;
    if (has_urgency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urgency());
    }
    
    // required string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float phi = 6;
    if (has_phi()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionDescription::MergeFrom(const ActionDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_urgency()) {
      set_urgency(from.urgency());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionDescription::CopyFrom(const ActionDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ActionDescription::Swap(ActionDescription* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(urgency_, other->urgency_);
    std::swap(description_, other->description_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(phi_, other->phi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionDescription_descriptor_;
  metadata.reflection = ActionDescription_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BodyControlMessage_BODYACTIONS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyControlMessage_BODYACTIONS_descriptor_;
}
bool BodyControlMessage_BODYACTIONS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BodyControlMessage_BODYACTIONS BodyControlMessage::NOTHING;
const BodyControlMessage_BODYACTIONS BodyControlMessage::STAND;
const BodyControlMessage_BODYACTIONS BodyControlMessage::DOACTION;
const BodyControlMessage_BODYACTIONS BodyControlMessage::BALLAPPROACH;
const BodyControlMessage_BODYACTIONS BodyControlMessage::BALLAPPROACH_SUPPORT;
const BodyControlMessage_BODYACTIONS BodyControlMessage::GOTO;
const BodyControlMessage_BODYACTIONS BodyControlMessage::DEMO;
const BodyControlMessage_BODYACTIONS BodyControlMessage::BODYACTIONS_MIN;
const BodyControlMessage_BODYACTIONS BodyControlMessage::BODYACTIONS_MAX;
const int BodyControlMessage::BODYACTIONS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BodyControlMessage::kTaskFieldNumber;
#endif  // !_MSC_VER

BodyControlMessage::BodyControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BodyControlMessage::InitAsDefaultInstance() {
  task_ = const_cast< ::ActionDescription*>(&::ActionDescription::default_instance());
}

BodyControlMessage::BodyControlMessage(const BodyControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BodyControlMessage::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyControlMessage::~BodyControlMessage() {
  SharedDtor();
}

void BodyControlMessage::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void BodyControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyControlMessage_descriptor_;
}

const BodyControlMessage& BodyControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

BodyControlMessage* BodyControlMessage::default_instance_ = NULL;

BodyControlMessage* BodyControlMessage::New() const {
  return new BodyControlMessage;
}

void BodyControlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::ActionDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ActionDescription task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ActionDescription task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BodyControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ActionDescription task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BodyControlMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ActionDescription task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyControlMessage::MergeFrom(const BodyControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::ActionDescription::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyControlMessage::CopyFrom(const BodyControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void BodyControlMessage::Swap(BodyControlMessage* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyControlMessage_descriptor_;
  metadata.reflection = BodyControlMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HeadControlMessage_HEADACTIONS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadControlMessage_HEADACTIONS_descriptor_;
}
bool HeadControlMessage_HEADACTIONS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HeadControlMessage_HEADACTIONS HeadControlMessage::NOTHING;
const HeadControlMessage_HEADACTIONS HeadControlMessage::FROWN;
const HeadControlMessage_HEADACTIONS HeadControlMessage::SCAN_AND_TRACK_FOR_BALL;
const HeadControlMessage_HEADACTIONS HeadControlMessage::LOCALIZE;
const HeadControlMessage_HEADACTIONS HeadControlMessage::LOCALIZE_FAR;
const HeadControlMessage_HEADACTIONS HeadControlMessage::SMART_SELECT;
const HeadControlMessage_HEADACTIONS HeadControlMessage::HEADACTIONS_MIN;
const HeadControlMessage_HEADACTIONS HeadControlMessage::HEADACTIONS_MAX;
const int HeadControlMessage::HEADACTIONS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HeadControlMessage::kTaskFieldNumber;
#endif  // !_MSC_VER

HeadControlMessage::HeadControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadControlMessage::InitAsDefaultInstance() {
  task_ = const_cast< ::ActionDescription*>(&::ActionDescription::default_instance());
}

HeadControlMessage::HeadControlMessage(const HeadControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadControlMessage::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadControlMessage::~HeadControlMessage() {
  SharedDtor();
}

void HeadControlMessage::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void HeadControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadControlMessage_descriptor_;
}

const HeadControlMessage& HeadControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

HeadControlMessage* HeadControlMessage::default_instance_ = NULL;

HeadControlMessage* HeadControlMessage::New() const {
  return new HeadControlMessage;
}

void HeadControlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::ActionDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ActionDescription task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ActionDescription task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ActionDescription task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadControlMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ActionDescription task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadControlMessage::MergeFrom(const HeadControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::ActionDescription::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadControlMessage::CopyFrom(const HeadControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void HeadControlMessage::Swap(HeadControlMessage* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadControlMessage_descriptor_;
  metadata.reflection = HeadControlMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
