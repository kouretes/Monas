// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BehaviorMessages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KickOffMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOffMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BToHeadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BToHeadMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadToBMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadToBMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerNumberMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerNumberMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnToPositionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnToPositionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BehaviorMessages_2eproto() {
  protobuf_AddDesc_BehaviorMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BehaviorMessages.proto");
  GOOGLE_CHECK(file != NULL);
  KickOffMessage_descriptor_ = file->message_type(0);
  static const int KickOffMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffMessage, kickoff_),
  };
  KickOffMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOffMessage_descriptor_,
      KickOffMessage::default_instance_,
      KickOffMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOffMessage));
  BToHeadMessage_descriptor_ = file->message_type(1);
  static const int BToHeadMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BToHeadMessage, headaction_),
  };
  BToHeadMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BToHeadMessage_descriptor_,
      BToHeadMessage::default_instance_,
      BToHeadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BToHeadMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BToHeadMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BToHeadMessage));
  HeadToBMessage_descriptor_ = file->message_type(2);
  static const int HeadToBMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadToBMessage, ballfound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadToBMessage, calibrated_),
  };
  HeadToBMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadToBMessage_descriptor_,
      HeadToBMessage::default_instance_,
      HeadToBMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadToBMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadToBMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadToBMessage));
  ScanMessage_descriptor_ = file->message_type(3);
  static const int ScanMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMessage, scancompleted_),
  };
  ScanMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanMessage_descriptor_,
      ScanMessage::default_instance_,
      ScanMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanMessage));
  PlayerNumberMessage_descriptor_ = file->message_type(4);
  static const int PlayerNumberMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNumberMessage, player_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNumberMessage, team_side_),
  };
  PlayerNumberMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerNumberMessage_descriptor_,
      PlayerNumberMessage::default_instance_,
      PlayerNumberMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNumberMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNumberMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerNumberMessage));
  PositionMessage_descriptor_ = file->message_type(5);
  static const int PositionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionMessage, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionMessage, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionMessage, theta_),
  };
  PositionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionMessage_descriptor_,
      PositionMessage::default_instance_,
      PositionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionMessage));
  ReturnToPositionMessage_descriptor_ = file->message_type(6);
  static const int ReturnToPositionMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnToPositionMessage, goalietopos_),
  };
  ReturnToPositionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnToPositionMessage_descriptor_,
      ReturnToPositionMessage::default_instance_,
      ReturnToPositionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnToPositionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnToPositionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnToPositionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BehaviorMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOffMessage_descriptor_, &KickOffMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BToHeadMessage_descriptor_, &BToHeadMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadToBMessage_descriptor_, &HeadToBMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanMessage_descriptor_, &ScanMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerNumberMessage_descriptor_, &PlayerNumberMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionMessage_descriptor_, &PositionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnToPositionMessage_descriptor_, &ReturnToPositionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BehaviorMessages_2eproto() {
  delete KickOffMessage::default_instance_;
  delete KickOffMessage_reflection_;
  delete BToHeadMessage::default_instance_;
  delete BToHeadMessage_reflection_;
  delete HeadToBMessage::default_instance_;
  delete HeadToBMessage_reflection_;
  delete ScanMessage::default_instance_;
  delete ScanMessage_reflection_;
  delete PlayerNumberMessage::default_instance_;
  delete PlayerNumberMessage_reflection_;
  delete PositionMessage::default_instance_;
  delete PositionMessage_reflection_;
  delete ReturnToPositionMessage::default_instance_;
  delete ReturnToPositionMessage_reflection_;
}

void protobuf_AddDesc_BehaviorMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BehaviorMessages.proto\"(\n\016KickOffMessa"
    "ge\022\026\n\007kickOff\030\001 \002(\010:\005false\"\'\n\016BToHeadMes"
    "sage\022\025\n\nheadaction\030\001 \002(\005:\0010\"=\n\016HeadToBMe"
    "ssage\022\024\n\tballfound\030\001 \002(\005:\0010\022\025\n\ncalibrate"
    "d\030\002 \002(\005:\0010\"+\n\013ScanMessage\022\034\n\rscancomplet"
    "ed\030\001 \002(\010:\005false\"E\n\023PlayerNumberMessage\022\030"
    "\n\rplayer_number\030\001 \002(\005:\0012\022\024\n\tteam_side\030\002 "
    "\002(\005:\0011\"G\n\017PositionMessage\022\020\n\004posX\030\001 \002(\002:"
    "\00270\022\020\n\004posY\030\002 \002(\002:\00270\022\020\n\005theta\030\003 \002(\002:\0011\""
    "5\n\027ReturnToPositionMessage\022\032\n\013goalieToPo"
    "s\030\001 \002(\010:\005false", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BehaviorMessages.proto", &protobuf_RegisterTypes);
  KickOffMessage::default_instance_ = new KickOffMessage();
  BToHeadMessage::default_instance_ = new BToHeadMessage();
  HeadToBMessage::default_instance_ = new HeadToBMessage();
  ScanMessage::default_instance_ = new ScanMessage();
  PlayerNumberMessage::default_instance_ = new PlayerNumberMessage();
  PositionMessage::default_instance_ = new PositionMessage();
  ReturnToPositionMessage::default_instance_ = new ReturnToPositionMessage();
  KickOffMessage::default_instance_->InitAsDefaultInstance();
  BToHeadMessage::default_instance_->InitAsDefaultInstance();
  HeadToBMessage::default_instance_->InitAsDefaultInstance();
  ScanMessage::default_instance_->InitAsDefaultInstance();
  PlayerNumberMessage::default_instance_->InitAsDefaultInstance();
  PositionMessage::default_instance_->InitAsDefaultInstance();
  ReturnToPositionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BehaviorMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BehaviorMessages_2eproto {
  StaticDescriptorInitializer_BehaviorMessages_2eproto() {
    protobuf_AddDesc_BehaviorMessages_2eproto();
  }
} static_descriptor_initializer_BehaviorMessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KickOffMessage::kKickOffFieldNumber;
#endif  // !_MSC_VER

KickOffMessage::KickOffMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOffMessage::InitAsDefaultInstance() {
}

KickOffMessage::KickOffMessage(const KickOffMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOffMessage::SharedCtor() {
  _cached_size_ = 0;
  kickoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOffMessage::~KickOffMessage() {
  SharedDtor();
}

void KickOffMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOffMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOffMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOffMessage_descriptor_;
}

const KickOffMessage& KickOffMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

KickOffMessage* KickOffMessage::default_instance_ = NULL;

KickOffMessage* KickOffMessage::New() const {
  return new KickOffMessage;
}

void KickOffMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kickoff_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOffMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool kickOff = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kickoff_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOffMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool kickOff = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->kickoff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOffMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool kickOff = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->kickoff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOffMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool kickOff = 1 [default = false];
    if (has_kickoff()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOffMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOffMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOffMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOffMessage::MergeFrom(const KickOffMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_kickoff(from.kickoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOffMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOffMessage::CopyFrom(const KickOffMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOffMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KickOffMessage::Swap(KickOffMessage* other) {
  if (other != this) {
    std::swap(kickoff_, other->kickoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOffMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOffMessage_descriptor_;
  metadata.reflection = KickOffMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BToHeadMessage::kHeadactionFieldNumber;
#endif  // !_MSC_VER

BToHeadMessage::BToHeadMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BToHeadMessage::InitAsDefaultInstance() {
}

BToHeadMessage::BToHeadMessage(const BToHeadMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BToHeadMessage::SharedCtor() {
  _cached_size_ = 0;
  headaction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BToHeadMessage::~BToHeadMessage() {
  SharedDtor();
}

void BToHeadMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BToHeadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BToHeadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BToHeadMessage_descriptor_;
}

const BToHeadMessage& BToHeadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

BToHeadMessage* BToHeadMessage::default_instance_ = NULL;

BToHeadMessage* BToHeadMessage::New() const {
  return new BToHeadMessage;
}

void BToHeadMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    headaction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BToHeadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 headaction = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headaction_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BToHeadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 headaction = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->headaction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BToHeadMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 headaction = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->headaction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BToHeadMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 headaction = 1 [default = 0];
    if (has_headaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headaction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BToHeadMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BToHeadMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BToHeadMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BToHeadMessage::MergeFrom(const BToHeadMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_headaction(from.headaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BToHeadMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BToHeadMessage::CopyFrom(const BToHeadMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BToHeadMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BToHeadMessage::Swap(BToHeadMessage* other) {
  if (other != this) {
    std::swap(headaction_, other->headaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BToHeadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BToHeadMessage_descriptor_;
  metadata.reflection = BToHeadMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeadToBMessage::kBallfoundFieldNumber;
const int HeadToBMessage::kCalibratedFieldNumber;
#endif  // !_MSC_VER

HeadToBMessage::HeadToBMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadToBMessage::InitAsDefaultInstance() {
}

HeadToBMessage::HeadToBMessage(const HeadToBMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadToBMessage::SharedCtor() {
  _cached_size_ = 0;
  ballfound_ = 0;
  calibrated_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadToBMessage::~HeadToBMessage() {
  SharedDtor();
}

void HeadToBMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadToBMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadToBMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadToBMessage_descriptor_;
}

const HeadToBMessage& HeadToBMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

HeadToBMessage* HeadToBMessage::default_instance_ = NULL;

HeadToBMessage* HeadToBMessage::New() const {
  return new HeadToBMessage;
}

void HeadToBMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ballfound_ = 0;
    calibrated_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadToBMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ballfound = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballfound_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_calibrated;
        break;
      }
      
      // required int32 calibrated = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibrated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calibrated_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadToBMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ballfound = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ballfound(), output);
  }
  
  // required int32 calibrated = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->calibrated(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadToBMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ballfound = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ballfound(), target);
  }
  
  // required int32 calibrated = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->calibrated(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadToBMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ballfound = 1 [default = 0];
    if (has_ballfound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ballfound());
    }
    
    // required int32 calibrated = 2 [default = 0];
    if (has_calibrated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calibrated());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadToBMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadToBMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadToBMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadToBMessage::MergeFrom(const HeadToBMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ballfound(from.ballfound());
    }
    if (from._has_bit(1)) {
      set_calibrated(from.calibrated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadToBMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadToBMessage::CopyFrom(const HeadToBMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadToBMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HeadToBMessage::Swap(HeadToBMessage* other) {
  if (other != this) {
    std::swap(ballfound_, other->ballfound_);
    std::swap(calibrated_, other->calibrated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadToBMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadToBMessage_descriptor_;
  metadata.reflection = HeadToBMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanMessage::kScancompletedFieldNumber;
#endif  // !_MSC_VER

ScanMessage::ScanMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanMessage::InitAsDefaultInstance() {
}

ScanMessage::ScanMessage(const ScanMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanMessage::SharedCtor() {
  _cached_size_ = 0;
  scancompleted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanMessage::~ScanMessage() {
  SharedDtor();
}

void ScanMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanMessage_descriptor_;
}

const ScanMessage& ScanMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

ScanMessage* ScanMessage::default_instance_ = NULL;

ScanMessage* ScanMessage::New() const {
  return new ScanMessage;
}

void ScanMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scancompleted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool scancompleted = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scancompleted_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool scancompleted = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->scancompleted(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool scancompleted = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->scancompleted(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool scancompleted = 1 [default = false];
    if (has_scancompleted()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanMessage::MergeFrom(const ScanMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_scancompleted(from.scancompleted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanMessage::CopyFrom(const ScanMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ScanMessage::Swap(ScanMessage* other) {
  if (other != this) {
    std::swap(scancompleted_, other->scancompleted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanMessage_descriptor_;
  metadata.reflection = ScanMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerNumberMessage::kPlayerNumberFieldNumber;
const int PlayerNumberMessage::kTeamSideFieldNumber;
#endif  // !_MSC_VER

PlayerNumberMessage::PlayerNumberMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerNumberMessage::InitAsDefaultInstance() {
}

PlayerNumberMessage::PlayerNumberMessage(const PlayerNumberMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerNumberMessage::SharedCtor() {
  _cached_size_ = 0;
  player_number_ = 2;
  team_side_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerNumberMessage::~PlayerNumberMessage() {
  SharedDtor();
}

void PlayerNumberMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerNumberMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerNumberMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerNumberMessage_descriptor_;
}

const PlayerNumberMessage& PlayerNumberMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

PlayerNumberMessage* PlayerNumberMessage::default_instance_ = NULL;

PlayerNumberMessage* PlayerNumberMessage::New() const {
  return new PlayerNumberMessage;
}

void PlayerNumberMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_number_ = 2;
    team_side_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerNumberMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_number = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_number_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_side;
        break;
      }
      
      // required int32 team_side = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_side_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerNumberMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_number = 1 [default = 2];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_number(), output);
  }
  
  // required int32 team_side = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_side(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerNumberMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_number = 1 [default = 2];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_number(), target);
  }
  
  // required int32 team_side = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_side(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerNumberMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_number = 1 [default = 2];
    if (has_player_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_number());
    }
    
    // required int32 team_side = 2 [default = 1];
    if (has_team_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_side());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerNumberMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerNumberMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerNumberMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerNumberMessage::MergeFrom(const PlayerNumberMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_player_number(from.player_number());
    }
    if (from._has_bit(1)) {
      set_team_side(from.team_side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerNumberMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerNumberMessage::CopyFrom(const PlayerNumberMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerNumberMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerNumberMessage::Swap(PlayerNumberMessage* other) {
  if (other != this) {
    std::swap(player_number_, other->player_number_);
    std::swap(team_side_, other->team_side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerNumberMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerNumberMessage_descriptor_;
  metadata.reflection = PlayerNumberMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionMessage::kPosXFieldNumber;
const int PositionMessage::kPosYFieldNumber;
const int PositionMessage::kThetaFieldNumber;
#endif  // !_MSC_VER

PositionMessage::PositionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionMessage::InitAsDefaultInstance() {
}

PositionMessage::PositionMessage(const PositionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionMessage::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 70;
  posy_ = 70;
  theta_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionMessage::~PositionMessage() {
  SharedDtor();
}

void PositionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionMessage_descriptor_;
}

const PositionMessage& PositionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

PositionMessage* PositionMessage::default_instance_ = NULL;

PositionMessage* PositionMessage::New() const {
  return new PositionMessage;
}

void PositionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 70;
    posy_ = 70;
    theta_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float posX = 1 [default = 70];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posY;
        break;
      }
      
      // required float posY = 2 [default = 70];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_theta;
        break;
      }
      
      // required float theta = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float posX = 1 [default = 70];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }
  
  // required float posY = 2 [default = 70];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }
  
  // required float theta = 3 [default = 1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->theta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float posX = 1 [default = 70];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }
  
  // required float posY = 2 [default = 70];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }
  
  // required float theta = 3 [default = 1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->theta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float posX = 1 [default = 70];
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // required float posY = 2 [default = 70];
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // required float theta = 3 [default = 1];
    if (has_theta()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionMessage::MergeFrom(const PositionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_posx(from.posx());
    }
    if (from._has_bit(1)) {
      set_posy(from.posy());
    }
    if (from._has_bit(2)) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionMessage::CopyFrom(const PositionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PositionMessage::Swap(PositionMessage* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionMessage_descriptor_;
  metadata.reflection = PositionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnToPositionMessage::kGoalieToPosFieldNumber;
#endif  // !_MSC_VER

ReturnToPositionMessage::ReturnToPositionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnToPositionMessage::InitAsDefaultInstance() {
}

ReturnToPositionMessage::ReturnToPositionMessage(const ReturnToPositionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnToPositionMessage::SharedCtor() {
  _cached_size_ = 0;
  goalietopos_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnToPositionMessage::~ReturnToPositionMessage() {
  SharedDtor();
}

void ReturnToPositionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnToPositionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnToPositionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnToPositionMessage_descriptor_;
}

const ReturnToPositionMessage& ReturnToPositionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BehaviorMessages_2eproto();  return *default_instance_;
}

ReturnToPositionMessage* ReturnToPositionMessage::default_instance_ = NULL;

ReturnToPositionMessage* ReturnToPositionMessage::New() const {
  return new ReturnToPositionMessage;
}

void ReturnToPositionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goalietopos_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnToPositionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool goalieToPos = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &goalietopos_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnToPositionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool goalieToPos = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->goalietopos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnToPositionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool goalieToPos = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->goalietopos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnToPositionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool goalieToPos = 1 [default = false];
    if (has_goalietopos()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnToPositionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnToPositionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnToPositionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnToPositionMessage::MergeFrom(const ReturnToPositionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_goalietopos(from.goalietopos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnToPositionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnToPositionMessage::CopyFrom(const ReturnToPositionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnToPositionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReturnToPositionMessage::Swap(ReturnToPositionMessage* other) {
  if (other != this) {
    std::swap(goalietopos_, other->goalietopos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnToPositionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnToPositionMessage_descriptor_;
  metadata.reflection = ReturnToPositionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
