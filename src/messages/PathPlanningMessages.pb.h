// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PathPlanningMessages.proto

#ifndef PROTOBUF_PathPlanningMessages_2eproto__INCLUDED
#define PROTOBUF_PathPlanningMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PathPlanningMessages_2eproto();
void protobuf_AssignDesc_PathPlanningMessages_2eproto();
void protobuf_ShutdownFile_PathPlanningMessages_2eproto();

class ObstacleMessage;
class VisionObstacleMessage;
class ObstacleMessageArray;
class PathPlanningRequestMessage;
class GridInfo;

// ===================================================================

class ObstacleMessage : public ::google::protobuf::Message {
 public:
  ObstacleMessage();
  virtual ~ObstacleMessage();
  
  ObstacleMessage(const ObstacleMessage& from);
  
  inline ObstacleMessage& operator=(const ObstacleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleMessage& default_instance();
  
  void Swap(ObstacleMessage* other);
  
  // implements Message ----------------------------------------------
  
  ObstacleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleMessage& from);
  void MergeFrom(const ObstacleMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 direction = 1 [default = -1];
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 1;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);
  
  // required float distance = 2 [default = 0];
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 2;
  inline float distance() const;
  inline void set_distance(float value);
  
  // required float certainty = 3 [default = 0];
  inline bool has_certainty() const;
  inline void clear_certainty();
  static const int kCertaintyFieldNumber = 3;
  inline float certainty() const;
  inline void set_certainty(float value);
  
  // @@protoc_insertion_point(class_scope:ObstacleMessage)
 private:
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_certainty();
  inline void clear_has_certainty();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 direction_;
  float distance_;
  float certainty_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PathPlanningMessages_2eproto();
  friend void protobuf_AssignDesc_PathPlanningMessages_2eproto();
  friend void protobuf_ShutdownFile_PathPlanningMessages_2eproto();
  
  void InitAsDefaultInstance();
  static ObstacleMessage* default_instance_;
};
// -------------------------------------------------------------------

class VisionObstacleMessage : public ::google::protobuf::Message {
 public:
  VisionObstacleMessage();
  virtual ~VisionObstacleMessage();
  
  VisionObstacleMessage(const VisionObstacleMessage& from);
  
  inline VisionObstacleMessage& operator=(const VisionObstacleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisionObstacleMessage& default_instance();
  
  void Swap(VisionObstacleMessage* other);
  
  // implements Message ----------------------------------------------
  
  VisionObstacleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisionObstacleMessage& from);
  void MergeFrom(const VisionObstacleMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ObstacleMessage obstacles = 1;
  inline int obstacles_size() const;
  inline void clear_obstacles();
  static const int kObstaclesFieldNumber = 1;
  inline const ::ObstacleMessage& obstacles(int index) const;
  inline ::ObstacleMessage* mutable_obstacles(int index);
  inline ::ObstacleMessage* add_obstacles();
  inline const ::google::protobuf::RepeatedPtrField< ::ObstacleMessage >&
      obstacles() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObstacleMessage >*
      mutable_obstacles();
  
  // @@protoc_insertion_point(class_scope:VisionObstacleMessage)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ObstacleMessage > obstacles_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PathPlanningMessages_2eproto();
  friend void protobuf_AssignDesc_PathPlanningMessages_2eproto();
  friend void protobuf_ShutdownFile_PathPlanningMessages_2eproto();
  
  void InitAsDefaultInstance();
  static VisionObstacleMessage* default_instance_;
};
// -------------------------------------------------------------------

class ObstacleMessageArray : public ::google::protobuf::Message {
 public:
  ObstacleMessageArray();
  virtual ~ObstacleMessageArray();
  
  ObstacleMessageArray(const ObstacleMessageArray& from);
  
  inline ObstacleMessageArray& operator=(const ObstacleMessageArray& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleMessageArray& default_instance();
  
  void Swap(ObstacleMessageArray* other);
  
  // implements Message ----------------------------------------------
  
  ObstacleMessageArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleMessageArray& from);
  void MergeFrom(const ObstacleMessageArray& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 direction = 1;
  inline int direction_size() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 1;
  inline ::google::protobuf::int32 direction(int index) const;
  inline void set_direction(int index, ::google::protobuf::int32 value);
  inline void add_direction(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      direction() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_direction();
  
  // repeated float distance = 2;
  inline int distance_size() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 2;
  inline float distance(int index) const;
  inline void set_distance(int index, float value);
  inline void add_distance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      distance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_distance();
  
  // repeated float certainty = 3;
  inline int certainty_size() const;
  inline void clear_certainty();
  static const int kCertaintyFieldNumber = 3;
  inline float certainty(int index) const;
  inline void set_certainty(int index, float value);
  inline void add_certainty(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      certainty() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_certainty();
  
  // @@protoc_insertion_point(class_scope:ObstacleMessageArray)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > direction_;
  ::google::protobuf::RepeatedField< float > distance_;
  ::google::protobuf::RepeatedField< float > certainty_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PathPlanningMessages_2eproto();
  friend void protobuf_AssignDesc_PathPlanningMessages_2eproto();
  friend void protobuf_ShutdownFile_PathPlanningMessages_2eproto();
  
  void InitAsDefaultInstance();
  static ObstacleMessageArray* default_instance_;
};
// -------------------------------------------------------------------

class PathPlanningRequestMessage : public ::google::protobuf::Message {
 public:
  PathPlanningRequestMessage();
  virtual ~PathPlanningRequestMessage();
  
  PathPlanningRequestMessage(const PathPlanningRequestMessage& from);
  
  inline PathPlanningRequestMessage& operator=(const PathPlanningRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPlanningRequestMessage& default_instance();
  
  void Swap(PathPlanningRequestMessage* other);
  
  // implements Message ----------------------------------------------
  
  PathPlanningRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathPlanningRequestMessage& from);
  void MergeFrom(const PathPlanningRequestMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float TargetX = 1;
  inline bool has_targetx() const;
  inline void clear_targetx();
  static const int kTargetXFieldNumber = 1;
  inline float targetx() const;
  inline void set_targetx(float value);
  
  // required float TargetY = 2;
  inline bool has_targety() const;
  inline void clear_targety();
  static const int kTargetYFieldNumber = 2;
  inline float targety() const;
  inline void set_targety(float value);
  
  // required float TargetOrientation = 3;
  inline bool has_targetorientation() const;
  inline void clear_targetorientation();
  static const int kTargetOrientationFieldNumber = 3;
  inline float targetorientation() const;
  inline void set_targetorientation(float value);
  
  // required bool ForceUseOfSmallMap = 4;
  inline bool has_forceuseofsmallmap() const;
  inline void clear_forceuseofsmallmap();
  static const int kForceUseOfSmallMapFieldNumber = 4;
  inline bool forceuseofsmallmap() const;
  inline void set_forceuseofsmallmap(bool value);
  
  // @@protoc_insertion_point(class_scope:PathPlanningRequestMessage)
 private:
  inline void set_has_targetx();
  inline void clear_has_targetx();
  inline void set_has_targety();
  inline void clear_has_targety();
  inline void set_has_targetorientation();
  inline void clear_has_targetorientation();
  inline void set_has_forceuseofsmallmap();
  inline void clear_has_forceuseofsmallmap();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float targetx_;
  float targety_;
  float targetorientation_;
  bool forceuseofsmallmap_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PathPlanningMessages_2eproto();
  friend void protobuf_AssignDesc_PathPlanningMessages_2eproto();
  friend void protobuf_ShutdownFile_PathPlanningMessages_2eproto();
  
  void InitAsDefaultInstance();
  static PathPlanningRequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class GridInfo : public ::google::protobuf::Message {
 public:
  GridInfo();
  virtual ~GridInfo();
  
  GridInfo(const GridInfo& from);
  
  inline GridInfo& operator=(const GridInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridInfo& default_instance();
  
  void Swap(GridInfo* other);
  
  // implements Message ----------------------------------------------
  
  GridInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridInfo& from);
  void MergeFrom(const GridInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float CellsRadius = 1;
  inline bool has_cellsradius() const;
  inline void clear_cellsradius();
  static const int kCellsRadiusFieldNumber = 1;
  inline float cellsradius() const;
  inline void set_cellsradius(float value);
  
  // required float CellsRing = 2;
  inline bool has_cellsring() const;
  inline void clear_cellsring();
  static const int kCellsRingFieldNumber = 2;
  inline float cellsring() const;
  inline void set_cellsring(float value);
  
  // required float RealGridLength = 3;
  inline bool has_realgridlength() const;
  inline void clear_realgridlength();
  static const int kRealGridLengthFieldNumber = 3;
  inline float realgridlength() const;
  inline void set_realgridlength(float value);
  
  // repeated float GridCells = 4;
  inline int gridcells_size() const;
  inline void clear_gridcells();
  static const int kGridCellsFieldNumber = 4;
  inline float gridcells(int index) const;
  inline void set_gridcells(int index, float value);
  inline void add_gridcells(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      gridcells() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_gridcells();
  
  // required bool UsingSmallMap = 5;
  inline bool has_usingsmallmap() const;
  inline void clear_usingsmallmap();
  static const int kUsingSmallMapFieldNumber = 5;
  inline bool usingsmallmap() const;
  inline void set_usingsmallmap(bool value);
  
  // required float PathLength = 6;
  inline bool has_pathlength() const;
  inline void clear_pathlength();
  static const int kPathLengthFieldNumber = 6;
  inline float pathlength() const;
  inline void set_pathlength(float value);
  
  // repeated int32 PathStepsRing = 7;
  inline int pathstepsring_size() const;
  inline void clear_pathstepsring();
  static const int kPathStepsRingFieldNumber = 7;
  inline ::google::protobuf::int32 pathstepsring(int index) const;
  inline void set_pathstepsring(int index, ::google::protobuf::int32 value);
  inline void add_pathstepsring(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pathstepsring() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pathstepsring();
  
  // repeated int32 PathStepsSector = 8;
  inline int pathstepssector_size() const;
  inline void clear_pathstepssector();
  static const int kPathStepsSectorFieldNumber = 8;
  inline ::google::protobuf::int32 pathstepssector(int index) const;
  inline void set_pathstepssector(int index, ::google::protobuf::int32 value);
  inline void add_pathstepssector(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pathstepssector() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pathstepssector();
  
  // repeated int32 PathStepsOrientation = 9;
  inline int pathstepsorientation_size() const;
  inline void clear_pathstepsorientation();
  static const int kPathStepsOrientationFieldNumber = 9;
  inline ::google::protobuf::int32 pathstepsorientation(int index) const;
  inline void set_pathstepsorientation(int index, ::google::protobuf::int32 value);
  inline void add_pathstepsorientation(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pathstepsorientation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pathstepsorientation();
  
  // optional int32 TargetRing = 10;
  inline bool has_targetring() const;
  inline void clear_targetring();
  static const int kTargetRingFieldNumber = 10;
  inline ::google::protobuf::int32 targetring() const;
  inline void set_targetring(::google::protobuf::int32 value);
  
  // optional int32 TargetSector = 11;
  inline bool has_targetsector() const;
  inline void clear_targetsector();
  static const int kTargetSectorFieldNumber = 11;
  inline ::google::protobuf::int32 targetsector() const;
  inline void set_targetsector(::google::protobuf::int32 value);
  
  // optional float TargetOrientation = 12;
  inline bool has_targetorientation() const;
  inline void clear_targetorientation();
  static const int kTargetOrientationFieldNumber = 12;
  inline float targetorientation() const;
  inline void set_targetorientation(float value);
  
  // @@protoc_insertion_point(class_scope:GridInfo)
 private:
  inline void set_has_cellsradius();
  inline void clear_has_cellsradius();
  inline void set_has_cellsring();
  inline void clear_has_cellsring();
  inline void set_has_realgridlength();
  inline void clear_has_realgridlength();
  inline void set_has_usingsmallmap();
  inline void clear_has_usingsmallmap();
  inline void set_has_pathlength();
  inline void clear_has_pathlength();
  inline void set_has_targetring();
  inline void clear_has_targetring();
  inline void set_has_targetsector();
  inline void clear_has_targetsector();
  inline void set_has_targetorientation();
  inline void clear_has_targetorientation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float cellsradius_;
  float cellsring_;
  ::google::protobuf::RepeatedField< float > gridcells_;
  float realgridlength_;
  bool usingsmallmap_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pathstepsring_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pathstepssector_;
  float pathlength_;
  ::google::protobuf::int32 targetring_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pathstepsorientation_;
  ::google::protobuf::int32 targetsector_;
  float targetorientation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_PathPlanningMessages_2eproto();
  friend void protobuf_AssignDesc_PathPlanningMessages_2eproto();
  friend void protobuf_ShutdownFile_PathPlanningMessages_2eproto();
  
  void InitAsDefaultInstance();
  static GridInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ObstacleMessage

// required int32 direction = 1 [default = -1];
inline bool ObstacleMessage::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleMessage::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleMessage::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleMessage::clear_direction() {
  direction_ = -1;
  clear_has_direction();
}
inline ::google::protobuf::int32 ObstacleMessage::direction() const {
  return direction_;
}
inline void ObstacleMessage::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
}

// required float distance = 2 [default = 0];
inline bool ObstacleMessage::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleMessage::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleMessage::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleMessage::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float ObstacleMessage::distance() const {
  return distance_;
}
inline void ObstacleMessage::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// required float certainty = 3 [default = 0];
inline bool ObstacleMessage::has_certainty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleMessage::set_has_certainty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleMessage::clear_has_certainty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleMessage::clear_certainty() {
  certainty_ = 0;
  clear_has_certainty();
}
inline float ObstacleMessage::certainty() const {
  return certainty_;
}
inline void ObstacleMessage::set_certainty(float value) {
  set_has_certainty();
  certainty_ = value;
}

// -------------------------------------------------------------------

// VisionObstacleMessage

// repeated .ObstacleMessage obstacles = 1;
inline int VisionObstacleMessage::obstacles_size() const {
  return obstacles_.size();
}
inline void VisionObstacleMessage::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::ObstacleMessage& VisionObstacleMessage::obstacles(int index) const {
  return obstacles_.Get(index);
}
inline ::ObstacleMessage* VisionObstacleMessage::mutable_obstacles(int index) {
  return obstacles_.Mutable(index);
}
inline ::ObstacleMessage* VisionObstacleMessage::add_obstacles() {
  return obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObstacleMessage >&
VisionObstacleMessage::obstacles() const {
  return obstacles_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObstacleMessage >*
VisionObstacleMessage::mutable_obstacles() {
  return &obstacles_;
}

// -------------------------------------------------------------------

// ObstacleMessageArray

// repeated int32 direction = 1;
inline int ObstacleMessageArray::direction_size() const {
  return direction_.size();
}
inline void ObstacleMessageArray::clear_direction() {
  direction_.Clear();
}
inline ::google::protobuf::int32 ObstacleMessageArray::direction(int index) const {
  return direction_.Get(index);
}
inline void ObstacleMessageArray::set_direction(int index, ::google::protobuf::int32 value) {
  direction_.Set(index, value);
}
inline void ObstacleMessageArray::add_direction(::google::protobuf::int32 value) {
  direction_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObstacleMessageArray::direction() const {
  return direction_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObstacleMessageArray::mutable_direction() {
  return &direction_;
}

// repeated float distance = 2;
inline int ObstacleMessageArray::distance_size() const {
  return distance_.size();
}
inline void ObstacleMessageArray::clear_distance() {
  distance_.Clear();
}
inline float ObstacleMessageArray::distance(int index) const {
  return distance_.Get(index);
}
inline void ObstacleMessageArray::set_distance(int index, float value) {
  distance_.Set(index, value);
}
inline void ObstacleMessageArray::add_distance(float value) {
  distance_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ObstacleMessageArray::distance() const {
  return distance_;
}
inline ::google::protobuf::RepeatedField< float >*
ObstacleMessageArray::mutable_distance() {
  return &distance_;
}

// repeated float certainty = 3;
inline int ObstacleMessageArray::certainty_size() const {
  return certainty_.size();
}
inline void ObstacleMessageArray::clear_certainty() {
  certainty_.Clear();
}
inline float ObstacleMessageArray::certainty(int index) const {
  return certainty_.Get(index);
}
inline void ObstacleMessageArray::set_certainty(int index, float value) {
  certainty_.Set(index, value);
}
inline void ObstacleMessageArray::add_certainty(float value) {
  certainty_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ObstacleMessageArray::certainty() const {
  return certainty_;
}
inline ::google::protobuf::RepeatedField< float >*
ObstacleMessageArray::mutable_certainty() {
  return &certainty_;
}

// -------------------------------------------------------------------

// PathPlanningRequestMessage

// required float TargetX = 1;
inline bool PathPlanningRequestMessage::has_targetx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPlanningRequestMessage::set_has_targetx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPlanningRequestMessage::clear_has_targetx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPlanningRequestMessage::clear_targetx() {
  targetx_ = 0;
  clear_has_targetx();
}
inline float PathPlanningRequestMessage::targetx() const {
  return targetx_;
}
inline void PathPlanningRequestMessage::set_targetx(float value) {
  set_has_targetx();
  targetx_ = value;
}

// required float TargetY = 2;
inline bool PathPlanningRequestMessage::has_targety() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPlanningRequestMessage::set_has_targety() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPlanningRequestMessage::clear_has_targety() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathPlanningRequestMessage::clear_targety() {
  targety_ = 0;
  clear_has_targety();
}
inline float PathPlanningRequestMessage::targety() const {
  return targety_;
}
inline void PathPlanningRequestMessage::set_targety(float value) {
  set_has_targety();
  targety_ = value;
}

// required float TargetOrientation = 3;
inline bool PathPlanningRequestMessage::has_targetorientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathPlanningRequestMessage::set_has_targetorientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathPlanningRequestMessage::clear_has_targetorientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathPlanningRequestMessage::clear_targetorientation() {
  targetorientation_ = 0;
  clear_has_targetorientation();
}
inline float PathPlanningRequestMessage::targetorientation() const {
  return targetorientation_;
}
inline void PathPlanningRequestMessage::set_targetorientation(float value) {
  set_has_targetorientation();
  targetorientation_ = value;
}

// required bool ForceUseOfSmallMap = 4;
inline bool PathPlanningRequestMessage::has_forceuseofsmallmap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathPlanningRequestMessage::set_has_forceuseofsmallmap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathPlanningRequestMessage::clear_has_forceuseofsmallmap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathPlanningRequestMessage::clear_forceuseofsmallmap() {
  forceuseofsmallmap_ = false;
  clear_has_forceuseofsmallmap();
}
inline bool PathPlanningRequestMessage::forceuseofsmallmap() const {
  return forceuseofsmallmap_;
}
inline void PathPlanningRequestMessage::set_forceuseofsmallmap(bool value) {
  set_has_forceuseofsmallmap();
  forceuseofsmallmap_ = value;
}

// -------------------------------------------------------------------

// GridInfo

// required float CellsRadius = 1;
inline bool GridInfo::has_cellsradius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridInfo::set_has_cellsradius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridInfo::clear_has_cellsradius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridInfo::clear_cellsradius() {
  cellsradius_ = 0;
  clear_has_cellsradius();
}
inline float GridInfo::cellsradius() const {
  return cellsradius_;
}
inline void GridInfo::set_cellsradius(float value) {
  set_has_cellsradius();
  cellsradius_ = value;
}

// required float CellsRing = 2;
inline bool GridInfo::has_cellsring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridInfo::set_has_cellsring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridInfo::clear_has_cellsring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridInfo::clear_cellsring() {
  cellsring_ = 0;
  clear_has_cellsring();
}
inline float GridInfo::cellsring() const {
  return cellsring_;
}
inline void GridInfo::set_cellsring(float value) {
  set_has_cellsring();
  cellsring_ = value;
}

// required float RealGridLength = 3;
inline bool GridInfo::has_realgridlength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridInfo::set_has_realgridlength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridInfo::clear_has_realgridlength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridInfo::clear_realgridlength() {
  realgridlength_ = 0;
  clear_has_realgridlength();
}
inline float GridInfo::realgridlength() const {
  return realgridlength_;
}
inline void GridInfo::set_realgridlength(float value) {
  set_has_realgridlength();
  realgridlength_ = value;
}

// repeated float GridCells = 4;
inline int GridInfo::gridcells_size() const {
  return gridcells_.size();
}
inline void GridInfo::clear_gridcells() {
  gridcells_.Clear();
}
inline float GridInfo::gridcells(int index) const {
  return gridcells_.Get(index);
}
inline void GridInfo::set_gridcells(int index, float value) {
  gridcells_.Set(index, value);
}
inline void GridInfo::add_gridcells(float value) {
  gridcells_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
GridInfo::gridcells() const {
  return gridcells_;
}
inline ::google::protobuf::RepeatedField< float >*
GridInfo::mutable_gridcells() {
  return &gridcells_;
}

// required bool UsingSmallMap = 5;
inline bool GridInfo::has_usingsmallmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridInfo::set_has_usingsmallmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridInfo::clear_has_usingsmallmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridInfo::clear_usingsmallmap() {
  usingsmallmap_ = false;
  clear_has_usingsmallmap();
}
inline bool GridInfo::usingsmallmap() const {
  return usingsmallmap_;
}
inline void GridInfo::set_usingsmallmap(bool value) {
  set_has_usingsmallmap();
  usingsmallmap_ = value;
}

// required float PathLength = 6;
inline bool GridInfo::has_pathlength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridInfo::set_has_pathlength() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridInfo::clear_has_pathlength() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridInfo::clear_pathlength() {
  pathlength_ = 0;
  clear_has_pathlength();
}
inline float GridInfo::pathlength() const {
  return pathlength_;
}
inline void GridInfo::set_pathlength(float value) {
  set_has_pathlength();
  pathlength_ = value;
}

// repeated int32 PathStepsRing = 7;
inline int GridInfo::pathstepsring_size() const {
  return pathstepsring_.size();
}
inline void GridInfo::clear_pathstepsring() {
  pathstepsring_.Clear();
}
inline ::google::protobuf::int32 GridInfo::pathstepsring(int index) const {
  return pathstepsring_.Get(index);
}
inline void GridInfo::set_pathstepsring(int index, ::google::protobuf::int32 value) {
  pathstepsring_.Set(index, value);
}
inline void GridInfo::add_pathstepsring(::google::protobuf::int32 value) {
  pathstepsring_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GridInfo::pathstepsring() const {
  return pathstepsring_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GridInfo::mutable_pathstepsring() {
  return &pathstepsring_;
}

// repeated int32 PathStepsSector = 8;
inline int GridInfo::pathstepssector_size() const {
  return pathstepssector_.size();
}
inline void GridInfo::clear_pathstepssector() {
  pathstepssector_.Clear();
}
inline ::google::protobuf::int32 GridInfo::pathstepssector(int index) const {
  return pathstepssector_.Get(index);
}
inline void GridInfo::set_pathstepssector(int index, ::google::protobuf::int32 value) {
  pathstepssector_.Set(index, value);
}
inline void GridInfo::add_pathstepssector(::google::protobuf::int32 value) {
  pathstepssector_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GridInfo::pathstepssector() const {
  return pathstepssector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GridInfo::mutable_pathstepssector() {
  return &pathstepssector_;
}

// repeated int32 PathStepsOrientation = 9;
inline int GridInfo::pathstepsorientation_size() const {
  return pathstepsorientation_.size();
}
inline void GridInfo::clear_pathstepsorientation() {
  pathstepsorientation_.Clear();
}
inline ::google::protobuf::int32 GridInfo::pathstepsorientation(int index) const {
  return pathstepsorientation_.Get(index);
}
inline void GridInfo::set_pathstepsorientation(int index, ::google::protobuf::int32 value) {
  pathstepsorientation_.Set(index, value);
}
inline void GridInfo::add_pathstepsorientation(::google::protobuf::int32 value) {
  pathstepsorientation_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GridInfo::pathstepsorientation() const {
  return pathstepsorientation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GridInfo::mutable_pathstepsorientation() {
  return &pathstepsorientation_;
}

// optional int32 TargetRing = 10;
inline bool GridInfo::has_targetring() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GridInfo::set_has_targetring() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GridInfo::clear_has_targetring() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GridInfo::clear_targetring() {
  targetring_ = 0;
  clear_has_targetring();
}
inline ::google::protobuf::int32 GridInfo::targetring() const {
  return targetring_;
}
inline void GridInfo::set_targetring(::google::protobuf::int32 value) {
  set_has_targetring();
  targetring_ = value;
}

// optional int32 TargetSector = 11;
inline bool GridInfo::has_targetsector() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GridInfo::set_has_targetsector() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GridInfo::clear_has_targetsector() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GridInfo::clear_targetsector() {
  targetsector_ = 0;
  clear_has_targetsector();
}
inline ::google::protobuf::int32 GridInfo::targetsector() const {
  return targetsector_;
}
inline void GridInfo::set_targetsector(::google::protobuf::int32 value) {
  set_has_targetsector();
  targetsector_ = value;
}

// optional float TargetOrientation = 12;
inline bool GridInfo::has_targetorientation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GridInfo::set_has_targetorientation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GridInfo::clear_has_targetorientation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GridInfo::clear_targetorientation() {
  targetorientation_ = 0;
  clear_has_targetorientation();
}
inline float GridInfo::targetorientation() const {
  return targetorientation_;
}
inline void GridInfo::set_targetorientation(float value) {
  set_has_targetorientation();
  targetorientation_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PathPlanningMessages_2eproto__INCLUDED
