// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EKFMHypothesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EKFMHypothesis_reflection_ = NULL;
const ::google::protobuf::Descriptor* OdometryInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OdometryInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationDataForGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationDataForGUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionInfo_ROLE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FormationDataForGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationDataForGUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSODataForGUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSODataForGUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallCircle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallCircle_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisionDebugMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionDebugMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Debug_2eproto() {
  protobuf_AddDesc_Debug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Debug.proto");
  GOOGLE_CHECK(file != NULL);
  EKFMHypothesis_descriptor_ = file->message_type(0);
  static const int EKFMHypothesis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EKFMHypothesis, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EKFMHypothesis, kmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EKFMHypothesis, kmodeluncertainty_),
  };
  EKFMHypothesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EKFMHypothesis_descriptor_,
      EKFMHypothesis::default_instance_,
      EKFMHypothesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EKFMHypothesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EKFMHypothesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EKFMHypothesis));
  OdometryInfoMessage_descriptor_ = file->message_type(1);
  static const int OdometryInfoMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryInfoMessage, trackpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryInfoMessage, trackpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryInfoMessage, trackpointphi_),
  };
  OdometryInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OdometryInfoMessage_descriptor_,
      OdometryInfoMessage::default_instance_,
      OdometryInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OdometryInfoMessage));
  LocalizationDataForGUI_descriptor_ = file->message_type(2);
  static const int LocalizationDataForGUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, particles_),
  };
  LocalizationDataForGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationDataForGUI_descriptor_,
      LocalizationDataForGUI::default_instance_,
      LocalizationDataForGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationDataForGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationDataForGUI));
  PositionInfo_descriptor_ = file->message_type(3);
  static const int PositionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, role_),
  };
  PositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInfo_descriptor_,
      PositionInfo::default_instance_,
      PositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInfo));
  PositionInfo_ROLE_descriptor_ = PositionInfo_descriptor_->enum_type(0);
  FormationDataForGUI_descriptor_ = file->message_type(4);
  static const int FormationDataForGUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationDataForGUI, positions_),
  };
  FormationDataForGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationDataForGUI_descriptor_,
      FormationDataForGUI::default_instance_,
      FormationDataForGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationDataForGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationDataForGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationDataForGUI));
  PSODataForGUI_descriptor_ = file->message_type(5);
  static const int PSODataForGUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSODataForGUI, positionspso_),
  };
  PSODataForGUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSODataForGUI_descriptor_,
      PSODataForGUI::default_instance_,
      PSODataForGUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSODataForGUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSODataForGUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSODataForGUI));
  Point_descriptor_ = file->message_type(6);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Polygon_descriptor_ = file->message_type(7);
  static const int Polygon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, confidence_),
  };
  Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Polygon));
  BallCircle_descriptor_ = file->message_type(8);
  static const int BallCircle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, color_),
  };
  BallCircle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallCircle_descriptor_,
      BallCircle::default_instance_,
      BallCircle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallCircle));
  VisionDebugMessage_descriptor_ = file->message_type(9);
  static const int VisionDebugMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionDebugMessage, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionDebugMessage, ball_circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionDebugMessage, image_timestamp_),
  };
  VisionDebugMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisionDebugMessage_descriptor_,
      VisionDebugMessage::default_instance_,
      VisionDebugMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionDebugMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionDebugMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisionDebugMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Debug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EKFMHypothesis_descriptor_, &EKFMHypothesis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OdometryInfoMessage_descriptor_, &OdometryInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationDataForGUI_descriptor_, &LocalizationDataForGUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInfo_descriptor_, &PositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationDataForGUI_descriptor_, &FormationDataForGUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSODataForGUI_descriptor_, &PSODataForGUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallCircle_descriptor_, &BallCircle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisionDebugMessage_descriptor_, &VisionDebugMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Debug_2eproto() {
  delete EKFMHypothesis::default_instance_;
  delete EKFMHypothesis_reflection_;
  delete OdometryInfoMessage::default_instance_;
  delete OdometryInfoMessage_reflection_;
  delete LocalizationDataForGUI::default_instance_;
  delete LocalizationDataForGUI_reflection_;
  delete PositionInfo::default_instance_;
  delete PositionInfo_reflection_;
  delete FormationDataForGUI::default_instance_;
  delete FormationDataForGUI_reflection_;
  delete PSODataForGUI::default_instance_;
  delete PSODataForGUI_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete BallCircle::default_instance_;
  delete BallCircle_reflection_;
  delete VisionDebugMessage::default_instance_;
  delete VisionDebugMessage_reflection_;
}

void protobuf_AddDesc_Debug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_WorldInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Debug.proto\032\017WorldInfo.proto\"U\n\016EKFMHy"
    "pothesis\022\014\n\004size\030\001 \002(\005\022\032\n\006KModel\030\002 \003(\0132\n"
    ".RobotPose\022\031\n\021KModelUncertainty\030\003 \003(\002\"V\n"
    "\023OdometryInfoMessage\022\023\n\013trackPointX\030\001 \002("
    "\002\022\023\n\013trackPointY\030\002 \002(\002\022\025\n\rtrackPointPhi\030"
    "\003 \002(\002\"7\n\026LocalizationDataForGUI\022\035\n\tParti"
    "cles\030\001 \003(\0132\n.RobotPose\"\261\001\n\014PositionInfo\022"
    "\t\n\001X\030\001 \002(\002\022\t\n\001Y\030\002 \002(\002\022\014\n\004role\030\003 \002(\005\"}\n\004R"
    "OLE\022\n\n\006GOALIE\020\000\022\014\n\010DEFENDER\020\001\022\016\n\nDEFENDE"
    "R_R\020\002\022\016\n\nDEFENDER_L\020\003\022\n\n\006ONBALL\020\004\022\r\n\tSUP"
    "PORTER\020\005\022\017\n\013SUPPORTER_L\020\006\022\017\n\013SUPPORTER_R"
    "\020\007\"7\n\023FormationDataForGUI\022 \n\tPositions\030\001"
    " \003(\0132\r.PositionInfo\"4\n\rPSODataForGUI\022#\n\014"
    "PositionsPSO\030\001 \003(\0132\r.PositionInfo\"%\n\005Poi"
    "nt\022\r\n\001x\030\001 \002(\005:\002-1\022\r\n\001y\030\002 \002(\005:\002-1\"L\n\007Poly"
    "gon\022\026\n\006points\030\001 \003(\0132\006.Point\022\021\n\005color\030\002 \002"
    "(\005:\002-1\022\026\n\nconfidence\030\003 \002(\002:\002-1\"y\n\nBallCi"
    "rcle\022\026\n\006center\030\001 \002(\0132\006.Point\022\022\n\006radius\030\002"
    " \002(\005:\002-1\022\026\n\nconfidence\030\003 \002(\005:\002-1\022\024\n\005vali"
    "d\030\004 \002(\010:\005false\022\021\n\005color\030\005 \001(\005:\002-1\"l\n\022Vis"
    "ionDebugMessage\022\031\n\007polygon\030\001 \003(\0132\010.Polyg"
    "on\022 \n\013ball_circle\030\002 \002(\0132\013.BallCircle\022\031\n\017"
    "image_timestamp\030\003 \002(\t:\000", 903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Debug.proto", &protobuf_RegisterTypes);
  EKFMHypothesis::default_instance_ = new EKFMHypothesis();
  OdometryInfoMessage::default_instance_ = new OdometryInfoMessage();
  LocalizationDataForGUI::default_instance_ = new LocalizationDataForGUI();
  PositionInfo::default_instance_ = new PositionInfo();
  FormationDataForGUI::default_instance_ = new FormationDataForGUI();
  PSODataForGUI::default_instance_ = new PSODataForGUI();
  Point::default_instance_ = new Point();
  Polygon::default_instance_ = new Polygon();
  BallCircle::default_instance_ = new BallCircle();
  VisionDebugMessage::default_instance_ = new VisionDebugMessage();
  EKFMHypothesis::default_instance_->InitAsDefaultInstance();
  OdometryInfoMessage::default_instance_->InitAsDefaultInstance();
  LocalizationDataForGUI::default_instance_->InitAsDefaultInstance();
  PositionInfo::default_instance_->InitAsDefaultInstance();
  FormationDataForGUI::default_instance_->InitAsDefaultInstance();
  PSODataForGUI::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  BallCircle::default_instance_->InitAsDefaultInstance();
  VisionDebugMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Debug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Debug_2eproto {
  StaticDescriptorInitializer_Debug_2eproto() {
    protobuf_AddDesc_Debug_2eproto();
  }
} static_descriptor_initializer_Debug_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EKFMHypothesis::kSizeFieldNumber;
const int EKFMHypothesis::kKModelFieldNumber;
const int EKFMHypothesis::kKModelUncertaintyFieldNumber;
#endif  // !_MSC_VER

EKFMHypothesis::EKFMHypothesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EKFMHypothesis::InitAsDefaultInstance() {
}

EKFMHypothesis::EKFMHypothesis(const EKFMHypothesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EKFMHypothesis::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EKFMHypothesis::~EKFMHypothesis() {
  SharedDtor();
}

void EKFMHypothesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EKFMHypothesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EKFMHypothesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EKFMHypothesis_descriptor_;
}

const EKFMHypothesis& EKFMHypothesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

EKFMHypothesis* EKFMHypothesis::default_instance_ = NULL;

EKFMHypothesis* EKFMHypothesis::New() const {
  return new EKFMHypothesis;
}

void EKFMHypothesis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
  }
  kmodel_.Clear();
  kmodeluncertainty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EKFMHypothesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_KModel;
        break;
      }
      
      // repeated .RobotPose KModel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kmodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_KModel;
        if (input->ExpectTag(29)) goto parse_KModelUncertainty;
        break;
      }
      
      // repeated float KModelUncertainty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_KModelUncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_kmodeluncertainty())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kmodeluncertainty())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_KModelUncertainty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EKFMHypothesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }
  
  // repeated .RobotPose KModel = 2;
  for (int i = 0; i < this->kmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kmodel(i), output);
  }
  
  // repeated float KModelUncertainty = 3;
  for (int i = 0; i < this->kmodeluncertainty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->kmodeluncertainty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EKFMHypothesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }
  
  // repeated .RobotPose KModel = 2;
  for (int i = 0; i < this->kmodel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kmodel(i), target);
  }
  
  // repeated float KModelUncertainty = 3;
  for (int i = 0; i < this->kmodeluncertainty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->kmodeluncertainty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EKFMHypothesis::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
  }
  // repeated .RobotPose KModel = 2;
  total_size += 1 * this->kmodel_size();
  for (int i = 0; i < this->kmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kmodel(i));
  }
  
  // repeated float KModelUncertainty = 3;
  {
    int data_size = 0;
    data_size = 4 * this->kmodeluncertainty_size();
    total_size += 1 * this->kmodeluncertainty_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EKFMHypothesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EKFMHypothesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EKFMHypothesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EKFMHypothesis::MergeFrom(const EKFMHypothesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  kmodel_.MergeFrom(from.kmodel_);
  kmodeluncertainty_.MergeFrom(from.kmodeluncertainty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EKFMHypothesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EKFMHypothesis::CopyFrom(const EKFMHypothesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EKFMHypothesis::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < kmodel_size(); i++) {
    if (!this->kmodel(i).IsInitialized()) return false;
  }
  return true;
}

void EKFMHypothesis::Swap(EKFMHypothesis* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    kmodel_.Swap(&other->kmodel_);
    kmodeluncertainty_.Swap(&other->kmodeluncertainty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EKFMHypothesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EKFMHypothesis_descriptor_;
  metadata.reflection = EKFMHypothesis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OdometryInfoMessage::kTrackPointXFieldNumber;
const int OdometryInfoMessage::kTrackPointYFieldNumber;
const int OdometryInfoMessage::kTrackPointPhiFieldNumber;
#endif  // !_MSC_VER

OdometryInfoMessage::OdometryInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OdometryInfoMessage::InitAsDefaultInstance() {
}

OdometryInfoMessage::OdometryInfoMessage(const OdometryInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OdometryInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  trackpointx_ = 0;
  trackpointy_ = 0;
  trackpointphi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OdometryInfoMessage::~OdometryInfoMessage() {
  SharedDtor();
}

void OdometryInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OdometryInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdometryInfoMessage_descriptor_;
}

const OdometryInfoMessage& OdometryInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

OdometryInfoMessage* OdometryInfoMessage::default_instance_ = NULL;

OdometryInfoMessage* OdometryInfoMessage::New() const {
  return new OdometryInfoMessage;
}

void OdometryInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trackpointx_ = 0;
    trackpointy_ = 0;
    trackpointphi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OdometryInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float trackPointX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trackpointx_)));
          set_has_trackpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_trackPointY;
        break;
      }
      
      // required float trackPointY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trackpointy_)));
          set_has_trackpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_trackPointPhi;
        break;
      }
      
      // required float trackPointPhi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackPointPhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trackpointphi_)));
          set_has_trackpointphi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OdometryInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float trackPointX = 1;
  if (has_trackpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->trackpointx(), output);
  }
  
  // required float trackPointY = 2;
  if (has_trackpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->trackpointy(), output);
  }
  
  // required float trackPointPhi = 3;
  if (has_trackpointphi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->trackpointphi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OdometryInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float trackPointX = 1;
  if (has_trackpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->trackpointx(), target);
  }
  
  // required float trackPointY = 2;
  if (has_trackpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->trackpointy(), target);
  }
  
  // required float trackPointPhi = 3;
  if (has_trackpointphi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->trackpointphi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OdometryInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float trackPointX = 1;
    if (has_trackpointx()) {
      total_size += 1 + 4;
    }
    
    // required float trackPointY = 2;
    if (has_trackpointy()) {
      total_size += 1 + 4;
    }
    
    // required float trackPointPhi = 3;
    if (has_trackpointphi()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OdometryInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OdometryInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OdometryInfoMessage::MergeFrom(const OdometryInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackpointx()) {
      set_trackpointx(from.trackpointx());
    }
    if (from.has_trackpointy()) {
      set_trackpointy(from.trackpointy());
    }
    if (from.has_trackpointphi()) {
      set_trackpointphi(from.trackpointphi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OdometryInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryInfoMessage::CopyFrom(const OdometryInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryInfoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OdometryInfoMessage::Swap(OdometryInfoMessage* other) {
  if (other != this) {
    std::swap(trackpointx_, other->trackpointx_);
    std::swap(trackpointy_, other->trackpointy_);
    std::swap(trackpointphi_, other->trackpointphi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OdometryInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OdometryInfoMessage_descriptor_;
  metadata.reflection = OdometryInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationDataForGUI::kParticlesFieldNumber;
#endif  // !_MSC_VER

LocalizationDataForGUI::LocalizationDataForGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalizationDataForGUI::InitAsDefaultInstance() {
}

LocalizationDataForGUI::LocalizationDataForGUI(const LocalizationDataForGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalizationDataForGUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationDataForGUI::~LocalizationDataForGUI() {
  SharedDtor();
}

void LocalizationDataForGUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalizationDataForGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationDataForGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationDataForGUI_descriptor_;
}

const LocalizationDataForGUI& LocalizationDataForGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

LocalizationDataForGUI* LocalizationDataForGUI::default_instance_ = NULL;

LocalizationDataForGUI* LocalizationDataForGUI::New() const {
  return new LocalizationDataForGUI;
}

void LocalizationDataForGUI::Clear() {
  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationDataForGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotPose Particles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Particles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalizationDataForGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RobotPose Particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalizationDataForGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RobotPose Particles = 1;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->particles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalizationDataForGUI::ByteSize() const {
  int total_size = 0;
  
  // repeated .RobotPose Particles = 1;
  total_size += 1 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationDataForGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationDataForGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationDataForGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationDataForGUI::MergeFrom(const LocalizationDataForGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationDataForGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationDataForGUI::CopyFrom(const LocalizationDataForGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationDataForGUI::IsInitialized() const {
  
  for (int i = 0; i < particles_size(); i++) {
    if (!this->particles(i).IsInitialized()) return false;
  }
  return true;
}

void LocalizationDataForGUI::Swap(LocalizationDataForGUI* other) {
  if (other != this) {
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationDataForGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationDataForGUI_descriptor_;
  metadata.reflection = LocalizationDataForGUI_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PositionInfo_ROLE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInfo_ROLE_descriptor_;
}
bool PositionInfo_ROLE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PositionInfo_ROLE PositionInfo::GOALIE;
const PositionInfo_ROLE PositionInfo::DEFENDER;
const PositionInfo_ROLE PositionInfo::DEFENDER_R;
const PositionInfo_ROLE PositionInfo::DEFENDER_L;
const PositionInfo_ROLE PositionInfo::ONBALL;
const PositionInfo_ROLE PositionInfo::SUPPORTER;
const PositionInfo_ROLE PositionInfo::SUPPORTER_L;
const PositionInfo_ROLE PositionInfo::SUPPORTER_R;
const PositionInfo_ROLE PositionInfo::ROLE_MIN;
const PositionInfo_ROLE PositionInfo::ROLE_MAX;
const int PositionInfo::ROLE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PositionInfo::kXFieldNumber;
const int PositionInfo::kYFieldNumber;
const int PositionInfo::kRoleFieldNumber;
#endif  // !_MSC_VER

PositionInfo::PositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionInfo::InitAsDefaultInstance() {
}

PositionInfo::PositionInfo(const PositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInfo::~PositionInfo() {
  SharedDtor();
}

void PositionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInfo_descriptor_;
}

const PositionInfo& PositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

PositionInfo* PositionInfo::default_instance_ = NULL;

PositionInfo* PositionInfo::New() const {
  return new PositionInfo;
}

void PositionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }
      
      // required float Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }
      
      // required int32 role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required int32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required int32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float Y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required int32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInfo::MergeFrom(const PositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInfo::CopyFrom(const PositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PositionInfo::Swap(PositionInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInfo_descriptor_;
  metadata.reflection = PositionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationDataForGUI::kPositionsFieldNumber;
#endif  // !_MSC_VER

FormationDataForGUI::FormationDataForGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormationDataForGUI::InitAsDefaultInstance() {
}

FormationDataForGUI::FormationDataForGUI(const FormationDataForGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormationDataForGUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationDataForGUI::~FormationDataForGUI() {
  SharedDtor();
}

void FormationDataForGUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormationDataForGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormationDataForGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationDataForGUI_descriptor_;
}

const FormationDataForGUI& FormationDataForGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

FormationDataForGUI* FormationDataForGUI::default_instance_ = NULL;

FormationDataForGUI* FormationDataForGUI::New() const {
  return new FormationDataForGUI;
}

void FormationDataForGUI::Clear() {
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationDataForGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PositionInfo Positions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationDataForGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PositionInfo Positions = 1;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->positions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationDataForGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PositionInfo Positions = 1;
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->positions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationDataForGUI::ByteSize() const {
  int total_size = 0;
  
  // repeated .PositionInfo Positions = 1;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormationDataForGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationDataForGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationDataForGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationDataForGUI::MergeFrom(const FormationDataForGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_.MergeFrom(from.positions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationDataForGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationDataForGUI::CopyFrom(const FormationDataForGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationDataForGUI::IsInitialized() const {
  
  for (int i = 0; i < positions_size(); i++) {
    if (!this->positions(i).IsInitialized()) return false;
  }
  return true;
}

void FormationDataForGUI::Swap(FormationDataForGUI* other) {
  if (other != this) {
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationDataForGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationDataForGUI_descriptor_;
  metadata.reflection = FormationDataForGUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSODataForGUI::kPositionsPSOFieldNumber;
#endif  // !_MSC_VER

PSODataForGUI::PSODataForGUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSODataForGUI::InitAsDefaultInstance() {
}

PSODataForGUI::PSODataForGUI(const PSODataForGUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSODataForGUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSODataForGUI::~PSODataForGUI() {
  SharedDtor();
}

void PSODataForGUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSODataForGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSODataForGUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSODataForGUI_descriptor_;
}

const PSODataForGUI& PSODataForGUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

PSODataForGUI* PSODataForGUI::default_instance_ = NULL;

PSODataForGUI* PSODataForGUI::New() const {
  return new PSODataForGUI;
}

void PSODataForGUI::Clear() {
  positionspso_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSODataForGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PositionInfo PositionsPSO = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionsPSO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positionspso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PositionsPSO;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSODataForGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PositionInfo PositionsPSO = 1;
  for (int i = 0; i < this->positionspso_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->positionspso(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSODataForGUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PositionInfo PositionsPSO = 1;
  for (int i = 0; i < this->positionspso_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->positionspso(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSODataForGUI::ByteSize() const {
  int total_size = 0;
  
  // repeated .PositionInfo PositionsPSO = 1;
  total_size += 1 * this->positionspso_size();
  for (int i = 0; i < this->positionspso_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positionspso(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSODataForGUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSODataForGUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSODataForGUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSODataForGUI::MergeFrom(const PSODataForGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  positionspso_.MergeFrom(from.positionspso_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSODataForGUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSODataForGUI::CopyFrom(const PSODataForGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSODataForGUI::IsInitialized() const {
  
  for (int i = 0; i < positionspso_size(); i++) {
    if (!this->positionspso(i).IsInitialized()) return false;
  }
  return true;
}

void PSODataForGUI::Swap(PSODataForGUI* other) {
  if (other != this) {
    positionspso_.Swap(&other->positionspso_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSODataForGUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSODataForGUI_descriptor_;
  metadata.reflection = PSODataForGUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2 [default = -1];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Polygon::kPointsFieldNumber;
const int Polygon::kColorFieldNumber;
const int Polygon::kConfidenceFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  color_ = -1;
  confidence_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New() const {
  return new Polygon;
}

void Polygon::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    color_ = -1;
    confidence_ = -1;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Point points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // required int32 color = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }
      
      // required float confidence = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  // required int32 color = 2 [default = -1];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // required float confidence = 3 [default = -1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  // required int32 color = 2 [default = -1];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }
  
  // required float confidence = 3 [default = -1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Polygon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 color = 2 [default = -1];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // required float confidence = 3 [default = -1];
    if (has_confidence()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .Point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(color_, other->color_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallCircle::kCenterFieldNumber;
const int BallCircle::kRadiusFieldNumber;
const int BallCircle::kConfidenceFieldNumber;
const int BallCircle::kValidFieldNumber;
const int BallCircle::kColorFieldNumber;
#endif  // !_MSC_VER

BallCircle::BallCircle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallCircle::InitAsDefaultInstance() {
  center_ = const_cast< ::Point*>(&::Point::default_instance());
}

BallCircle::BallCircle(const BallCircle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallCircle::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = -1;
  confidence_ = -1;
  valid_ = false;
  color_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallCircle::~BallCircle() {
  SharedDtor();
}

void BallCircle::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void BallCircle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallCircle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallCircle_descriptor_;
}

const BallCircle& BallCircle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

BallCircle* BallCircle::default_instance_ = NULL;

BallCircle* BallCircle::New() const {
  return new BallCircle;
}

void BallCircle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::Point::Clear();
    }
    radius_ = -1;
    confidence_ = -1;
    valid_ = false;
    color_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallCircle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_radius;
        break;
      }
      
      // required int32 radius = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_confidence;
        break;
      }
      
      // required int32 confidence = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid;
        break;
      }
      
      // required bool valid = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }
      
      // optional int32 color = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallCircle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Point center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }
  
  // required int32 radius = 2 [default = -1];
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->radius(), output);
  }
  
  // required int32 confidence = 3 [default = -1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->confidence(), output);
  }
  
  // required bool valid = 4 [default = false];
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->valid(), output);
  }
  
  // optional int32 color = 5 [default = -1];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallCircle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Point center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required int32 radius = 2 [default = -1];
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->radius(), target);
  }
  
  // required int32 confidence = 3 [default = -1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->confidence(), target);
  }
  
  // required bool valid = 4 [default = false];
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->valid(), target);
  }
  
  // optional int32 color = 5 [default = -1];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallCircle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Point center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required int32 radius = 2 [default = -1];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }
    
    // required int32 confidence = 3 [default = -1];
    if (has_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence());
    }
    
    // required bool valid = 4 [default = false];
    if (has_valid()) {
      total_size += 1 + 1;
    }
    
    // optional int32 color = 5 [default = -1];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallCircle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallCircle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallCircle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallCircle::MergeFrom(const BallCircle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::Point::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallCircle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallCircle::CopyFrom(const BallCircle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallCircle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void BallCircle::Swap(BallCircle* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(confidence_, other->confidence_);
    std::swap(valid_, other->valid_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallCircle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallCircle_descriptor_;
  metadata.reflection = BallCircle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisionDebugMessage::kPolygonFieldNumber;
const int VisionDebugMessage::kBallCircleFieldNumber;
const int VisionDebugMessage::kImageTimestampFieldNumber;
#endif  // !_MSC_VER

VisionDebugMessage::VisionDebugMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisionDebugMessage::InitAsDefaultInstance() {
  ball_circle_ = const_cast< ::BallCircle*>(&::BallCircle::default_instance());
}

VisionDebugMessage::VisionDebugMessage(const VisionDebugMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisionDebugMessage::SharedCtor() {
  _cached_size_ = 0;
  ball_circle_ = NULL;
  image_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionDebugMessage::~VisionDebugMessage() {
  SharedDtor();
}

void VisionDebugMessage::SharedDtor() {
  if (image_timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete image_timestamp_;
  }
  if (this != default_instance_) {
    delete ball_circle_;
  }
}

void VisionDebugMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionDebugMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionDebugMessage_descriptor_;
}

const VisionDebugMessage& VisionDebugMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Debug_2eproto();  return *default_instance_;
}

VisionDebugMessage* VisionDebugMessage::default_instance_ = NULL;

VisionDebugMessage* VisionDebugMessage::New() const {
  return new VisionDebugMessage;
}

void VisionDebugMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_ball_circle()) {
      if (ball_circle_ != NULL) ball_circle_->::BallCircle::Clear();
    }
    if (has_image_timestamp()) {
      if (image_timestamp_ != &::google::protobuf::internal::kEmptyString) {
        image_timestamp_->clear();
      }
    }
  }
  polygon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisionDebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Polygon polygon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_polygon;
        if (input->ExpectTag(18)) goto parse_ball_circle;
        break;
      }
      
      // required .BallCircle ball_circle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_circle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_timestamp;
        break;
      }
      
      // required string image_timestamp = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_timestamp().data(), this->image_timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisionDebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Polygon polygon = 1;
  for (int i = 0; i < this->polygon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygon(i), output);
  }
  
  // required .BallCircle ball_circle = 2;
  if (has_ball_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball_circle(), output);
  }
  
  // required string image_timestamp = 3 [default = ""];
  if (has_image_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_timestamp().data(), this->image_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisionDebugMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Polygon polygon = 1;
  for (int i = 0; i < this->polygon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->polygon(i), target);
  }
  
  // required .BallCircle ball_circle = 2;
  if (has_ball_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ball_circle(), target);
  }
  
  // required string image_timestamp = 3 [default = ""];
  if (has_image_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_timestamp().data(), this->image_timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisionDebugMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .BallCircle ball_circle = 2;
    if (has_ball_circle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_circle());
    }
    
    // required string image_timestamp = 3 [default = ""];
    if (has_image_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_timestamp());
    }
    
  }
  // repeated .Polygon polygon = 1;
  total_size += 1 * this->polygon_size();
  for (int i = 0; i < this->polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionDebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisionDebugMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisionDebugMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisionDebugMessage::MergeFrom(const VisionDebugMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygon_.MergeFrom(from.polygon_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ball_circle()) {
      mutable_ball_circle()->::BallCircle::MergeFrom(from.ball_circle());
    }
    if (from.has_image_timestamp()) {
      set_image_timestamp(from.image_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisionDebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionDebugMessage::CopyFrom(const VisionDebugMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionDebugMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < polygon_size(); i++) {
    if (!this->polygon(i).IsInitialized()) return false;
  }
  if (has_ball_circle()) {
    if (!this->ball_circle().IsInitialized()) return false;
  }
  return true;
}

void VisionDebugMessage::Swap(VisionDebugMessage* other) {
  if (other != this) {
    polygon_.Swap(&other->polygon_);
    std::swap(ball_circle_, other->ball_circle_);
    std::swap(image_timestamp_, other->image_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisionDebugMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionDebugMessage_descriptor_;
  metadata.reflection = VisionDebugMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
