// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorsMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RobotPositionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPositionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllSensorValuesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllSensorValuesMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorsMessage_2eproto() {
  protobuf_AddDesc_SensorsMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorsMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RobotPositionMessage_descriptor_ = file->message_type(0);
  static const int RobotPositionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionMessage, sensordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionMessage, timediff_),
  };
  RobotPositionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPositionMessage_descriptor_,
      RobotPositionMessage::default_instance_,
      RobotPositionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPositionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPositionMessage));
  ButtonMessage_descriptor_ = file->message_type(1);
  static const int ButtonMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonMessage, data_),
  };
  ButtonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonMessage_descriptor_,
      ButtonMessage::default_instance_,
      ButtonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonMessage));
  SensorData_descriptor_ = file->message_type(2);
  static const int SensorData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, sensorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, sensorvaluediff_),
  };
  SensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorData_descriptor_,
      SensorData::default_instance_,
      SensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorData));
  AllSensorValuesMessage_descriptor_ = file->message_type(3);
  static const int AllSensorValuesMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, jointdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, sensordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, computeddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, timediff_),
  };
  AllSensorValuesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllSensorValuesMessage_descriptor_,
      AllSensorValuesMessage::default_instance_,
      AllSensorValuesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSensorValuesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllSensorValuesMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorsMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPositionMessage_descriptor_, &RobotPositionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonMessage_descriptor_, &ButtonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorData_descriptor_, &SensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllSensorValuesMessage_descriptor_, &AllSensorValuesMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorsMessage_2eproto() {
  delete RobotPositionMessage::default_instance_;
  delete RobotPositionMessage_reflection_;
  delete ButtonMessage::default_instance_;
  delete ButtonMessage_reflection_;
  delete SensorData::default_instance_;
  delete SensorData_reflection_;
  delete AllSensorValuesMessage::default_instance_;
  delete AllSensorValuesMessage_reflection_;
}

void protobuf_AddDesc_SensorsMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SensorsMessage.proto\"I\n\024RobotPositionM"
    "essage\022\037\n\nsensorData\030\001 \003(\0132\013.SensorData\022"
    "\020\n\010TimeDiff\030\002 \002(\005\"\035\n\rButtonMessage\022\014\n\004da"
    "ta\030\001 \003(\r\"@\n\nSensorData\022\026\n\013SensorValue\030\001 "
    "\002(\002:\0010\022\032\n\017SensorValueDiff\030\002 \002(\002:\0010\"\216\001\n\026A"
    "llSensorValuesMessage\022\036\n\tjointData\030\001 \003(\013"
    "2\013.SensorData\022\037\n\nsensorData\030\002 \003(\0132\013.Sens"
    "orData\022!\n\014computedData\030\003 \003(\0132\013.SensorDat"
    "a\022\020\n\010TimeDiff\030\004 \002(\r", 339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorsMessage.proto", &protobuf_RegisterTypes);
  RobotPositionMessage::default_instance_ = new RobotPositionMessage();
  ButtonMessage::default_instance_ = new ButtonMessage();
  SensorData::default_instance_ = new SensorData();
  AllSensorValuesMessage::default_instance_ = new AllSensorValuesMessage();
  RobotPositionMessage::default_instance_->InitAsDefaultInstance();
  ButtonMessage::default_instance_->InitAsDefaultInstance();
  SensorData::default_instance_->InitAsDefaultInstance();
  AllSensorValuesMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorsMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorsMessage_2eproto {
  StaticDescriptorInitializer_SensorsMessage_2eproto() {
    protobuf_AddDesc_SensorsMessage_2eproto();
  }
} static_descriptor_initializer_SensorsMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RobotPositionMessage::kSensorDataFieldNumber;
const int RobotPositionMessage::kTimeDiffFieldNumber;
#endif  // !_MSC_VER

RobotPositionMessage::RobotPositionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPositionMessage::InitAsDefaultInstance() {
}

RobotPositionMessage::RobotPositionMessage(const RobotPositionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPositionMessage::SharedCtor() {
  _cached_size_ = 0;
  timediff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPositionMessage::~RobotPositionMessage() {
  SharedDtor();
}

void RobotPositionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPositionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPositionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPositionMessage_descriptor_;
}

const RobotPositionMessage& RobotPositionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

RobotPositionMessage* RobotPositionMessage::default_instance_ = NULL;

RobotPositionMessage* RobotPositionMessage::New() const {
  return new RobotPositionMessage;
}

void RobotPositionMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timediff_ = 0;
  }
  sensordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPositionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SensorData sensorData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sensorData;
        if (input->ExpectTag(16)) goto parse_TimeDiff;
        break;
      }
      
      // required int32 TimeDiff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timediff_)));
          set_has_timediff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPositionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SensorData sensorData = 1;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensordata(i), output);
  }
  
  // required int32 TimeDiff = 2;
  if (has_timediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timediff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPositionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SensorData sensorData = 1;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sensordata(i), target);
  }
  
  // required int32 TimeDiff = 2;
  if (has_timediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timediff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPositionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 TimeDiff = 2;
    if (has_timediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timediff());
    }
    
  }
  // repeated .SensorData sensorData = 1;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPositionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPositionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPositionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPositionMessage::MergeFrom(const RobotPositionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensordata_.MergeFrom(from.sensordata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timediff()) {
      set_timediff(from.timediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPositionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPositionMessage::CopyFrom(const RobotPositionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPositionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  return true;
}

void RobotPositionMessage::Swap(RobotPositionMessage* other) {
  if (other != this) {
    sensordata_.Swap(&other->sensordata_);
    std::swap(timediff_, other->timediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPositionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPositionMessage_descriptor_;
  metadata.reflection = RobotPositionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ButtonMessage::kDataFieldNumber;
#endif  // !_MSC_VER

ButtonMessage::ButtonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonMessage::InitAsDefaultInstance() {
}

ButtonMessage::ButtonMessage(const ButtonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonMessage::~ButtonMessage() {
  SharedDtor();
}

void ButtonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonMessage_descriptor_;
}

const ButtonMessage& ButtonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

ButtonMessage* ButtonMessage::default_instance_ = NULL;

ButtonMessage* ButtonMessage::New() const {
  return new ButtonMessage;
}

void ButtonMessage::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ButtonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonMessage::MergeFrom(const ButtonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonMessage::CopyFrom(const ButtonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonMessage::IsInitialized() const {
  
  return true;
}

void ButtonMessage::Swap(ButtonMessage* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonMessage_descriptor_;
  metadata.reflection = ButtonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorData::kSensorValueFieldNumber;
const int SensorData::kSensorValueDiffFieldNumber;
#endif  // !_MSC_VER

SensorData::SensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorData::InitAsDefaultInstance() {
}

SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorData::SharedCtor() {
  _cached_size_ = 0;
  sensorvalue_ = 0;
  sensorvaluediff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorData::~SensorData() {
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorData_descriptor_;
}

const SensorData& SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

SensorData* SensorData::default_instance_ = NULL;

SensorData* SensorData::New() const {
  return new SensorData;
}

void SensorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sensorvalue_ = 0;
    sensorvaluediff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float SensorValue = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensorvalue_)));
          set_has_sensorvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_SensorValueDiff;
        break;
      }
      
      // required float SensorValueDiff = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SensorValueDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensorvaluediff_)));
          set_has_sensorvaluediff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float SensorValue = 1 [default = 0];
  if (has_sensorvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sensorvalue(), output);
  }
  
  // required float SensorValueDiff = 2 [default = 0];
  if (has_sensorvaluediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sensorvaluediff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float SensorValue = 1 [default = 0];
  if (has_sensorvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sensorvalue(), target);
  }
  
  // required float SensorValueDiff = 2 [default = 0];
  if (has_sensorvaluediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sensorvaluediff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float SensorValue = 1 [default = 0];
    if (has_sensorvalue()) {
      total_size += 1 + 4;
    }
    
    // required float SensorValueDiff = 2 [default = 0];
    if (has_sensorvaluediff()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensorvalue()) {
      set_sensorvalue(from.sensorvalue());
    }
    if (from.has_sensorvaluediff()) {
      set_sensorvaluediff(from.sensorvaluediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other != this) {
    std::swap(sensorvalue_, other->sensorvalue_);
    std::swap(sensorvaluediff_, other->sensorvaluediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorData_descriptor_;
  metadata.reflection = SensorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllSensorValuesMessage::kJointDataFieldNumber;
const int AllSensorValuesMessage::kSensorDataFieldNumber;
const int AllSensorValuesMessage::kComputedDataFieldNumber;
const int AllSensorValuesMessage::kTimeDiffFieldNumber;
#endif  // !_MSC_VER

AllSensorValuesMessage::AllSensorValuesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllSensorValuesMessage::InitAsDefaultInstance() {
}

AllSensorValuesMessage::AllSensorValuesMessage(const AllSensorValuesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllSensorValuesMessage::SharedCtor() {
  _cached_size_ = 0;
  timediff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllSensorValuesMessage::~AllSensorValuesMessage() {
  SharedDtor();
}

void AllSensorValuesMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllSensorValuesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllSensorValuesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllSensorValuesMessage_descriptor_;
}

const AllSensorValuesMessage& AllSensorValuesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorsMessage_2eproto();  return *default_instance_;
}

AllSensorValuesMessage* AllSensorValuesMessage::default_instance_ = NULL;

AllSensorValuesMessage* AllSensorValuesMessage::New() const {
  return new AllSensorValuesMessage;
}

void AllSensorValuesMessage::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    timediff_ = 0u;
  }
  jointdata_.Clear();
  sensordata_.Clear();
  computeddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllSensorValuesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SensorData jointData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jointData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jointdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jointData;
        if (input->ExpectTag(18)) goto parse_sensorData;
        break;
      }
      
      // repeated .SensorData sensorData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorData;
        if (input->ExpectTag(26)) goto parse_computedData;
        break;
      }
      
      // repeated .SensorData computedData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_computedData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_computeddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_computedData;
        if (input->ExpectTag(32)) goto parse_TimeDiff;
        break;
      }
      
      // required uint32 TimeDiff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timediff_)));
          set_has_timediff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllSensorValuesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SensorData jointData = 1;
  for (int i = 0; i < this->jointdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jointdata(i), output);
  }
  
  // repeated .SensorData sensorData = 2;
  for (int i = 0; i < this->sensordata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensordata(i), output);
  }
  
  // repeated .SensorData computedData = 3;
  for (int i = 0; i < this->computeddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->computeddata(i), output);
  }
  
  // required uint32 TimeDiff = 4;
  if (has_timediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timediff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllSensorValuesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SensorData jointData = 1;
  for (int i = 0; i < this->jointdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jointdata(i), target);
  }
  
  // repeated .SensorData sensorData = 2;
  for (int i = 0; i < this->sensordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensordata(i), target);
  }
  
  // repeated .SensorData computedData = 3;
  for (int i = 0; i < this->computeddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->computeddata(i), target);
  }
  
  // required uint32 TimeDiff = 4;
  if (has_timediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timediff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllSensorValuesMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 TimeDiff = 4;
    if (has_timediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timediff());
    }
    
  }
  // repeated .SensorData jointData = 1;
  total_size += 1 * this->jointdata_size();
  for (int i = 0; i < this->jointdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jointdata(i));
  }
  
  // repeated .SensorData sensorData = 2;
  total_size += 1 * this->sensordata_size();
  for (int i = 0; i < this->sensordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensordata(i));
  }
  
  // repeated .SensorData computedData = 3;
  total_size += 1 * this->computeddata_size();
  for (int i = 0; i < this->computeddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->computeddata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllSensorValuesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllSensorValuesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllSensorValuesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllSensorValuesMessage::MergeFrom(const AllSensorValuesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  jointdata_.MergeFrom(from.jointdata_);
  sensordata_.MergeFrom(from.sensordata_);
  computeddata_.MergeFrom(from.computeddata_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_timediff()) {
      set_timediff(from.timediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllSensorValuesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllSensorValuesMessage::CopyFrom(const AllSensorValuesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllSensorValuesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  for (int i = 0; i < jointdata_size(); i++) {
    if (!this->jointdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sensordata_size(); i++) {
    if (!this->sensordata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < computeddata_size(); i++) {
    if (!this->computeddata(i).IsInitialized()) return false;
  }
  return true;
}

void AllSensorValuesMessage::Swap(AllSensorValuesMessage* other) {
  if (other != this) {
    jointdata_.Swap(&other->jointdata_);
    sensordata_.Swap(&other->sensordata_);
    computeddata_.Swap(&other->computeddata_);
    std::swap(timediff_, other->timediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllSensorValuesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllSensorValuesMessage_descriptor_;
  metadata.reflection = AllSensorValuesMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
