// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GUICommunication.proto

#ifndef PROTOBUF_GUICommunication_2eproto__INCLUDED
#define PROTOBUF_GUICommunication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GUICommunication_2eproto();
void protobuf_AssignDesc_GUICommunication_2eproto();
void protobuf_ShutdownFile_GUICommunication_2eproto();

class XmlUpdate;
class HandShake;
class ExternalConfig;
class GenericACK;
class ResetMessage;
class UpdateMessage;

// ===================================================================

class XmlUpdate : public ::google::protobuf::Message {
 public:
  XmlUpdate();
  virtual ~XmlUpdate();
  
  XmlUpdate(const XmlUpdate& from);
  
  inline XmlUpdate& operator=(const XmlUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmlUpdate& default_instance();
  
  void Swap(XmlUpdate* other);
  
  // implements Message ----------------------------------------------
  
  XmlUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XmlUpdate& from);
  void MergeFrom(const XmlUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string keyword = 1;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 1;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:XmlUpdate)
 private:
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* keyword_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static XmlUpdate* default_instance_;
};
// -------------------------------------------------------------------

class HandShake : public ::google::protobuf::Message {
 public:
  HandShake();
  virtual ~HandShake();
  
  HandShake(const HandShake& from);
  
  inline HandShake& operator=(const HandShake& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandShake& default_instance();
  
  void Swap(HandShake* other);
  
  // implements Message ----------------------------------------------
  
  HandShake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandShake& from);
  void MergeFrom(const HandShake& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string headId = 1;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIdFieldNumber = 1;
  inline const ::std::string& headid() const;
  inline void set_headid(const ::std::string& value);
  inline void set_headid(const char* value);
  inline void set_headid(const char* value, size_t size);
  inline ::std::string* mutable_headid();
  inline ::std::string* release_headid();
  
  // required string bodyId = 2;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIdFieldNumber = 2;
  inline const ::std::string& bodyid() const;
  inline void set_bodyid(const ::std::string& value);
  inline void set_bodyid(const char* value);
  inline void set_bodyid(const char* value, size_t size);
  inline ::std::string* mutable_bodyid();
  inline ::std::string* release_bodyid();
  
  // required uint32 checksum = 3;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:HandShake)
 private:
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* headid_;
  ::std::string* bodyid_;
  ::google::protobuf::uint32 checksum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static HandShake* default_instance_;
};
// -------------------------------------------------------------------

class ExternalConfig : public ::google::protobuf::Message {
 public:
  ExternalConfig();
  virtual ~ExternalConfig();
  
  ExternalConfig(const ExternalConfig& from);
  
  inline ExternalConfig& operator=(const ExternalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalConfig& default_instance();
  
  void Swap(ExternalConfig* other);
  
  // implements Message ----------------------------------------------
  
  ExternalConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalConfig& from);
  void MergeFrom(const ExternalConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string messageid = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageidFieldNumber = 1;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  
  // required uint32 targethost = 2;
  inline bool has_targethost() const;
  inline void clear_targethost();
  static const int kTargethostFieldNumber = 2;
  inline ::google::protobuf::uint32 targethost() const;
  inline void set_targethost(::google::protobuf::uint32 value);
  
  // repeated .XmlUpdate updateXml = 3;
  inline int updatexml_size() const;
  inline void clear_updatexml();
  static const int kUpdateXmlFieldNumber = 3;
  inline const ::XmlUpdate& updatexml(int index) const;
  inline ::XmlUpdate* mutable_updatexml(int index);
  inline ::XmlUpdate* add_updatexml();
  inline const ::google::protobuf::RepeatedPtrField< ::XmlUpdate >&
      updatexml() const;
  inline ::google::protobuf::RepeatedPtrField< ::XmlUpdate >*
      mutable_updatexml();
  
  // repeated string resetActivities = 4;
  inline int resetactivities_size() const;
  inline void clear_resetactivities();
  static const int kResetActivitiesFieldNumber = 4;
  inline const ::std::string& resetactivities(int index) const;
  inline ::std::string* mutable_resetactivities(int index);
  inline void set_resetactivities(int index, const ::std::string& value);
  inline void set_resetactivities(int index, const char* value);
  inline void set_resetactivities(int index, const char* value, size_t size);
  inline ::std::string* add_resetactivities();
  inline void add_resetactivities(const ::std::string& value);
  inline void add_resetactivities(const char* value);
  inline void add_resetactivities(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resetactivities() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resetactivities();
  
  // required bool handOffRequest = 5;
  inline bool has_handoffrequest() const;
  inline void clear_handoffrequest();
  static const int kHandOffRequestFieldNumber = 5;
  inline bool handoffrequest() const;
  inline void set_handoffrequest(bool value);
  
  // @@protoc_insertion_point(class_scope:ExternalConfig)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_targethost();
  inline void clear_has_targethost();
  inline void set_has_handoffrequest();
  inline void clear_has_handoffrequest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* messageid_;
  ::google::protobuf::RepeatedPtrField< ::XmlUpdate > updatexml_;
  ::google::protobuf::uint32 targethost_;
  bool handoffrequest_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resetactivities_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static ExternalConfig* default_instance_;
};
// -------------------------------------------------------------------

class GenericACK : public ::google::protobuf::Message {
 public:
  GenericACK();
  virtual ~GenericACK();
  
  GenericACK(const GenericACK& from);
  
  inline GenericACK& operator=(const GenericACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericACK& default_instance();
  
  void Swap(GenericACK* other);
  
  // implements Message ----------------------------------------------
  
  GenericACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericACK& from);
  void MergeFrom(const GenericACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hostid = 1;
  inline bool has_hostid() const;
  inline void clear_hostid();
  static const int kHostidFieldNumber = 1;
  inline ::google::protobuf::uint32 hostid() const;
  inline void set_hostid(::google::protobuf::uint32 value);
  
  // required string messageid = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageidFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  
  // optional .HandShake handshaking = 3;
  inline bool has_handshaking() const;
  inline void clear_handshaking();
  static const int kHandshakingFieldNumber = 3;
  inline const ::HandShake& handshaking() const;
  inline ::HandShake* mutable_handshaking();
  inline ::HandShake* release_handshaking();
  
  // required bool ownlock = 4;
  inline bool has_ownlock() const;
  inline void clear_ownlock();
  static const int kOwnlockFieldNumber = 4;
  inline bool ownlock() const;
  inline void set_ownlock(bool value);
  
  // @@protoc_insertion_point(class_scope:GenericACK)
 private:
  inline void set_has_hostid();
  inline void clear_has_hostid();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_handshaking();
  inline void clear_has_handshaking();
  inline void set_has_ownlock();
  inline void clear_has_ownlock();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* messageid_;
  ::google::protobuf::uint32 hostid_;
  bool ownlock_;
  ::HandShake* handshaking_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static GenericACK* default_instance_;
};
// -------------------------------------------------------------------

class ResetMessage : public ::google::protobuf::Message {
 public:
  ResetMessage();
  virtual ~ResetMessage();
  
  ResetMessage(const ResetMessage& from);
  
  inline ResetMessage& operator=(const ResetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetMessage& default_instance();
  
  void Swap(ResetMessage* other);
  
  // implements Message ----------------------------------------------
  
  ResetMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetMessage& from);
  void MergeFrom(const ResetMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string resetActivities = 1;
  inline int resetactivities_size() const;
  inline void clear_resetactivities();
  static const int kResetActivitiesFieldNumber = 1;
  inline const ::std::string& resetactivities(int index) const;
  inline ::std::string* mutable_resetactivities(int index);
  inline void set_resetactivities(int index, const ::std::string& value);
  inline void set_resetactivities(int index, const char* value);
  inline void set_resetactivities(int index, const char* value, size_t size);
  inline ::std::string* add_resetactivities();
  inline void add_resetactivities(const ::std::string& value);
  inline void add_resetactivities(const char* value);
  inline void add_resetactivities(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resetactivities() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resetactivities();
  
  // @@protoc_insertion_point(class_scope:ResetMessage)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> resetactivities_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static ResetMessage* default_instance_;
};
// -------------------------------------------------------------------

class UpdateMessage : public ::google::protobuf::Message {
 public:
  UpdateMessage();
  virtual ~UpdateMessage();
  
  UpdateMessage(const UpdateMessage& from);
  
  inline UpdateMessage& operator=(const UpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMessage& default_instance();
  
  void Swap(UpdateMessage* other);
  
  // implements Message ----------------------------------------------
  
  UpdateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateMessage& from);
  void MergeFrom(const UpdateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .XmlUpdate updateXml = 1;
  inline int updatexml_size() const;
  inline void clear_updatexml();
  static const int kUpdateXmlFieldNumber = 1;
  inline const ::XmlUpdate& updatexml(int index) const;
  inline ::XmlUpdate* mutable_updatexml(int index);
  inline ::XmlUpdate* add_updatexml();
  inline const ::google::protobuf::RepeatedPtrField< ::XmlUpdate >&
      updatexml() const;
  inline ::google::protobuf::RepeatedPtrField< ::XmlUpdate >*
      mutable_updatexml();
  
  // @@protoc_insertion_point(class_scope:UpdateMessage)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::XmlUpdate > updatexml_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GUICommunication_2eproto();
  friend void protobuf_AssignDesc_GUICommunication_2eproto();
  friend void protobuf_ShutdownFile_GUICommunication_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// XmlUpdate

// required string keyword = 1;
inline bool XmlUpdate::has_keyword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XmlUpdate::set_has_keyword() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XmlUpdate::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XmlUpdate::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& XmlUpdate::keyword() const {
  return *keyword_;
}
inline void XmlUpdate::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void XmlUpdate::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void XmlUpdate::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* XmlUpdate::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  return keyword_;
}
inline ::std::string* XmlUpdate::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool XmlUpdate::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XmlUpdate::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XmlUpdate::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XmlUpdate::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& XmlUpdate::value() const {
  return *value_;
}
inline void XmlUpdate::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void XmlUpdate::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void XmlUpdate::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* XmlUpdate::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* XmlUpdate::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HandShake

// required string headId = 1;
inline bool HandShake::has_headid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandShake::set_has_headid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandShake::clear_has_headid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandShake::clear_headid() {
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    headid_->clear();
  }
  clear_has_headid();
}
inline const ::std::string& HandShake::headid() const {
  return *headid_;
}
inline void HandShake::set_headid(const ::std::string& value) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(value);
}
inline void HandShake::set_headid(const char* value) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(value);
}
inline void HandShake::set_headid(const char* value, size_t size) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandShake::mutable_headid() {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  return headid_;
}
inline ::std::string* HandShake::release_headid() {
  clear_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headid_;
    headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string bodyId = 2;
inline bool HandShake::has_bodyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandShake::set_has_bodyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandShake::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandShake::clear_bodyid() {
  if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
    bodyid_->clear();
  }
  clear_has_bodyid();
}
inline const ::std::string& HandShake::bodyid() const {
  return *bodyid_;
}
inline void HandShake::set_bodyid(const ::std::string& value) {
  set_has_bodyid();
  if (bodyid_ == &::google::protobuf::internal::kEmptyString) {
    bodyid_ = new ::std::string;
  }
  bodyid_->assign(value);
}
inline void HandShake::set_bodyid(const char* value) {
  set_has_bodyid();
  if (bodyid_ == &::google::protobuf::internal::kEmptyString) {
    bodyid_ = new ::std::string;
  }
  bodyid_->assign(value);
}
inline void HandShake::set_bodyid(const char* value, size_t size) {
  set_has_bodyid();
  if (bodyid_ == &::google::protobuf::internal::kEmptyString) {
    bodyid_ = new ::std::string;
  }
  bodyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandShake::mutable_bodyid() {
  set_has_bodyid();
  if (bodyid_ == &::google::protobuf::internal::kEmptyString) {
    bodyid_ = new ::std::string;
  }
  return bodyid_;
}
inline ::std::string* HandShake::release_bodyid() {
  clear_has_bodyid();
  if (bodyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bodyid_;
    bodyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 checksum = 3;
inline bool HandShake::has_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandShake::set_has_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandShake::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandShake::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 HandShake::checksum() const {
  return checksum_;
}
inline void HandShake::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// -------------------------------------------------------------------

// ExternalConfig

// required string messageid = 1;
inline bool ExternalConfig::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalConfig::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalConfig::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalConfig::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& ExternalConfig::messageid() const {
  return *messageid_;
}
inline void ExternalConfig::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void ExternalConfig::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void ExternalConfig::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExternalConfig::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* ExternalConfig::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 targethost = 2;
inline bool ExternalConfig::has_targethost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalConfig::set_has_targethost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalConfig::clear_has_targethost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalConfig::clear_targethost() {
  targethost_ = 0u;
  clear_has_targethost();
}
inline ::google::protobuf::uint32 ExternalConfig::targethost() const {
  return targethost_;
}
inline void ExternalConfig::set_targethost(::google::protobuf::uint32 value) {
  set_has_targethost();
  targethost_ = value;
}

// repeated .XmlUpdate updateXml = 3;
inline int ExternalConfig::updatexml_size() const {
  return updatexml_.size();
}
inline void ExternalConfig::clear_updatexml() {
  updatexml_.Clear();
}
inline const ::XmlUpdate& ExternalConfig::updatexml(int index) const {
  return updatexml_.Get(index);
}
inline ::XmlUpdate* ExternalConfig::mutable_updatexml(int index) {
  return updatexml_.Mutable(index);
}
inline ::XmlUpdate* ExternalConfig::add_updatexml() {
  return updatexml_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XmlUpdate >&
ExternalConfig::updatexml() const {
  return updatexml_;
}
inline ::google::protobuf::RepeatedPtrField< ::XmlUpdate >*
ExternalConfig::mutable_updatexml() {
  return &updatexml_;
}

// repeated string resetActivities = 4;
inline int ExternalConfig::resetactivities_size() const {
  return resetactivities_.size();
}
inline void ExternalConfig::clear_resetactivities() {
  resetactivities_.Clear();
}
inline const ::std::string& ExternalConfig::resetactivities(int index) const {
  return resetactivities_.Get(index);
}
inline ::std::string* ExternalConfig::mutable_resetactivities(int index) {
  return resetactivities_.Mutable(index);
}
inline void ExternalConfig::set_resetactivities(int index, const ::std::string& value) {
  resetactivities_.Mutable(index)->assign(value);
}
inline void ExternalConfig::set_resetactivities(int index, const char* value) {
  resetactivities_.Mutable(index)->assign(value);
}
inline void ExternalConfig::set_resetactivities(int index, const char* value, size_t size) {
  resetactivities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExternalConfig::add_resetactivities() {
  return resetactivities_.Add();
}
inline void ExternalConfig::add_resetactivities(const ::std::string& value) {
  resetactivities_.Add()->assign(value);
}
inline void ExternalConfig::add_resetactivities(const char* value) {
  resetactivities_.Add()->assign(value);
}
inline void ExternalConfig::add_resetactivities(const char* value, size_t size) {
  resetactivities_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExternalConfig::resetactivities() const {
  return resetactivities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExternalConfig::mutable_resetactivities() {
  return &resetactivities_;
}

// required bool handOffRequest = 5;
inline bool ExternalConfig::has_handoffrequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExternalConfig::set_has_handoffrequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExternalConfig::clear_has_handoffrequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExternalConfig::clear_handoffrequest() {
  handoffrequest_ = false;
  clear_has_handoffrequest();
}
inline bool ExternalConfig::handoffrequest() const {
  return handoffrequest_;
}
inline void ExternalConfig::set_handoffrequest(bool value) {
  set_has_handoffrequest();
  handoffrequest_ = value;
}

// -------------------------------------------------------------------

// GenericACK

// required uint32 hostid = 1;
inline bool GenericACK::has_hostid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericACK::set_has_hostid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericACK::clear_has_hostid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericACK::clear_hostid() {
  hostid_ = 0u;
  clear_has_hostid();
}
inline ::google::protobuf::uint32 GenericACK::hostid() const {
  return hostid_;
}
inline void GenericACK::set_hostid(::google::protobuf::uint32 value) {
  set_has_hostid();
  hostid_ = value;
}

// required string messageid = 2;
inline bool GenericACK::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericACK::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericACK::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericACK::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& GenericACK::messageid() const {
  return *messageid_;
}
inline void GenericACK::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void GenericACK::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void GenericACK::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericACK::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* GenericACK::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HandShake handshaking = 3;
inline bool GenericACK::has_handshaking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericACK::set_has_handshaking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenericACK::clear_has_handshaking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenericACK::clear_handshaking() {
  if (handshaking_ != NULL) handshaking_->::HandShake::Clear();
  clear_has_handshaking();
}
inline const ::HandShake& GenericACK::handshaking() const {
  return handshaking_ != NULL ? *handshaking_ : *default_instance_->handshaking_;
}
inline ::HandShake* GenericACK::mutable_handshaking() {
  set_has_handshaking();
  if (handshaking_ == NULL) handshaking_ = new ::HandShake;
  return handshaking_;
}
inline ::HandShake* GenericACK::release_handshaking() {
  clear_has_handshaking();
  ::HandShake* temp = handshaking_;
  handshaking_ = NULL;
  return temp;
}

// required bool ownlock = 4;
inline bool GenericACK::has_ownlock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericACK::set_has_ownlock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GenericACK::clear_has_ownlock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GenericACK::clear_ownlock() {
  ownlock_ = false;
  clear_has_ownlock();
}
inline bool GenericACK::ownlock() const {
  return ownlock_;
}
inline void GenericACK::set_ownlock(bool value) {
  set_has_ownlock();
  ownlock_ = value;
}

// -------------------------------------------------------------------

// ResetMessage

// repeated string resetActivities = 1;
inline int ResetMessage::resetactivities_size() const {
  return resetactivities_.size();
}
inline void ResetMessage::clear_resetactivities() {
  resetactivities_.Clear();
}
inline const ::std::string& ResetMessage::resetactivities(int index) const {
  return resetactivities_.Get(index);
}
inline ::std::string* ResetMessage::mutable_resetactivities(int index) {
  return resetactivities_.Mutable(index);
}
inline void ResetMessage::set_resetactivities(int index, const ::std::string& value) {
  resetactivities_.Mutable(index)->assign(value);
}
inline void ResetMessage::set_resetactivities(int index, const char* value) {
  resetactivities_.Mutable(index)->assign(value);
}
inline void ResetMessage::set_resetactivities(int index, const char* value, size_t size) {
  resetactivities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResetMessage::add_resetactivities() {
  return resetactivities_.Add();
}
inline void ResetMessage::add_resetactivities(const ::std::string& value) {
  resetactivities_.Add()->assign(value);
}
inline void ResetMessage::add_resetactivities(const char* value) {
  resetactivities_.Add()->assign(value);
}
inline void ResetMessage::add_resetactivities(const char* value, size_t size) {
  resetactivities_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetMessage::resetactivities() const {
  return resetactivities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetMessage::mutable_resetactivities() {
  return &resetactivities_;
}

// -------------------------------------------------------------------

// UpdateMessage

// repeated .XmlUpdate updateXml = 1;
inline int UpdateMessage::updatexml_size() const {
  return updatexml_.size();
}
inline void UpdateMessage::clear_updatexml() {
  updatexml_.Clear();
}
inline const ::XmlUpdate& UpdateMessage::updatexml(int index) const {
  return updatexml_.Get(index);
}
inline ::XmlUpdate* UpdateMessage::mutable_updatexml(int index) {
  return updatexml_.Mutable(index);
}
inline ::XmlUpdate* UpdateMessage::add_updatexml() {
  return updatexml_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XmlUpdate >&
UpdateMessage::updatexml() const {
  return updatexml_;
}
inline ::google::protobuf::RepeatedPtrField< ::XmlUpdate >*
UpdateMessage::mutable_updatexml() {
  return &updatexml_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GUICommunication_2eproto__INCLUDED
