// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gamecontroller.proto

#ifndef PROTOBUF_Gamecontroller_2eproto__INCLUDED
#define PROTOBUF_Gamecontroller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Gamecontroller_2eproto();
void protobuf_AssignDesc_Gamecontroller_2eproto();
void protobuf_ShutdownFile_Gamecontroller_2eproto();

class GameStateMessage;
class LedValues;
class LedChangeMessage;
class ConfigMessage;

// ===================================================================

class GameStateMessage : public ::google::protobuf::Message {
 public:
  GameStateMessage();
  virtual ~GameStateMessage();
  
  GameStateMessage(const GameStateMessage& from);
  
  inline GameStateMessage& operator=(const GameStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStateMessage& default_instance();
  
  void Swap(GameStateMessage* other);
  
  // implements Message ----------------------------------------------
  
  GameStateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStateMessage& from);
  void MergeFrom(const GameStateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 team_color = 7 [default = 0];
  inline bool has_team_color() const;
  inline void clear_team_color();
  static const int kTeamColorFieldNumber = 7;
  inline ::google::protobuf::uint32 team_color() const;
  inline void set_team_color(::google::protobuf::uint32 value);
  
  // required uint32 own_goal_color = 5 [default = 0];
  inline bool has_own_goal_color() const;
  inline void clear_own_goal_color();
  static const int kOwnGoalColorFieldNumber = 5;
  inline ::google::protobuf::uint32 own_goal_color() const;
  inline void set_own_goal_color(::google::protobuf::uint32 value);
  
  // required uint32 player_state = 8 [default = 0];
  inline bool has_player_state() const;
  inline void clear_player_state();
  static const int kPlayerStateFieldNumber = 8;
  inline ::google::protobuf::uint32 player_state() const;
  inline void set_player_state(::google::protobuf::uint32 value);
  
  // required uint32 game_state = 9 [default = 0];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 9;
  inline ::google::protobuf::uint32 game_state() const;
  inline void set_game_state(::google::protobuf::uint32 value);
  
  // required uint32 sec_game_state = 10 [default = 0];
  inline bool has_sec_game_state() const;
  inline void clear_sec_game_state();
  static const int kSecGameStateFieldNumber = 10;
  inline ::google::protobuf::uint32 sec_game_state() const;
  inline void set_sec_game_state(::google::protobuf::uint32 value);
  
  // required bool firstHalf = 3 [default = true];
  inline bool has_firsthalf() const;
  inline void clear_firsthalf();
  static const int kFirstHalfFieldNumber = 3;
  inline bool firsthalf() const;
  inline void set_firsthalf(bool value);
  
  // required uint32 penalty = 13 [default = 0];
  inline bool has_penalty() const;
  inline void clear_penalty();
  static const int kPenaltyFieldNumber = 13;
  inline ::google::protobuf::uint32 penalty() const;
  inline void set_penalty(::google::protobuf::uint32 value);
  
  // required bool kickoff = 12 [default = true];
  inline bool has_kickoff() const;
  inline void clear_kickoff();
  static const int kKickoffFieldNumber = 12;
  inline bool kickoff() const;
  inline void set_kickoff(bool value);
  
  // required uint32 our_score = 14 [default = 0];
  inline bool has_our_score() const;
  inline void clear_our_score();
  static const int kOurScoreFieldNumber = 14;
  inline ::google::protobuf::uint32 our_score() const;
  inline void set_our_score(::google::protobuf::uint32 value);
  
  // required uint32 otherteam_score = 15 [default = 0];
  inline bool has_otherteam_score() const;
  inline void clear_otherteam_score();
  static const int kOtherteamScoreFieldNumber = 15;
  inline ::google::protobuf::uint32 otherteam_score() const;
  inline void set_otherteam_score(::google::protobuf::uint32 value);
  
  // required uint32 override_state = 16 [default = 0];
  inline bool has_override_state() const;
  inline void clear_override_state();
  static const int kOverrideStateFieldNumber = 16;
  inline ::google::protobuf::uint32 override_state() const;
  inline void set_override_state(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:GameStateMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 team_color_;
  ::google::protobuf::uint32 own_goal_color_;
  ::google::protobuf::uint32 player_state_;
  ::google::protobuf::uint32 game_state_;
  ::google::protobuf::uint32 sec_game_state_;
  bool firsthalf_;
  ::google::protobuf::uint32 penalty_;
  bool kickoff_;
  ::google::protobuf::uint32 our_score_;
  ::google::protobuf::uint32 otherteam_score_;
  ::google::protobuf::uint32 override_state_;
  friend void  protobuf_AddDesc_Gamecontroller_2eproto();
  friend void protobuf_AssignDesc_Gamecontroller_2eproto();
  friend void protobuf_ShutdownFile_Gamecontroller_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GameStateMessage* default_instance_;
};
// -------------------------------------------------------------------

class LedValues : public ::google::protobuf::Message {
 public:
  LedValues();
  virtual ~LedValues();
  
  LedValues(const LedValues& from);
  
  inline LedValues& operator=(const LedValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LedValues& default_instance();
  
  void Swap(LedValues* other);
  
  // implements Message ----------------------------------------------
  
  LedValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LedValues& from);
  void MergeFrom(const LedValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string chain = 1 [default = ""];
  inline bool has_chain() const;
  inline void clear_chain();
  static const int kChainFieldNumber = 1;
  inline const ::std::string& chain() const;
  inline void set_chain(const ::std::string& value);
  inline void set_chain(const char* value);
  inline void set_chain(const char* value, size_t size);
  inline ::std::string* mutable_chain();
  
  // required string color = 2 [default = "off"];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  
  // @@protoc_insertion_point(class_scope:LedValues)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* chain_;
  static const ::std::string _default_chain_;
  ::std::string* color_;
  static const ::std::string _default_color_;
  friend void  protobuf_AddDesc_Gamecontroller_2eproto();
  friend void protobuf_AssignDesc_Gamecontroller_2eproto();
  friend void protobuf_ShutdownFile_Gamecontroller_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LedValues* default_instance_;
};
// -------------------------------------------------------------------

class LedChangeMessage : public ::google::protobuf::Message {
 public:
  LedChangeMessage();
  virtual ~LedChangeMessage();
  
  LedChangeMessage(const LedChangeMessage& from);
  
  inline LedChangeMessage& operator=(const LedChangeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LedChangeMessage& default_instance();
  
  void Swap(LedChangeMessage* other);
  
  // implements Message ----------------------------------------------
  
  LedChangeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LedChangeMessage& from);
  void MergeFrom(const LedChangeMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .LedValues leds = 6;
  inline int leds_size() const;
  inline void clear_leds();
  static const int kLedsFieldNumber = 6;
  inline const ::LedValues& leds(int index) const;
  inline ::LedValues* mutable_leds(int index);
  inline ::LedValues* add_leds();
  inline const ::google::protobuf::RepeatedPtrField< ::LedValues >&
      leds() const;
  inline ::google::protobuf::RepeatedPtrField< ::LedValues >*
      mutable_leds();
  
  // @@protoc_insertion_point(class_scope:LedChangeMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::LedValues > leds_;
  friend void  protobuf_AddDesc_Gamecontroller_2eproto();
  friend void protobuf_AssignDesc_Gamecontroller_2eproto();
  friend void protobuf_ShutdownFile_Gamecontroller_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LedChangeMessage* default_instance_;
};
// -------------------------------------------------------------------

class ConfigMessage : public ::google::protobuf::Message {
 public:
  ConfigMessage();
  virtual ~ConfigMessage();
  
  ConfigMessage(const ConfigMessage& from);
  
  inline ConfigMessage& operator=(const ConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMessage& default_instance();
  
  void Swap(ConfigMessage* other);
  
  // implements Message ----------------------------------------------
  
  ConfigMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigMessage& from);
  void MergeFrom(const ConfigMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 team_number = 1 [default = 9];
  inline bool has_team_number() const;
  inline void clear_team_number();
  static const int kTeamNumberFieldNumber = 1;
  inline ::google::protobuf::int32 team_number() const;
  inline void set_team_number(::google::protobuf::int32 value);
  
  // required int32 player_number = 2 [default = 1];
  inline bool has_player_number() const;
  inline void clear_player_number();
  static const int kPlayerNumberFieldNumber = 2;
  inline ::google::protobuf::int32 player_number() const;
  inline void set_player_number(::google::protobuf::int32 value);
  
  // required int32 default_color = 4 [default = 0];
  inline bool has_default_color() const;
  inline void clear_default_color();
  static const int kDefaultColorFieldNumber = 4;
  inline ::google::protobuf::int32 default_color() const;
  inline void set_default_color(::google::protobuf::int32 value);
  
  // required int32 port = 3 [default = 3838];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ConfigMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 team_number_;
  ::google::protobuf::int32 player_number_;
  ::google::protobuf::int32 default_color_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_Gamecontroller_2eproto();
  friend void protobuf_AssignDesc_Gamecontroller_2eproto();
  friend void protobuf_ShutdownFile_Gamecontroller_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConfigMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GameStateMessage

// required uint32 team_color = 7 [default = 0];
inline bool GameStateMessage::has_team_color() const {
  return _has_bit(0);
}
inline void GameStateMessage::clear_team_color() {
  team_color_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 GameStateMessage::team_color() const {
  return team_color_;
}
inline void GameStateMessage::set_team_color(::google::protobuf::uint32 value) {
  _set_bit(0);
  team_color_ = value;
}

// required uint32 own_goal_color = 5 [default = 0];
inline bool GameStateMessage::has_own_goal_color() const {
  return _has_bit(1);
}
inline void GameStateMessage::clear_own_goal_color() {
  own_goal_color_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 GameStateMessage::own_goal_color() const {
  return own_goal_color_;
}
inline void GameStateMessage::set_own_goal_color(::google::protobuf::uint32 value) {
  _set_bit(1);
  own_goal_color_ = value;
}

// required uint32 player_state = 8 [default = 0];
inline bool GameStateMessage::has_player_state() const {
  return _has_bit(2);
}
inline void GameStateMessage::clear_player_state() {
  player_state_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 GameStateMessage::player_state() const {
  return player_state_;
}
inline void GameStateMessage::set_player_state(::google::protobuf::uint32 value) {
  _set_bit(2);
  player_state_ = value;
}

// required uint32 game_state = 9 [default = 0];
inline bool GameStateMessage::has_game_state() const {
  return _has_bit(3);
}
inline void GameStateMessage::clear_game_state() {
  game_state_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 GameStateMessage::game_state() const {
  return game_state_;
}
inline void GameStateMessage::set_game_state(::google::protobuf::uint32 value) {
  _set_bit(3);
  game_state_ = value;
}

// required uint32 sec_game_state = 10 [default = 0];
inline bool GameStateMessage::has_sec_game_state() const {
  return _has_bit(4);
}
inline void GameStateMessage::clear_sec_game_state() {
  sec_game_state_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 GameStateMessage::sec_game_state() const {
  return sec_game_state_;
}
inline void GameStateMessage::set_sec_game_state(::google::protobuf::uint32 value) {
  _set_bit(4);
  sec_game_state_ = value;
}

// required bool firstHalf = 3 [default = true];
inline bool GameStateMessage::has_firsthalf() const {
  return _has_bit(5);
}
inline void GameStateMessage::clear_firsthalf() {
  firsthalf_ = true;
  _clear_bit(5);
}
inline bool GameStateMessage::firsthalf() const {
  return firsthalf_;
}
inline void GameStateMessage::set_firsthalf(bool value) {
  _set_bit(5);
  firsthalf_ = value;
}

// required uint32 penalty = 13 [default = 0];
inline bool GameStateMessage::has_penalty() const {
  return _has_bit(6);
}
inline void GameStateMessage::clear_penalty() {
  penalty_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 GameStateMessage::penalty() const {
  return penalty_;
}
inline void GameStateMessage::set_penalty(::google::protobuf::uint32 value) {
  _set_bit(6);
  penalty_ = value;
}

// required bool kickoff = 12 [default = true];
inline bool GameStateMessage::has_kickoff() const {
  return _has_bit(7);
}
inline void GameStateMessage::clear_kickoff() {
  kickoff_ = true;
  _clear_bit(7);
}
inline bool GameStateMessage::kickoff() const {
  return kickoff_;
}
inline void GameStateMessage::set_kickoff(bool value) {
  _set_bit(7);
  kickoff_ = value;
}

// required uint32 our_score = 14 [default = 0];
inline bool GameStateMessage::has_our_score() const {
  return _has_bit(8);
}
inline void GameStateMessage::clear_our_score() {
  our_score_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 GameStateMessage::our_score() const {
  return our_score_;
}
inline void GameStateMessage::set_our_score(::google::protobuf::uint32 value) {
  _set_bit(8);
  our_score_ = value;
}

// required uint32 otherteam_score = 15 [default = 0];
inline bool GameStateMessage::has_otherteam_score() const {
  return _has_bit(9);
}
inline void GameStateMessage::clear_otherteam_score() {
  otherteam_score_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 GameStateMessage::otherteam_score() const {
  return otherteam_score_;
}
inline void GameStateMessage::set_otherteam_score(::google::protobuf::uint32 value) {
  _set_bit(9);
  otherteam_score_ = value;
}

// required uint32 override_state = 16 [default = 0];
inline bool GameStateMessage::has_override_state() const {
  return _has_bit(10);
}
inline void GameStateMessage::clear_override_state() {
  override_state_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 GameStateMessage::override_state() const {
  return override_state_;
}
inline void GameStateMessage::set_override_state(::google::protobuf::uint32 value) {
  _set_bit(10);
  override_state_ = value;
}

// -------------------------------------------------------------------

// LedValues

// required string chain = 1 [default = ""];
inline bool LedValues::has_chain() const {
  return _has_bit(0);
}
inline void LedValues::clear_chain() {
  if (chain_ != &_default_chain_) {
    chain_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& LedValues::chain() const {
  return *chain_;
}
inline void LedValues::set_chain(const ::std::string& value) {
  _set_bit(0);
  if (chain_ == &_default_chain_) {
    chain_ = new ::std::string;
  }
  chain_->assign(value);
}
inline void LedValues::set_chain(const char* value) {
  _set_bit(0);
  if (chain_ == &_default_chain_) {
    chain_ = new ::std::string;
  }
  chain_->assign(value);
}
inline void LedValues::set_chain(const char* value, size_t size) {
  _set_bit(0);
  if (chain_ == &_default_chain_) {
    chain_ = new ::std::string;
  }
  chain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LedValues::mutable_chain() {
  _set_bit(0);
  if (chain_ == &_default_chain_) {
    chain_ = new ::std::string;
  }
  return chain_;
}

// required string color = 2 [default = "off"];
inline bool LedValues::has_color() const {
  return _has_bit(1);
}
inline void LedValues::clear_color() {
  if (color_ != &_default_color_) {
    color_->assign(_default_color_);
  }
  _clear_bit(1);
}
inline const ::std::string& LedValues::color() const {
  return *color_;
}
inline void LedValues::set_color(const ::std::string& value) {
  _set_bit(1);
  if (color_ == &_default_color_) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void LedValues::set_color(const char* value) {
  _set_bit(1);
  if (color_ == &_default_color_) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void LedValues::set_color(const char* value, size_t size) {
  _set_bit(1);
  if (color_ == &_default_color_) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LedValues::mutable_color() {
  _set_bit(1);
  if (color_ == &_default_color_) {
    color_ = new ::std::string(_default_color_);
  }
  return color_;
}

// -------------------------------------------------------------------

// LedChangeMessage

// repeated .LedValues leds = 6;
inline int LedChangeMessage::leds_size() const {
  return leds_.size();
}
inline void LedChangeMessage::clear_leds() {
  leds_.Clear();
}
inline const ::LedValues& LedChangeMessage::leds(int index) const {
  return leds_.Get(index);
}
inline ::LedValues* LedChangeMessage::mutable_leds(int index) {
  return leds_.Mutable(index);
}
inline ::LedValues* LedChangeMessage::add_leds() {
  return leds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LedValues >&
LedChangeMessage::leds() const {
  return leds_;
}
inline ::google::protobuf::RepeatedPtrField< ::LedValues >*
LedChangeMessage::mutable_leds() {
  return &leds_;
}

// -------------------------------------------------------------------

// ConfigMessage

// required int32 team_number = 1 [default = 9];
inline bool ConfigMessage::has_team_number() const {
  return _has_bit(0);
}
inline void ConfigMessage::clear_team_number() {
  team_number_ = 9;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ConfigMessage::team_number() const {
  return team_number_;
}
inline void ConfigMessage::set_team_number(::google::protobuf::int32 value) {
  _set_bit(0);
  team_number_ = value;
}

// required int32 player_number = 2 [default = 1];
inline bool ConfigMessage::has_player_number() const {
  return _has_bit(1);
}
inline void ConfigMessage::clear_player_number() {
  player_number_ = 1;
  _clear_bit(1);
}
inline ::google::protobuf::int32 ConfigMessage::player_number() const {
  return player_number_;
}
inline void ConfigMessage::set_player_number(::google::protobuf::int32 value) {
  _set_bit(1);
  player_number_ = value;
}

// required int32 default_color = 4 [default = 0];
inline bool ConfigMessage::has_default_color() const {
  return _has_bit(2);
}
inline void ConfigMessage::clear_default_color() {
  default_color_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 ConfigMessage::default_color() const {
  return default_color_;
}
inline void ConfigMessage::set_default_color(::google::protobuf::int32 value) {
  _set_bit(2);
  default_color_ = value;
}

// required int32 port = 3 [default = 3838];
inline bool ConfigMessage::has_port() const {
  return _has_bit(3);
}
inline void ConfigMessage::clear_port() {
  port_ = 3838;
  _clear_bit(3);
}
inline ::google::protobuf::int32 ConfigMessage::port() const {
  return port_;
}
inline void ConfigMessage::set_port(::google::protobuf::int32 value) {
  _set_bit(3);
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Gamecontroller_2eproto__INCLUDED
