// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ObstacleAvoidanceMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ObstacleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleMessageArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleMessageArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisionObstacleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisionObstacleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPlanningRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPlanningRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPlanningResultMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPlanningResultMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ObstacleAvoidanceMessage_2eproto() {
  protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ObstacleAvoidanceMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ObstacleMessage_descriptor_ = file->message_type(0);
  static const int ObstacleMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessage, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessage, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessage, certainty_),
  };
  ObstacleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleMessage_descriptor_,
      ObstacleMessage::default_instance_,
      ObstacleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleMessage));
  ObstacleMessageArray_descriptor_ = file->message_type(1);
  static const int ObstacleMessageArray_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessageArray, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessageArray, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessageArray, certainty_),
  };
  ObstacleMessageArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleMessageArray_descriptor_,
      ObstacleMessageArray::default_instance_,
      ObstacleMessageArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessageArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleMessageArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleMessageArray));
  VisionObstacleMessage_descriptor_ = file->message_type(2);
  static const int VisionObstacleMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionObstacleMessage, obstacles_),
  };
  VisionObstacleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisionObstacleMessage_descriptor_,
      VisionObstacleMessage::default_instance_,
      VisionObstacleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionObstacleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionObstacleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisionObstacleMessage));
  PathPlanningRequestMessage_descriptor_ = file->message_type(3);
  static const int PathPlanningRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningRequestMessage, gotox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningRequestMessage, gotoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningRequestMessage, gotoangle_),
  };
  PathPlanningRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathPlanningRequestMessage_descriptor_,
      PathPlanningRequestMessage::default_instance_,
      PathPlanningRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathPlanningRequestMessage));
  PathPlanningResultMessage_descriptor_ = file->message_type(4);
  static const int PathPlanningResultMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningResultMessage, movetox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningResultMessage, movetoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningResultMessage, movetoangle_),
  };
  PathPlanningResultMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathPlanningResultMessage_descriptor_,
      PathPlanningResultMessage::default_instance_,
      PathPlanningResultMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningResultMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningResultMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathPlanningResultMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ObstacleAvoidanceMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleMessage_descriptor_, &ObstacleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleMessageArray_descriptor_, &ObstacleMessageArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisionObstacleMessage_descriptor_, &VisionObstacleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathPlanningRequestMessage_descriptor_, &PathPlanningRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathPlanningResultMessage_descriptor_, &PathPlanningResultMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ObstacleAvoidanceMessage_2eproto() {
  delete ObstacleMessage::default_instance_;
  delete ObstacleMessage_reflection_;
  delete ObstacleMessageArray::default_instance_;
  delete ObstacleMessageArray_reflection_;
  delete VisionObstacleMessage::default_instance_;
  delete VisionObstacleMessage_reflection_;
  delete PathPlanningRequestMessage::default_instance_;
  delete PathPlanningRequestMessage_reflection_;
  delete PathPlanningResultMessage::default_instance_;
  delete PathPlanningResultMessage_reflection_;
}

void protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036ObstacleAvoidanceMessage.proto\"S\n\017Obst"
    "acleMessage\022\025\n\tdirection\030\001 \002(\005:\002-1\022\023\n\010di"
    "stance\030\002 \002(\002:\0010\022\024\n\tcertainty\030\003 \002(\002:\0010\"N\n"
    "\024ObstacleMessageArray\022\021\n\tdirection\030\001 \003(\005"
    "\022\020\n\010distance\030\002 \003(\002\022\021\n\tcertainty\030\003 \003(\002\"<\n"
    "\025VisionObstacleMessage\022#\n\tobstacles\030\001 \003("
    "\0132\020.ObstacleMessage\"V\n\032PathPlanningReque"
    "stMessage\022\020\n\005goToX\030\001 \002(\002:\0010\022\020\n\005goToY\030\002 \002"
    "(\002:\0010\022\024\n\tgoToAngle\030\003 \002(\002:\0010\"[\n\031PathPlann"
    "ingResultMessage\022\022\n\007moveToX\030\001 \002(\002:\0010\022\022\n\007"
    "moveToY\030\002 \002(\002:\0010\022\026\n\013moveToAngle\030\003 \002(\002:\0010", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ObstacleAvoidanceMessage.proto", &protobuf_RegisterTypes);
  ObstacleMessage::default_instance_ = new ObstacleMessage();
  ObstacleMessageArray::default_instance_ = new ObstacleMessageArray();
  VisionObstacleMessage::default_instance_ = new VisionObstacleMessage();
  PathPlanningRequestMessage::default_instance_ = new PathPlanningRequestMessage();
  PathPlanningResultMessage::default_instance_ = new PathPlanningResultMessage();
  ObstacleMessage::default_instance_->InitAsDefaultInstance();
  ObstacleMessageArray::default_instance_->InitAsDefaultInstance();
  VisionObstacleMessage::default_instance_->InitAsDefaultInstance();
  PathPlanningRequestMessage::default_instance_->InitAsDefaultInstance();
  PathPlanningResultMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ObstacleAvoidanceMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ObstacleAvoidanceMessage_2eproto {
  StaticDescriptorInitializer_ObstacleAvoidanceMessage_2eproto() {
    protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();
  }
} static_descriptor_initializer_ObstacleAvoidanceMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ObstacleMessage::kDirectionFieldNumber;
const int ObstacleMessage::kDistanceFieldNumber;
const int ObstacleMessage::kCertaintyFieldNumber;
#endif  // !_MSC_VER

ObstacleMessage::ObstacleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObstacleMessage::InitAsDefaultInstance() {
}

ObstacleMessage::ObstacleMessage(const ObstacleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObstacleMessage::SharedCtor() {
  _cached_size_ = 0;
  direction_ = -1;
  distance_ = 0;
  certainty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleMessage::~ObstacleMessage() {
  SharedDtor();
}

void ObstacleMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleMessage_descriptor_;
}

const ObstacleMessage& ObstacleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();  return *default_instance_;
}

ObstacleMessage* ObstacleMessage::default_instance_ = NULL;

ObstacleMessage* ObstacleMessage::New() const {
  return new ObstacleMessage;
}

void ObstacleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = -1;
    distance_ = 0;
    certainty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 direction = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_distance;
        break;
      }
      
      // required float distance = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_certainty;
        break;
      }
      
      // required float certainty = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_certainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &certainty_)));
          set_has_certainty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObstacleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 direction = 1 [default = -1];
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->direction(), output);
  }
  
  // required float distance = 2 [default = 0];
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }
  
  // required float certainty = 3 [default = 0];
  if (has_certainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->certainty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObstacleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 direction = 1 [default = -1];
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->direction(), target);
  }
  
  // required float distance = 2 [default = 0];
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }
  
  // required float certainty = 3 [default = 0];
  if (has_certainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->certainty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObstacleMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 direction = 1 [default = -1];
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }
    
    // required float distance = 2 [default = 0];
    if (has_distance()) {
      total_size += 1 + 4;
    }
    
    // required float certainty = 3 [default = 0];
    if (has_certainty()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleMessage::MergeFrom(const ObstacleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_certainty()) {
      set_certainty(from.certainty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleMessage::CopyFrom(const ObstacleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ObstacleMessage::Swap(ObstacleMessage* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(distance_, other->distance_);
    std::swap(certainty_, other->certainty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleMessage_descriptor_;
  metadata.reflection = ObstacleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObstacleMessageArray::kDirectionFieldNumber;
const int ObstacleMessageArray::kDistanceFieldNumber;
const int ObstacleMessageArray::kCertaintyFieldNumber;
#endif  // !_MSC_VER

ObstacleMessageArray::ObstacleMessageArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObstacleMessageArray::InitAsDefaultInstance() {
}

ObstacleMessageArray::ObstacleMessageArray(const ObstacleMessageArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObstacleMessageArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleMessageArray::~ObstacleMessageArray() {
  SharedDtor();
}

void ObstacleMessageArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleMessageArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleMessageArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleMessageArray_descriptor_;
}

const ObstacleMessageArray& ObstacleMessageArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();  return *default_instance_;
}

ObstacleMessageArray* ObstacleMessageArray::default_instance_ = NULL;

ObstacleMessageArray* ObstacleMessageArray::New() const {
  return new ObstacleMessageArray;
}

void ObstacleMessageArray::Clear() {
  direction_.Clear();
  distance_.Clear();
  certainty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleMessageArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_direction())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_direction())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_direction;
        if (input->ExpectTag(21)) goto parse_distance;
        break;
      }
      
      // repeated float distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_distance())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distance())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_distance;
        if (input->ExpectTag(29)) goto parse_certainty;
        break;
      }
      
      // repeated float certainty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_certainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_certainty())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_certainty())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_certainty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObstacleMessageArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 direction = 1;
  for (int i = 0; i < this->direction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->direction(i), output);
  }
  
  // repeated float distance = 2;
  for (int i = 0; i < this->distance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->distance(i), output);
  }
  
  // repeated float certainty = 3;
  for (int i = 0; i < this->certainty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->certainty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObstacleMessageArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 direction = 1;
  for (int i = 0; i < this->direction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->direction(i), target);
  }
  
  // repeated float distance = 2;
  for (int i = 0; i < this->distance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->distance(i), target);
  }
  
  // repeated float certainty = 3;
  for (int i = 0; i < this->certainty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->certainty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObstacleMessageArray::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 direction = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->direction_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->direction(i));
    }
    total_size += 1 * this->direction_size() + data_size;
  }
  
  // repeated float distance = 2;
  {
    int data_size = 0;
    data_size = 4 * this->distance_size();
    total_size += 1 * this->distance_size() + data_size;
  }
  
  // repeated float certainty = 3;
  {
    int data_size = 0;
    data_size = 4 * this->certainty_size();
    total_size += 1 * this->certainty_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleMessageArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleMessageArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleMessageArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleMessageArray::MergeFrom(const ObstacleMessageArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  direction_.MergeFrom(from.direction_);
  distance_.MergeFrom(from.distance_);
  certainty_.MergeFrom(from.certainty_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleMessageArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleMessageArray::CopyFrom(const ObstacleMessageArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleMessageArray::IsInitialized() const {
  
  return true;
}

void ObstacleMessageArray::Swap(ObstacleMessageArray* other) {
  if (other != this) {
    direction_.Swap(&other->direction_);
    distance_.Swap(&other->distance_);
    certainty_.Swap(&other->certainty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleMessageArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleMessageArray_descriptor_;
  metadata.reflection = ObstacleMessageArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisionObstacleMessage::kObstaclesFieldNumber;
#endif  // !_MSC_VER

VisionObstacleMessage::VisionObstacleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisionObstacleMessage::InitAsDefaultInstance() {
}

VisionObstacleMessage::VisionObstacleMessage(const VisionObstacleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisionObstacleMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionObstacleMessage::~VisionObstacleMessage() {
  SharedDtor();
}

void VisionObstacleMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisionObstacleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionObstacleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionObstacleMessage_descriptor_;
}

const VisionObstacleMessage& VisionObstacleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();  return *default_instance_;
}

VisionObstacleMessage* VisionObstacleMessage::default_instance_ = NULL;

VisionObstacleMessage* VisionObstacleMessage::New() const {
  return new VisionObstacleMessage;
}

void VisionObstacleMessage::Clear() {
  obstacles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisionObstacleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ObstacleMessage obstacles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_obstacles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisionObstacleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ObstacleMessage obstacles = 1;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisionObstacleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ObstacleMessage obstacles = 1;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obstacles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisionObstacleMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated .ObstacleMessage obstacles = 1;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionObstacleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisionObstacleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisionObstacleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisionObstacleMessage::MergeFrom(const VisionObstacleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  obstacles_.MergeFrom(from.obstacles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisionObstacleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionObstacleMessage::CopyFrom(const VisionObstacleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionObstacleMessage::IsInitialized() const {
  
  for (int i = 0; i < obstacles_size(); i++) {
    if (!this->obstacles(i).IsInitialized()) return false;
  }
  return true;
}

void VisionObstacleMessage::Swap(VisionObstacleMessage* other) {
  if (other != this) {
    obstacles_.Swap(&other->obstacles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisionObstacleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionObstacleMessage_descriptor_;
  metadata.reflection = VisionObstacleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathPlanningRequestMessage::kGoToXFieldNumber;
const int PathPlanningRequestMessage::kGoToYFieldNumber;
const int PathPlanningRequestMessage::kGoToAngleFieldNumber;
#endif  // !_MSC_VER

PathPlanningRequestMessage::PathPlanningRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathPlanningRequestMessage::InitAsDefaultInstance() {
}

PathPlanningRequestMessage::PathPlanningRequestMessage(const PathPlanningRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathPlanningRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  gotox_ = 0;
  gotoy_ = 0;
  gotoangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPlanningRequestMessage::~PathPlanningRequestMessage() {
  SharedDtor();
}

void PathPlanningRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPlanningRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPlanningRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPlanningRequestMessage_descriptor_;
}

const PathPlanningRequestMessage& PathPlanningRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();  return *default_instance_;
}

PathPlanningRequestMessage* PathPlanningRequestMessage::default_instance_ = NULL;

PathPlanningRequestMessage* PathPlanningRequestMessage::New() const {
  return new PathPlanningRequestMessage;
}

void PathPlanningRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gotox_ = 0;
    gotoy_ = 0;
    gotoangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathPlanningRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float goToX = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gotox_)));
          set_has_gotox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_goToY;
        break;
      }
      
      // required float goToY = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goToY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gotoy_)));
          set_has_gotoy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_goToAngle;
        break;
      }
      
      // required float goToAngle = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goToAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gotoangle_)));
          set_has_gotoangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathPlanningRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float goToX = 1 [default = 0];
  if (has_gotox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gotox(), output);
  }
  
  // required float goToY = 2 [default = 0];
  if (has_gotoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gotoy(), output);
  }
  
  // required float goToAngle = 3 [default = 0];
  if (has_gotoangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gotoangle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathPlanningRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float goToX = 1 [default = 0];
  if (has_gotox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gotox(), target);
  }
  
  // required float goToY = 2 [default = 0];
  if (has_gotoy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gotoy(), target);
  }
  
  // required float goToAngle = 3 [default = 0];
  if (has_gotoangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gotoangle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathPlanningRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float goToX = 1 [default = 0];
    if (has_gotox()) {
      total_size += 1 + 4;
    }
    
    // required float goToY = 2 [default = 0];
    if (has_gotoy()) {
      total_size += 1 + 4;
    }
    
    // required float goToAngle = 3 [default = 0];
    if (has_gotoangle()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPlanningRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathPlanningRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathPlanningRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathPlanningRequestMessage::MergeFrom(const PathPlanningRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gotox()) {
      set_gotox(from.gotox());
    }
    if (from.has_gotoy()) {
      set_gotoy(from.gotoy());
    }
    if (from.has_gotoangle()) {
      set_gotoangle(from.gotoangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathPlanningRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanningRequestMessage::CopyFrom(const PathPlanningRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanningRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PathPlanningRequestMessage::Swap(PathPlanningRequestMessage* other) {
  if (other != this) {
    std::swap(gotox_, other->gotox_);
    std::swap(gotoy_, other->gotoy_);
    std::swap(gotoangle_, other->gotoangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathPlanningRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPlanningRequestMessage_descriptor_;
  metadata.reflection = PathPlanningRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathPlanningResultMessage::kMoveToXFieldNumber;
const int PathPlanningResultMessage::kMoveToYFieldNumber;
const int PathPlanningResultMessage::kMoveToAngleFieldNumber;
#endif  // !_MSC_VER

PathPlanningResultMessage::PathPlanningResultMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathPlanningResultMessage::InitAsDefaultInstance() {
}

PathPlanningResultMessage::PathPlanningResultMessage(const PathPlanningResultMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathPlanningResultMessage::SharedCtor() {
  _cached_size_ = 0;
  movetox_ = 0;
  movetoy_ = 0;
  movetoangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPlanningResultMessage::~PathPlanningResultMessage() {
  SharedDtor();
}

void PathPlanningResultMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPlanningResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPlanningResultMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPlanningResultMessage_descriptor_;
}

const PathPlanningResultMessage& PathPlanningResultMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObstacleAvoidanceMessage_2eproto();  return *default_instance_;
}

PathPlanningResultMessage* PathPlanningResultMessage::default_instance_ = NULL;

PathPlanningResultMessage* PathPlanningResultMessage::New() const {
  return new PathPlanningResultMessage;
}

void PathPlanningResultMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    movetox_ = 0;
    movetoy_ = 0;
    movetoangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathPlanningResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float moveToX = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movetox_)));
          set_has_movetox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_moveToY;
        break;
      }
      
      // required float moveToY = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveToY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movetoy_)));
          set_has_movetoy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_moveToAngle;
        break;
      }
      
      // required float moveToAngle = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveToAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movetoangle_)));
          set_has_movetoangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathPlanningResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float moveToX = 1 [default = 0];
  if (has_movetox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->movetox(), output);
  }
  
  // required float moveToY = 2 [default = 0];
  if (has_movetoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->movetoy(), output);
  }
  
  // required float moveToAngle = 3 [default = 0];
  if (has_movetoangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->movetoangle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathPlanningResultMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float moveToX = 1 [default = 0];
  if (has_movetox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->movetox(), target);
  }
  
  // required float moveToY = 2 [default = 0];
  if (has_movetoy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->movetoy(), target);
  }
  
  // required float moveToAngle = 3 [default = 0];
  if (has_movetoangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->movetoangle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathPlanningResultMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float moveToX = 1 [default = 0];
    if (has_movetox()) {
      total_size += 1 + 4;
    }
    
    // required float moveToY = 2 [default = 0];
    if (has_movetoy()) {
      total_size += 1 + 4;
    }
    
    // required float moveToAngle = 3 [default = 0];
    if (has_movetoangle()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPlanningResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathPlanningResultMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathPlanningResultMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathPlanningResultMessage::MergeFrom(const PathPlanningResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movetox()) {
      set_movetox(from.movetox());
    }
    if (from.has_movetoy()) {
      set_movetoy(from.movetoy());
    }
    if (from.has_movetoangle()) {
      set_movetoangle(from.movetoangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathPlanningResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanningResultMessage::CopyFrom(const PathPlanningResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanningResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PathPlanningResultMessage::Swap(PathPlanningResultMessage* other) {
  if (other != this) {
    std::swap(movetox_, other->movetox_);
    std::swap(movetoy_, other->movetoy_);
    std::swap(movetoangle_, other->movetoangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathPlanningResultMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPlanningResultMessage_descriptor_;
  metadata.reflection = PathPlanningResultMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
