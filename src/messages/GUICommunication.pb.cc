// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GUICommunication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* XmlUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmlUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandShake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandShake_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GUICommunication_2eproto() {
  protobuf_AddDesc_GUICommunication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GUICommunication.proto");
  GOOGLE_CHECK(file != NULL);
  XmlUpdate_descriptor_ = file->message_type(0);
  static const int XmlUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlUpdate, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlUpdate, value_),
  };
  XmlUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmlUpdate_descriptor_,
      XmlUpdate::default_instance_,
      XmlUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmlUpdate));
  HandShake_descriptor_ = file->message_type(1);
  static const int HandShake_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, checksum_),
  };
  HandShake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandShake_descriptor_,
      HandShake::default_instance_,
      HandShake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandShake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandShake));
  FileTransfer_descriptor_ = file->message_type(2);
  static const int FileTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, filepath_),
  };
  FileTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileTransfer_descriptor_,
      FileTransfer::default_instance_,
      FileTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileTransfer));
  ExternalConfig_descriptor_ = file->message_type(3);
  static const int ExternalConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, targethost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, updatexml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, resetactivities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, handoffrequest_),
  };
  ExternalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalConfig_descriptor_,
      ExternalConfig::default_instance_,
      ExternalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalConfig));
  GenericACK_descriptor_ = file->message_type(4);
  static const int GenericACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, hostid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, handshaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, ownlock_),
  };
  GenericACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericACK_descriptor_,
      GenericACK::default_instance_,
      GenericACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericACK));
  ResetMessage_descriptor_ = file->message_type(5);
  static const int ResetMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetMessage, resetactivities_),
  };
  ResetMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetMessage_descriptor_,
      ResetMessage::default_instance_,
      ResetMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetMessage));
  UpdateMessage_descriptor_ = file->message_type(6);
  static const int UpdateMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMessage, updatexml_),
  };
  UpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMessage_descriptor_,
      UpdateMessage::default_instance_,
      UpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GUICommunication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmlUpdate_descriptor_, &XmlUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandShake_descriptor_, &HandShake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileTransfer_descriptor_, &FileTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalConfig_descriptor_, &ExternalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericACK_descriptor_, &GenericACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetMessage_descriptor_, &ResetMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMessage_descriptor_, &UpdateMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GUICommunication_2eproto() {
  delete XmlUpdate::default_instance_;
  delete XmlUpdate_reflection_;
  delete HandShake::default_instance_;
  delete HandShake_reflection_;
  delete FileTransfer::default_instance_;
  delete FileTransfer_reflection_;
  delete ExternalConfig::default_instance_;
  delete ExternalConfig_reflection_;
  delete GenericACK::default_instance_;
  delete GenericACK_reflection_;
  delete ResetMessage::default_instance_;
  delete ResetMessage_reflection_;
  delete UpdateMessage::default_instance_;
  delete UpdateMessage_reflection_;
}

void protobuf_AddDesc_GUICommunication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026GUICommunication.proto\"+\n\tXmlUpdate\022\017\n"
    "\007keyword\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"=\n\tHandSha"
    "ke\022\016\n\006headId\030\001 \002(\t\022\016\n\006bodyId\030\002 \002(\t\022\020\n\010ch"
    "ecksum\030\003 \002(\r\".\n\014FileTransfer\022\014\n\004file\030\001 \002"
    "(\014\022\020\n\010filepath\030\002 \002(\t\"\244\001\n\016ExternalConfig\022"
    "\021\n\tmessageid\030\001 \002(\t\022\022\n\ntargethost\030\002 \002(\r\022\035"
    "\n\tupdateXml\030\003 \003(\0132\n.XmlUpdate\022\027\n\017resetAc"
    "tivities\030\004 \003(\t\022\033\n\004file\030\005 \001(\0132\r.FileTrans"
    "fer\022\026\n\016handOffRequest\030\006 \002(\010\"a\n\nGenericAC"
    "K\022\016\n\006hostid\030\001 \002(\r\022\021\n\tmessageid\030\002 \002(\t\022\037\n\013"
    "handshaking\030\003 \001(\0132\n.HandShake\022\017\n\007ownlock"
    "\030\004 \002(\010\"\'\n\014ResetMessage\022\027\n\017resetActivitie"
    "s\030\001 \003(\t\".\n\rUpdateMessage\022\035\n\tupdateXml\030\001 "
    "\003(\0132\n.XmlUpdate", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GUICommunication.proto", &protobuf_RegisterTypes);
  XmlUpdate::default_instance_ = new XmlUpdate();
  HandShake::default_instance_ = new HandShake();
  FileTransfer::default_instance_ = new FileTransfer();
  ExternalConfig::default_instance_ = new ExternalConfig();
  GenericACK::default_instance_ = new GenericACK();
  ResetMessage::default_instance_ = new ResetMessage();
  UpdateMessage::default_instance_ = new UpdateMessage();
  XmlUpdate::default_instance_->InitAsDefaultInstance();
  HandShake::default_instance_->InitAsDefaultInstance();
  FileTransfer::default_instance_->InitAsDefaultInstance();
  ExternalConfig::default_instance_->InitAsDefaultInstance();
  GenericACK::default_instance_->InitAsDefaultInstance();
  ResetMessage::default_instance_->InitAsDefaultInstance();
  UpdateMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GUICommunication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GUICommunication_2eproto {
  StaticDescriptorInitializer_GUICommunication_2eproto() {
    protobuf_AddDesc_GUICommunication_2eproto();
  }
} static_descriptor_initializer_GUICommunication_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int XmlUpdate::kKeywordFieldNumber;
const int XmlUpdate::kValueFieldNumber;
#endif  // !_MSC_VER

XmlUpdate::XmlUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XmlUpdate::InitAsDefaultInstance() {
}

XmlUpdate::XmlUpdate(const XmlUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XmlUpdate::SharedCtor() {
  _cached_size_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmlUpdate::~XmlUpdate() {
  SharedDtor();
}

void XmlUpdate::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void XmlUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmlUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmlUpdate_descriptor_;
}

const XmlUpdate& XmlUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

XmlUpdate* XmlUpdate::default_instance_ = NULL;

XmlUpdate* XmlUpdate::New() const {
  return new XmlUpdate;
}

void XmlUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmlUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyword = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XmlUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keyword(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XmlUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XmlUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyword = 1;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmlUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmlUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmlUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmlUpdate::MergeFrom(const XmlUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmlUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlUpdate::CopyFrom(const XmlUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void XmlUpdate::Swap(XmlUpdate* other) {
  if (other != this) {
    std::swap(keyword_, other->keyword_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmlUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmlUpdate_descriptor_;
  metadata.reflection = XmlUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandShake::kHeadIdFieldNumber;
const int HandShake::kBodyIdFieldNumber;
const int HandShake::kChecksumFieldNumber;
#endif  // !_MSC_VER

HandShake::HandShake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandShake::InitAsDefaultInstance() {
}

HandShake::HandShake(const HandShake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandShake::SharedCtor() {
  _cached_size_ = 0;
  headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bodyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandShake::~HandShake() {
  SharedDtor();
}

void HandShake::SharedDtor() {
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    delete headid_;
  }
  if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodyid_;
  }
  if (this != default_instance_) {
  }
}

void HandShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandShake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandShake_descriptor_;
}

const HandShake& HandShake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

HandShake* HandShake::default_instance_ = NULL;

HandShake* HandShake::New() const {
  return new HandShake;
}

void HandShake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_headid()) {
      if (headid_ != &::google::protobuf::internal::kEmptyString) {
        headid_->clear();
      }
    }
    if (has_bodyid()) {
      if (bodyid_ != &::google::protobuf::internal::kEmptyString) {
        bodyid_->clear();
      }
    }
    checksum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string headId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headid().data(), this->headid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bodyId;
        break;
      }
      
      // required string bodyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bodyid().data(), this->bodyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checksum;
        break;
      }
      
      // required uint32 checksum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string headId = 1;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->headid(), output);
  }
  
  // required string bodyId = 2;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bodyid(), output);
  }
  
  // required uint32 checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checksum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandShake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string headId = 1;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headid(), target);
  }
  
  // required string bodyId = 2;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bodyid().data(), this->bodyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bodyid(), target);
  }
  
  // required uint32 checksum = 3;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checksum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandShake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string headId = 1;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headid());
    }
    
    // required string bodyId = 2;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodyid());
    }
    
    // required uint32 checksum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandShake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandShake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandShake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandShake::MergeFrom(const HandShake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandShake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandShake::CopyFrom(const HandShake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void HandShake::Swap(HandShake* other) {
  if (other != this) {
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandShake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandShake_descriptor_;
  metadata.reflection = HandShake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTransfer::kFileFieldNumber;
const int FileTransfer::kFilepathFieldNumber;
#endif  // !_MSC_VER

FileTransfer::FileTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileTransfer::InitAsDefaultInstance() {
}

FileTransfer::FileTransfer(const FileTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileTransfer::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileTransfer::~FileTransfer() {
  SharedDtor();
}

void FileTransfer::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void FileTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTransfer_descriptor_;
}

const FileTransfer& FileTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

FileTransfer* FileTransfer::default_instance_ = NULL;

FileTransfer* FileTransfer::New() const {
  return new FileTransfer;
}

void FileTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }
      
      // required string filepath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->file(), output);
  }
  
  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filepath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes file = 1;
  if (has_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }
  
  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file());
    }
    
    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTransfer::MergeFrom(const FileTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTransfer::CopyFrom(const FileTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FileTransfer::Swap(FileTransfer* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTransfer_descriptor_;
  metadata.reflection = FileTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExternalConfig::kMessageidFieldNumber;
const int ExternalConfig::kTargethostFieldNumber;
const int ExternalConfig::kUpdateXmlFieldNumber;
const int ExternalConfig::kResetActivitiesFieldNumber;
const int ExternalConfig::kFileFieldNumber;
const int ExternalConfig::kHandOffRequestFieldNumber;
#endif  // !_MSC_VER

ExternalConfig::ExternalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalConfig::InitAsDefaultInstance() {
  file_ = const_cast< ::FileTransfer*>(&::FileTransfer::default_instance());
}

ExternalConfig::ExternalConfig(const ExternalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalConfig::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targethost_ = 0u;
  file_ = NULL;
  handoffrequest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalConfig::~ExternalConfig() {
  SharedDtor();
}

void ExternalConfig::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete file_;
  }
}

void ExternalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalConfig_descriptor_;
}

const ExternalConfig& ExternalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

ExternalConfig* ExternalConfig::default_instance_ = NULL;

ExternalConfig* ExternalConfig::New() const {
  return new ExternalConfig;
}

void ExternalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    targethost_ = 0u;
    if (has_file()) {
      if (file_ != NULL) file_->::FileTransfer::Clear();
    }
    handoffrequest_ = false;
  }
  updatexml_.Clear();
  resetactivities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targethost;
        break;
      }
      
      // required uint32 targethost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targethost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targethost_)));
          set_has_targethost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updateXml;
        break;
      }
      
      // repeated .XmlUpdate updateXml = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateXml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatexml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updateXml;
        if (input->ExpectTag(34)) goto parse_resetActivities;
        break;
      }
      
      // repeated string resetActivities = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resetActivities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resetactivities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resetactivities(0).data(), this->resetactivities(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resetActivities;
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }
      
      // optional .FileTransfer file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handOffRequest;
        break;
      }
      
      // required bool handOffRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handOffRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handoffrequest_)));
          set_has_handoffrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messageid(), output);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targethost(), output);
  }
  
  // repeated .XmlUpdate updateXml = 3;
  for (int i = 0; i < this->updatexml_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updatexml(i), output);
  }
  
  // repeated string resetActivities = 4;
  for (int i = 0; i < this->resetactivities_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->resetactivities(i).data(), this->resetactivities(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resetactivities(i), output);
  }
  
  // optional .FileTransfer file = 5;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file(), output);
  }
  
  // required bool handOffRequest = 6;
  if (has_handoffrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->handoffrequest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string messageid = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }
  
  // required uint32 targethost = 2;
  if (has_targethost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targethost(), target);
  }
  
  // repeated .XmlUpdate updateXml = 3;
  for (int i = 0; i < this->updatexml_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updatexml(i), target);
  }
  
  // repeated string resetActivities = 4;
  for (int i = 0; i < this->resetactivities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resetactivities(i).data(), this->resetactivities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->resetactivities(i), target);
  }
  
  // optional .FileTransfer file = 5;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file(), target);
  }
  
  // required bool handOffRequest = 6;
  if (has_handoffrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->handoffrequest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string messageid = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required uint32 targethost = 2;
    if (has_targethost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targethost());
    }
    
    // optional .FileTransfer file = 5;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // required bool handOffRequest = 6;
    if (has_handoffrequest()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .XmlUpdate updateXml = 3;
  total_size += 1 * this->updatexml_size();
  for (int i = 0; i < this->updatexml_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatexml(i));
  }
  
  // repeated string resetActivities = 4;
  total_size += 1 * this->resetactivities_size();
  for (int i = 0; i < this->resetactivities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resetactivities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalConfig::MergeFrom(const ExternalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  updatexml_.MergeFrom(from.updatexml_);
  resetactivities_.MergeFrom(from.resetactivities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_targethost()) {
      set_targethost(from.targethost());
    }
    if (from.has_file()) {
      mutable_file()->::FileTransfer::MergeFrom(from.file());
    }
    if (from.has_handoffrequest()) {
      set_handoffrequest(from.handoffrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalConfig::CopyFrom(const ExternalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  for (int i = 0; i < updatexml_size(); i++) {
    if (!this->updatexml(i).IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void ExternalConfig::Swap(ExternalConfig* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(targethost_, other->targethost_);
    updatexml_.Swap(&other->updatexml_);
    resetactivities_.Swap(&other->resetactivities_);
    std::swap(file_, other->file_);
    std::swap(handoffrequest_, other->handoffrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalConfig_descriptor_;
  metadata.reflection = ExternalConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericACK::kHostidFieldNumber;
const int GenericACK::kMessageidFieldNumber;
const int GenericACK::kHandshakingFieldNumber;
const int GenericACK::kOwnlockFieldNumber;
#endif  // !_MSC_VER

GenericACK::GenericACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericACK::InitAsDefaultInstance() {
  handshaking_ = const_cast< ::HandShake*>(&::HandShake::default_instance());
}

GenericACK::GenericACK(const GenericACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericACK::SharedCtor() {
  _cached_size_ = 0;
  hostid_ = 0u;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handshaking_ = NULL;
  ownlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericACK::~GenericACK() {
  SharedDtor();
}

void GenericACK::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete handshaking_;
  }
}

void GenericACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericACK_descriptor_;
}

const GenericACK& GenericACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

GenericACK* GenericACK::default_instance_ = NULL;

GenericACK* GenericACK::New() const {
  return new GenericACK;
}

void GenericACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hostid_ = 0u;
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    if (has_handshaking()) {
      if (handshaking_ != NULL) handshaking_->::HandShake::Clear();
    }
    ownlock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hostid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostid_)));
          set_has_hostid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageid;
        break;
      }
      
      // required string messageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_handshaking;
        break;
      }
      
      // optional .HandShake handshaking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handshaking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshaking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ownlock;
        break;
      }
      
      // required bool ownlock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ownlock_)));
          set_has_ownlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hostid = 1;
  if (has_hostid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hostid(), output);
  }
  
  // required string messageid = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }
  
  // optional .HandShake handshaking = 3;
  if (has_handshaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->handshaking(), output);
  }
  
  // required bool ownlock = 4;
  if (has_ownlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ownlock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hostid = 1;
  if (has_hostid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hostid(), target);
  }
  
  // required string messageid = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }
  
  // optional .HandShake handshaking = 3;
  if (has_handshaking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->handshaking(), target);
  }
  
  // required bool ownlock = 4;
  if (has_ownlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ownlock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hostid = 1;
    if (has_hostid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hostid());
    }
    
    // required string messageid = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // optional .HandShake handshaking = 3;
    if (has_handshaking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handshaking());
    }
    
    // required bool ownlock = 4;
    if (has_ownlock()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericACK::MergeFrom(const GenericACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostid()) {
      set_hostid(from.hostid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_handshaking()) {
      mutable_handshaking()->::HandShake::MergeFrom(from.handshaking());
    }
    if (from.has_ownlock()) {
      set_ownlock(from.ownlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericACK::CopyFrom(const GenericACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_handshaking()) {
    if (!this->handshaking().IsInitialized()) return false;
  }
  return true;
}

void GenericACK::Swap(GenericACK* other) {
  if (other != this) {
    std::swap(hostid_, other->hostid_);
    std::swap(messageid_, other->messageid_);
    std::swap(handshaking_, other->handshaking_);
    std::swap(ownlock_, other->ownlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericACK_descriptor_;
  metadata.reflection = GenericACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetMessage::kResetActivitiesFieldNumber;
#endif  // !_MSC_VER

ResetMessage::ResetMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetMessage::InitAsDefaultInstance() {
}

ResetMessage::ResetMessage(const ResetMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetMessage::~ResetMessage() {
  SharedDtor();
}

void ResetMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetMessage_descriptor_;
}

const ResetMessage& ResetMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

ResetMessage* ResetMessage::default_instance_ = NULL;

ResetMessage* ResetMessage::New() const {
  return new ResetMessage;
}

void ResetMessage::Clear() {
  resetactivities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string resetActivities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resetActivities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resetactivities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resetactivities(0).data(), this->resetactivities(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resetActivities;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string resetActivities = 1;
  for (int i = 0; i < this->resetactivities_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->resetactivities(i).data(), this->resetactivities(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resetactivities(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string resetActivities = 1;
  for (int i = 0; i < this->resetactivities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resetactivities(i).data(), this->resetactivities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->resetactivities(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated string resetActivities = 1;
  total_size += 1 * this->resetactivities_size();
  for (int i = 0; i < this->resetactivities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resetactivities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetMessage::MergeFrom(const ResetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  resetactivities_.MergeFrom(from.resetactivities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetMessage::CopyFrom(const ResetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetMessage::IsInitialized() const {
  
  return true;
}

void ResetMessage::Swap(ResetMessage* other) {
  if (other != this) {
    resetactivities_.Swap(&other->resetactivities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetMessage_descriptor_;
  metadata.reflection = ResetMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMessage::kUpdateXmlFieldNumber;
#endif  // !_MSC_VER

UpdateMessage::UpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMessage::InitAsDefaultInstance() {
}

UpdateMessage::UpdateMessage(const UpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMessage::~UpdateMessage() {
  SharedDtor();
}

void UpdateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMessage_descriptor_;
}

const UpdateMessage& UpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GUICommunication_2eproto();  return *default_instance_;
}

UpdateMessage* UpdateMessage::default_instance_ = NULL;

UpdateMessage* UpdateMessage::New() const {
  return new UpdateMessage;
}

void UpdateMessage::Clear() {
  updatexml_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XmlUpdate updateXml = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateXml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatexml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updateXml;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .XmlUpdate updateXml = 1;
  for (int i = 0; i < this->updatexml_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updatexml(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .XmlUpdate updateXml = 1;
  for (int i = 0; i < this->updatexml_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updatexml(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated .XmlUpdate updateXml = 1;
  total_size += 1 * this->updatexml_size();
  for (int i = 0; i < this->updatexml_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatexml(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMessage::MergeFrom(const UpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  updatexml_.MergeFrom(from.updatexml_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMessage::CopyFrom(const UpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessage::IsInitialized() const {
  
  for (int i = 0; i < updatexml_size(); i++) {
    if (!this->updatexml(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateMessage::Swap(UpdateMessage* other) {
  if (other != this) {
    updatexml_.Swap(&other->updatexml_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMessage_descriptor_;
  metadata.reflection = UpdateMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
