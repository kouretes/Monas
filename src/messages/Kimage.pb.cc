// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Kimage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KRawImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KRawImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KRawImageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KRawImageHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallCircle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallCircle_reflection_ = NULL;
const ::google::protobuf::Descriptor* point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  point_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Kimage_2eproto() {
  protobuf_AddDesc_Kimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Kimage.proto");
  GOOGLE_CHECK(file != NULL);
  KRawImage_descriptor_ = file->message_type(0);
  static const int KRawImage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, imagerawdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, ball_),
  };
  KRawImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KRawImage_descriptor_,
      KRawImage::default_instance_,
      KRawImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KRawImage));
  KRawImageHeader_descriptor_ = file->message_type(1);
  static const int KRawImageHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, type_),
  };
  KRawImageHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KRawImageHeader_descriptor_,
      KRawImageHeader::default_instance_,
      KRawImageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KRawImageHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KRawImageHeader));
  Polygon_descriptor_ = file->message_type(2);
  static const int Polygon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, confidence_),
  };
  Polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Polygon));
  BallCircle_descriptor_ = file->message_type(3);
  static const int BallCircle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, color_),
  };
  BallCircle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallCircle_descriptor_,
      BallCircle::default_instance_,
      BallCircle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallCircle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallCircle));
  point_descriptor_ = file->message_type(4);
  static const int point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, y_),
  };
  point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      point_descriptor_,
      point::default_instance_,
      point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(point));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Kimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KRawImage_descriptor_, &KRawImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KRawImageHeader_descriptor_, &KRawImageHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallCircle_descriptor_, &BallCircle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    point_descriptor_, &point::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Kimage_2eproto() {
  delete KRawImage::default_instance_;
  delete KRawImage_reflection_;
  delete KRawImageHeader::default_instance_;
  delete KRawImageHeader_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete BallCircle::default_instance_;
  delete BallCircle_reflection_;
  delete point::default_instance_;
  delete point_reflection_;
}

void protobuf_AddDesc_Kimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Kimage.proto\"\232\001\n\tKRawImage\022\021\n\005bytes\030\001 "
    "\002(\005:\002-1\022\020\n\005width\030\002 \002(\005:\0010\022\021\n\006height\030\003 \002("
    "\005:\0010\022\017\n\004type\030\004 \002(\005:\0014\022\024\n\014ImageRawData\030\005 "
    "\002(\014\022\023\n\001p\030\006 \003(\0132\010.Polygon\022\031\n\004ball\030\007 \003(\0132\013"
    ".BallCircle\"Z\n\017KRawImageHeader\022\021\n\005bytes\030"
    "\001 \002(\005:\002-1\022\020\n\005width\030\002 \002(\005:\0010\022\021\n\006height\030\003 "
    "\002(\005:\0010\022\017\n\004type\030\004 \002(\005:\0014\"L\n\007Polygon\022\026\n\006po"
    "ints\030\001 \003(\0132\006.point\022\021\n\005color\030\002 \002(\005:\002-1\022\026\n"
    "\nconfidence\030\003 \002(\002:\002-1\"y\n\nBallCircle\022\026\n\006c"
    "enter\030\001 \002(\0132\006.point\022\022\n\006radius\030\002 \002(\005:\002-1\022"
    "\026\n\nconfidence\030\003 \002(\005:\002-1\022\024\n\005valid\030\004 \002(\010:\005"
    "false\022\021\n\005color\030\005 \001(\005:\002-1\"%\n\005point\022\r\n\001x\030\001"
    " \002(\005:\002-1\022\r\n\001y\030\002 \002(\005:\002-1", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Kimage.proto", &protobuf_RegisterTypes);
  KRawImage::default_instance_ = new KRawImage();
  KRawImageHeader::default_instance_ = new KRawImageHeader();
  Polygon::default_instance_ = new Polygon();
  BallCircle::default_instance_ = new BallCircle();
  point::default_instance_ = new point();
  KRawImage::default_instance_->InitAsDefaultInstance();
  KRawImageHeader::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  BallCircle::default_instance_->InitAsDefaultInstance();
  point::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Kimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Kimage_2eproto {
  StaticDescriptorInitializer_Kimage_2eproto() {
    protobuf_AddDesc_Kimage_2eproto();
  }
} static_descriptor_initializer_Kimage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KRawImage::kBytesFieldNumber;
const int KRawImage::kWidthFieldNumber;
const int KRawImage::kHeightFieldNumber;
const int KRawImage::kTypeFieldNumber;
const int KRawImage::kImageRawDataFieldNumber;
const int KRawImage::kPFieldNumber;
const int KRawImage::kBallFieldNumber;
#endif  // !_MSC_VER

KRawImage::KRawImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KRawImage::InitAsDefaultInstance() {
}

KRawImage::KRawImage(const KRawImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KRawImage::SharedCtor() {
  _cached_size_ = 0;
  bytes_ = -1;
  width_ = 0;
  height_ = 0;
  type_ = 4;
  imagerawdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KRawImage::~KRawImage() {
  SharedDtor();
}

void KRawImage::SharedDtor() {
  if (imagerawdata_ != &::google::protobuf::internal::kEmptyString) {
    delete imagerawdata_;
  }
  if (this != default_instance_) {
  }
}

void KRawImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KRawImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KRawImage_descriptor_;
}

const KRawImage& KRawImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

KRawImage* KRawImage::default_instance_ = NULL;

KRawImage* KRawImage::New() const {
  return new KRawImage;
}

void KRawImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytes_ = -1;
    width_ = 0;
    height_ = 0;
    type_ = 4;
    if (has_imagerawdata()) {
      if (imagerawdata_ != &::google::protobuf::internal::kEmptyString) {
        imagerawdata_->clear();
      }
    }
  }
  p_.Clear();
  ball_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KRawImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bytes = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required int32 width = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required int32 type = 4 [default = 4];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ImageRawData;
        break;
      }
      
      // required bytes ImageRawData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ImageRawData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagerawdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_p;
        break;
      }
      
      // repeated .Polygon p = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_p;
        if (input->ExpectTag(58)) goto parse_ball;
        break;
      }
      
      // repeated .BallCircle ball = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ball;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KRawImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bytes = 1 [default = -1];
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytes(), output);
  }
  
  // required int32 width = 2 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // required int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // required int32 type = 4 [default = 4];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  // required bytes ImageRawData = 5;
  if (has_imagerawdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->imagerawdata(), output);
  }
  
  // repeated .Polygon p = 6;
  for (int i = 0; i < this->p_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->p(i), output);
  }
  
  // repeated .BallCircle ball = 7;
  for (int i = 0; i < this->ball_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ball(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KRawImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bytes = 1 [default = -1];
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bytes(), target);
  }
  
  // required int32 width = 2 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // required int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // required int32 type = 4 [default = 4];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  // required bytes ImageRawData = 5;
  if (has_imagerawdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->imagerawdata(), target);
  }
  
  // repeated .Polygon p = 6;
  for (int i = 0; i < this->p_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->p(i), target);
  }
  
  // repeated .BallCircle ball = 7;
  for (int i = 0; i < this->ball_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ball(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KRawImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bytes = 1 [default = -1];
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes());
    }
    
    // required int32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required int32 type = 4 [default = 4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required bytes ImageRawData = 5;
    if (has_imagerawdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagerawdata());
    }
    
  }
  // repeated .Polygon p = 6;
  total_size += 1 * this->p_size();
  for (int i = 0; i < this->p_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->p(i));
  }
  
  // repeated .BallCircle ball = 7;
  total_size += 1 * this->ball_size();
  for (int i = 0; i < this->ball_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ball(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KRawImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KRawImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KRawImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KRawImage::MergeFrom(const KRawImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  p_.MergeFrom(from.p_);
  ball_.MergeFrom(from.ball_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_imagerawdata()) {
      set_imagerawdata(from.imagerawdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KRawImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KRawImage::CopyFrom(const KRawImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KRawImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < p_size(); i++) {
    if (!this->p(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ball_size(); i++) {
    if (!this->ball(i).IsInitialized()) return false;
  }
  return true;
}

void KRawImage::Swap(KRawImage* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    std::swap(imagerawdata_, other->imagerawdata_);
    p_.Swap(&other->p_);
    ball_.Swap(&other->ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KRawImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KRawImage_descriptor_;
  metadata.reflection = KRawImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KRawImageHeader::kBytesFieldNumber;
const int KRawImageHeader::kWidthFieldNumber;
const int KRawImageHeader::kHeightFieldNumber;
const int KRawImageHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

KRawImageHeader::KRawImageHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KRawImageHeader::InitAsDefaultInstance() {
}

KRawImageHeader::KRawImageHeader(const KRawImageHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KRawImageHeader::SharedCtor() {
  _cached_size_ = 0;
  bytes_ = -1;
  width_ = 0;
  height_ = 0;
  type_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KRawImageHeader::~KRawImageHeader() {
  SharedDtor();
}

void KRawImageHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KRawImageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KRawImageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KRawImageHeader_descriptor_;
}

const KRawImageHeader& KRawImageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

KRawImageHeader* KRawImageHeader::default_instance_ = NULL;

KRawImageHeader* KRawImageHeader::New() const {
  return new KRawImageHeader;
}

void KRawImageHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytes_ = -1;
    width_ = 0;
    height_ = 0;
    type_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KRawImageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bytes = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required int32 width = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required int32 type = 4 [default = 4];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KRawImageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bytes = 1 [default = -1];
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytes(), output);
  }
  
  // required int32 width = 2 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // required int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // required int32 type = 4 [default = 4];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KRawImageHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bytes = 1 [default = -1];
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bytes(), target);
  }
  
  // required int32 width = 2 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // required int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // required int32 type = 4 [default = 4];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KRawImageHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bytes = 1 [default = -1];
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes());
    }
    
    // required int32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required int32 type = 4 [default = 4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KRawImageHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KRawImageHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KRawImageHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KRawImageHeader::MergeFrom(const KRawImageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KRawImageHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KRawImageHeader::CopyFrom(const KRawImageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KRawImageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void KRawImageHeader::Swap(KRawImageHeader* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KRawImageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KRawImageHeader_descriptor_;
  metadata.reflection = KRawImageHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Polygon::kPointsFieldNumber;
const int Polygon::kColorFieldNumber;
const int Polygon::kConfidenceFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  color_ = -1;
  confidence_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New() const {
  return new Polygon;
}

void Polygon::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    color_ = -1;
    confidence_ = -1;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .point points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // required int32 color = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }
      
      // required float confidence = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  // required int32 color = 2 [default = -1];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // required float confidence = 3 [default = -1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  // required int32 color = 2 [default = -1];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }
  
  // required float confidence = 3 [default = -1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Polygon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 color = 2 [default = -1];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // required float confidence = 3 [default = -1];
    if (has_confidence()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(color_, other->color_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallCircle::kCenterFieldNumber;
const int BallCircle::kRadiusFieldNumber;
const int BallCircle::kConfidenceFieldNumber;
const int BallCircle::kValidFieldNumber;
const int BallCircle::kColorFieldNumber;
#endif  // !_MSC_VER

BallCircle::BallCircle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallCircle::InitAsDefaultInstance() {
  center_ = const_cast< ::point*>(&::point::default_instance());
}

BallCircle::BallCircle(const BallCircle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallCircle::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = -1;
  confidence_ = -1;
  valid_ = false;
  color_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallCircle::~BallCircle() {
  SharedDtor();
}

void BallCircle::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void BallCircle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallCircle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallCircle_descriptor_;
}

const BallCircle& BallCircle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

BallCircle* BallCircle::default_instance_ = NULL;

BallCircle* BallCircle::New() const {
  return new BallCircle;
}

void BallCircle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::point::Clear();
    }
    radius_ = -1;
    confidence_ = -1;
    valid_ = false;
    color_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallCircle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .point center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_radius;
        break;
      }
      
      // required int32 radius = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_confidence;
        break;
      }
      
      // required int32 confidence = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid;
        break;
      }
      
      // required bool valid = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }
      
      // optional int32 color = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallCircle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .point center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }
  
  // required int32 radius = 2 [default = -1];
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->radius(), output);
  }
  
  // required int32 confidence = 3 [default = -1];
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->confidence(), output);
  }
  
  // required bool valid = 4 [default = false];
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->valid(), output);
  }
  
  // optional int32 color = 5 [default = -1];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallCircle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .point center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required int32 radius = 2 [default = -1];
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->radius(), target);
  }
  
  // required int32 confidence = 3 [default = -1];
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->confidence(), target);
  }
  
  // required bool valid = 4 [default = false];
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->valid(), target);
  }
  
  // optional int32 color = 5 [default = -1];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallCircle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .point center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required int32 radius = 2 [default = -1];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }
    
    // required int32 confidence = 3 [default = -1];
    if (has_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence());
    }
    
    // required bool valid = 4 [default = false];
    if (has_valid()) {
      total_size += 1 + 1;
    }
    
    // optional int32 color = 5 [default = -1];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallCircle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallCircle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallCircle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallCircle::MergeFrom(const BallCircle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::point::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallCircle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallCircle::CopyFrom(const BallCircle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallCircle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void BallCircle::Swap(BallCircle* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(confidence_, other->confidence_);
    std::swap(valid_, other->valid_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallCircle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallCircle_descriptor_;
  metadata.reflection = BallCircle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int point::kXFieldNumber;
const int point::kYFieldNumber;
#endif  // !_MSC_VER

point::point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void point::InitAsDefaultInstance() {
}

point::point(const point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void point::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

point::~point() {
  SharedDtor();
}

void point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return point_descriptor_;
}

const point& point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Kimage_2eproto();  return *default_instance_;
}

point* point::default_instance_ = NULL;

point* point::New() const {
  return new point;
}

void point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2 [default = -1];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void point::MergeFrom(const point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point::CopyFrom(const point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void point::Swap(point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = point_descriptor_;
  metadata.reflection = point_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
